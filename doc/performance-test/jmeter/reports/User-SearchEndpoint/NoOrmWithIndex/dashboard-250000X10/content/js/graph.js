/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2034.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 3.0], [43.7, 3.0], [43.8, 3.0], [43.9, 3.0], [44.0, 3.0], [44.1, 3.0], [44.2, 3.0], [44.3, 3.0], [44.4, 3.0], [44.5, 3.0], [44.6, 3.0], [44.7, 3.0], [44.8, 3.0], [44.9, 3.0], [45.0, 3.0], [45.1, 3.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 3.0], [50.0, 3.0], [50.1, 3.0], [50.2, 3.0], [50.3, 3.0], [50.4, 3.0], [50.5, 3.0], [50.6, 3.0], [50.7, 3.0], [50.8, 3.0], [50.9, 3.0], [51.0, 3.0], [51.1, 3.0], [51.2, 3.0], [51.3, 3.0], [51.4, 3.0], [51.5, 3.0], [51.6, 3.0], [51.7, 3.0], [51.8, 3.0], [51.9, 3.0], [52.0, 3.0], [52.1, 3.0], [52.2, 3.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 3.0], [52.9, 3.0], [53.0, 3.0], [53.1, 3.0], [53.2, 3.0], [53.3, 3.0], [53.4, 3.0], [53.5, 3.0], [53.6, 3.0], [53.7, 3.0], [53.8, 3.0], [53.9, 3.0], [54.0, 3.0], [54.1, 3.0], [54.2, 3.0], [54.3, 3.0], [54.4, 3.0], [54.5, 3.0], [54.6, 3.0], [54.7, 3.0], [54.8, 3.0], [54.9, 3.0], [55.0, 3.0], [55.1, 3.0], [55.2, 3.0], [55.3, 3.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 3.0], [55.8, 3.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 3.0], [58.9, 3.0], [59.0, 3.0], [59.1, 4.0], [59.2, 4.0], [59.3, 4.0], [59.4, 4.0], [59.5, 4.0], [59.6, 4.0], [59.7, 4.0], [59.8, 4.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 4.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 4.0], [60.9, 4.0], [61.0, 4.0], [61.1, 4.0], [61.2, 4.0], [61.3, 4.0], [61.4, 4.0], [61.5, 4.0], [61.6, 4.0], [61.7, 4.0], [61.8, 4.0], [61.9, 4.0], [62.0, 4.0], [62.1, 4.0], [62.2, 4.0], [62.3, 4.0], [62.4, 4.0], [62.5, 4.0], [62.6, 4.0], [62.7, 4.0], [62.8, 4.0], [62.9, 4.0], [63.0, 4.0], [63.1, 4.0], [63.2, 4.0], [63.3, 4.0], [63.4, 4.0], [63.5, 4.0], [63.6, 4.0], [63.7, 4.0], [63.8, 4.0], [63.9, 4.0], [64.0, 4.0], [64.1, 4.0], [64.2, 4.0], [64.3, 4.0], [64.4, 4.0], [64.5, 4.0], [64.6, 4.0], [64.7, 4.0], [64.8, 4.0], [64.9, 4.0], [65.0, 4.0], [65.1, 4.0], [65.2, 4.0], [65.3, 4.0], [65.4, 4.0], [65.5, 4.0], [65.6, 4.0], [65.7, 4.0], [65.8, 4.0], [65.9, 4.0], [66.0, 4.0], [66.1, 4.0], [66.2, 4.0], [66.3, 4.0], [66.4, 4.0], [66.5, 4.0], [66.6, 4.0], [66.7, 4.0], [66.8, 4.0], [66.9, 4.0], [67.0, 4.0], [67.1, 4.0], [67.2, 4.0], [67.3, 4.0], [67.4, 4.0], [67.5, 4.0], [67.6, 4.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 4.0], [68.1, 4.0], [68.2, 4.0], [68.3, 4.0], [68.4, 4.0], [68.5, 4.0], [68.6, 4.0], [68.7, 4.0], [68.8, 4.0], [68.9, 4.0], [69.0, 5.0], [69.1, 5.0], [69.2, 5.0], [69.3, 5.0], [69.4, 5.0], [69.5, 5.0], [69.6, 5.0], [69.7, 5.0], [69.8, 5.0], [69.9, 5.0], [70.0, 5.0], [70.1, 5.0], [70.2, 5.0], [70.3, 5.0], [70.4, 5.0], [70.5, 5.0], [70.6, 5.0], [70.7, 5.0], [70.8, 5.0], [70.9, 5.0], [71.0, 5.0], [71.1, 5.0], [71.2, 5.0], [71.3, 5.0], [71.4, 5.0], [71.5, 5.0], [71.6, 5.0], [71.7, 5.0], [71.8, 5.0], [71.9, 5.0], [72.0, 5.0], [72.1, 5.0], [72.2, 5.0], [72.3, 5.0], [72.4, 5.0], [72.5, 5.0], [72.6, 5.0], [72.7, 5.0], [72.8, 5.0], [72.9, 5.0], [73.0, 5.0], [73.1, 5.0], [73.2, 5.0], [73.3, 5.0], [73.4, 5.0], [73.5, 5.0], [73.6, 5.0], [73.7, 5.0], [73.8, 5.0], [73.9, 5.0], [74.0, 5.0], [74.1, 5.0], [74.2, 5.0], [74.3, 5.0], [74.4, 5.0], [74.5, 5.0], [74.6, 5.0], [74.7, 5.0], [74.8, 5.0], [74.9, 5.0], [75.0, 5.0], [75.1, 5.0], [75.2, 5.0], [75.3, 5.0], [75.4, 5.0], [75.5, 6.0], [75.6, 6.0], [75.7, 6.0], [75.8, 6.0], [75.9, 6.0], [76.0, 6.0], [76.1, 6.0], [76.2, 6.0], [76.3, 6.0], [76.4, 6.0], [76.5, 6.0], [76.6, 6.0], [76.7, 6.0], [76.8, 6.0], [76.9, 6.0], [77.0, 6.0], [77.1, 6.0], [77.2, 6.0], [77.3, 6.0], [77.4, 6.0], [77.5, 6.0], [77.6, 6.0], [77.7, 6.0], [77.8, 6.0], [77.9, 6.0], [78.0, 6.0], [78.1, 6.0], [78.2, 6.0], [78.3, 6.0], [78.4, 6.0], [78.5, 6.0], [78.6, 6.0], [78.7, 6.0], [78.8, 6.0], [78.9, 6.0], [79.0, 6.0], [79.1, 6.0], [79.2, 6.0], [79.3, 6.0], [79.4, 6.0], [79.5, 6.0], [79.6, 6.0], [79.7, 6.0], [79.8, 6.0], [79.9, 6.0], [80.0, 6.0], [80.1, 7.0], [80.2, 7.0], [80.3, 7.0], [80.4, 7.0], [80.5, 7.0], [80.6, 7.0], [80.7, 7.0], [80.8, 7.0], [80.9, 7.0], [81.0, 7.0], [81.1, 7.0], [81.2, 7.0], [81.3, 7.0], [81.4, 7.0], [81.5, 7.0], [81.6, 7.0], [81.7, 7.0], [81.8, 7.0], [81.9, 7.0], [82.0, 7.0], [82.1, 7.0], [82.2, 7.0], [82.3, 7.0], [82.4, 7.0], [82.5, 7.0], [82.6, 7.0], [82.7, 7.0], [82.8, 7.0], [82.9, 7.0], [83.0, 7.0], [83.1, 7.0], [83.2, 7.0], [83.3, 7.0], [83.4, 8.0], [83.5, 8.0], [83.6, 8.0], [83.7, 8.0], [83.8, 8.0], [83.9, 8.0], [84.0, 8.0], [84.1, 8.0], [84.2, 8.0], [84.3, 8.0], [84.4, 8.0], [84.5, 8.0], [84.6, 8.0], [84.7, 8.0], [84.8, 8.0], [84.9, 8.0], [85.0, 8.0], [85.1, 8.0], [85.2, 8.0], [85.3, 8.0], [85.4, 8.0], [85.5, 8.0], [85.6, 8.0], [85.7, 8.0], [85.8, 8.0], [85.9, 8.0], [86.0, 9.0], [86.1, 9.0], [86.2, 9.0], [86.3, 9.0], [86.4, 9.0], [86.5, 9.0], [86.6, 9.0], [86.7, 9.0], [86.8, 9.0], [86.9, 9.0], [87.0, 9.0], [87.1, 9.0], [87.2, 9.0], [87.3, 9.0], [87.4, 9.0], [87.5, 9.0], [87.6, 9.0], [87.7, 9.0], [87.8, 9.0], [87.9, 10.0], [88.0, 10.0], [88.1, 10.0], [88.2, 10.0], [88.3, 10.0], [88.4, 10.0], [88.5, 10.0], [88.6, 10.0], [88.7, 10.0], [88.8, 10.0], [88.9, 10.0], [89.0, 10.0], [89.1, 10.0], [89.2, 10.0], [89.3, 11.0], [89.4, 11.0], [89.5, 11.0], [89.6, 11.0], [89.7, 11.0], [89.8, 11.0], [89.9, 11.0], [90.0, 11.0], [90.1, 11.0], [90.2, 11.0], [90.3, 11.0], [90.4, 11.0], [90.5, 12.0], [90.6, 12.0], [90.7, 12.0], [90.8, 12.0], [90.9, 12.0], [91.0, 12.0], [91.1, 12.0], [91.2, 12.0], [91.3, 12.0], [91.4, 12.0], [91.5, 13.0], [91.6, 13.0], [91.7, 13.0], [91.8, 13.0], [91.9, 13.0], [92.0, 13.0], [92.1, 13.0], [92.2, 14.0], [92.3, 14.0], [92.4, 14.0], [92.5, 14.0], [92.6, 14.0], [92.7, 14.0], [92.8, 14.0], [92.9, 15.0], [93.0, 15.0], [93.1, 15.0], [93.2, 15.0], [93.3, 15.0], [93.4, 15.0], [93.5, 16.0], [93.6, 16.0], [93.7, 16.0], [93.8, 16.0], [93.9, 16.0], [94.0, 17.0], [94.1, 17.0], [94.2, 17.0], [94.3, 17.0], [94.4, 18.0], [94.5, 18.0], [94.6, 18.0], [94.7, 19.0], [94.8, 19.0], [94.9, 19.0], [95.0, 19.0], [95.1, 20.0], [95.2, 20.0], [95.3, 20.0], [95.4, 21.0], [95.5, 21.0], [95.6, 22.0], [95.7, 22.0], [95.8, 22.0], [95.9, 23.0], [96.0, 23.0], [96.1, 24.0], [96.2, 24.0], [96.3, 25.0], [96.4, 26.0], [96.5, 26.0], [96.6, 27.0], [96.7, 28.0], [96.8, 28.0], [96.9, 29.0], [97.0, 30.0], [97.1, 31.0], [97.2, 32.0], [97.3, 33.0], [97.4, 34.0], [97.5, 36.0], [97.6, 37.0], [97.7, 39.0], [97.8, 41.0], [97.9, 43.0], [98.0, 45.0], [98.1, 48.0], [98.2, 51.0], [98.3, 55.0], [98.4, 60.0], [98.5, 67.0], [98.6, 76.0], [98.7, 89.0], [98.8, 111.0], [98.9, 139.0], [99.0, 179.0], [99.1, 225.0], [99.2, 289.0], [99.3, 337.0], [99.4, 382.0], [99.5, 410.0], [99.6, 439.0], [99.7, 477.0], [99.8, 546.0], [99.9, 641.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2468797.0, "series": [{"data": [[0.0, 2468797.0], [600.0, 1813.0], [700.0, 836.0], [200.0, 4284.0], [800.0, 347.0], [900.0, 137.0], [1000.0, 67.0], [1100.0, 34.0], [300.0, 6372.0], [1200.0, 18.0], [1300.0, 14.0], [1400.0, 11.0], [1500.0, 7.0], [400.0, 6628.0], [100.0, 7194.0], [1600.0, 6.0], [1700.0, 14.0], [1800.0, 11.0], [1900.0, 7.0], [500.0, 3401.0], [2000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 47.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2493304.0, "series": [{"data": [[0.0, 2493304.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6649.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 47.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.190790389487506, "minX": 1.70786748E12, "maxY": 217.82135073188897, "series": [{"data": [[1.70786838E12, 11.976711479627488], [1.70786772E12, 13.849818656994996], [1.70786832E12, 18.004479641628247], [1.70786802E12, 16.62353600298819], [1.70786748E12, 217.82135073188897], [1.70786844E12, 4.190790389487506], [1.70786814E12, 15.731310841445213], [1.70786808E12, 20.886743663736624], [1.70786778E12, 14.378417669182777], [1.7078682E12, 12.939796611976654], [1.7078679E12, 18.37053398641359], [1.70786784E12, 14.460684415714045], [1.70786754E12, 15.272163587510647], [1.70786796E12, 15.506887823075], [1.70786766E12, 10.945536339098414], [1.70786826E12, 15.28214600058652], [1.7078676E12, 11.947027993011565]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70786844E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.1432855174649443, "minX": 1.0, "maxY": 1134.75, "series": [{"data": [[2.0, 1.1432855174649443], [3.0, 1.2397687253613752], [4.0, 1.62882944743152], [5.0, 1.9734144790120731], [6.0, 2.284475697242732], [7.0, 2.6612315290243274], [8.0, 3.0268222137686127], [9.0, 3.416624150359662], [10.0, 3.768212336730544], [11.0, 4.171178132164563], [12.0, 4.5684302977074145], [13.0, 4.970098686496652], [14.0, 5.38251228667618], [15.0, 5.656631153180576], [16.0, 5.973630467470085], [17.0, 6.402454536888793], [18.0, 6.83718151832324], [19.0, 7.014602769890484], [20.0, 7.4108181906836466], [21.0, 7.771299179167896], [22.0, 8.140310731061067], [23.0, 8.608260657842342], [24.0, 8.675602592195427], [25.0, 9.018196441138013], [26.0, 9.231677610675767], [27.0, 9.610486454995604], [28.0, 9.959045410156286], [29.0, 10.702729044834264], [30.0, 10.785550129273126], [31.0, 11.298017720378418], [33.0, 11.709257274750646], [32.0, 11.210580912863044], [35.0, 12.211592115921219], [34.0, 12.221442973612671], [37.0, 12.876475587874188], [36.0, 12.527123186396803], [39.0, 13.50344316135181], [38.0, 13.486821043645326], [41.0, 13.76568265682653], [40.0, 13.795377739016674], [43.0, 14.179544191217353], [42.0, 14.327584371340338], [45.0, 14.81640294721589], [44.0, 14.438089622641472], [47.0, 15.192444385941792], [46.0, 15.210410176531648], [49.0, 16.7518076076705], [48.0, 15.946498819826866], [51.0, 16.513623551518993], [50.0, 16.71559206447614], [53.0, 16.561279203370365], [52.0, 16.508868166026716], [55.0, 18.01029866117416], [54.0, 18.29167446211412], [57.0, 19.005724240915892], [56.0, 18.120614537950047], [59.0, 19.226580135440198], [58.0, 19.5227209367159], [61.0, 19.717159402621178], [60.0, 19.933239038189587], [63.0, 21.272201569599336], [62.0, 20.37444113263785], [67.0, 23.045195261079424], [66.0, 23.830845771144308], [65.0, 22.010407239819017], [64.0, 21.960035922766043], [71.0, 23.668023255814003], [70.0, 24.313946216385254], [69.0, 22.776848874598052], [68.0, 20.973907766990283], [75.0, 24.34825870646766], [74.0, 24.771582733812945], [73.0, 23.871983914209157], [72.0, 22.54901960784313], [79.0, 28.410534469403554], [78.0, 26.104587155963287], [77.0, 26.000000000000004], [76.0, 31.18883248730964], [83.0, 26.79073482428117], [82.0, 29.067796610169502], [81.0, 27.1354292623942], [80.0, 28.930769230769226], [87.0, 38.105577689243034], [86.0, 35.843750000000014], [85.0, 27.820603907637626], [84.0, 26.433453237410077], [91.0, 26.736745886654475], [89.0, 33.139534883720934], [88.0, 31.264909847434094], [90.0, 30.78966789667895], [95.0, 29.52077562326871], [94.0, 34.033936651583716], [93.0, 30.212730318257968], [92.0, 30.541747572815535], [99.0, 27.688405797101435], [98.0, 30.384839650145782], [97.0, 30.124999999999996], [96.0, 33.74349442379183], [103.0, 29.50211864406781], [102.0, 29.586580086580113], [101.0, 31.186147186147195], [100.0, 29.757653061224495], [107.0, 38.6145251396648], [106.0, 31.52100840336134], [105.0, 34.82467532467533], [104.0, 30.603174603174615], [111.0, 46.73825503355705], [110.0, 40.36809815950919], [109.0, 39.753424657534254], [108.0, 32.85625], [114.0, 40.74857142857141], [113.0, 49.00409836065571], [112.0, 47.62886597938145], [115.0, 44.45901639344262], [119.0, 37.91129032258063], [118.0, 42.87387387387388], [117.0, 34.83333333333333], [116.0, 29.057692307692303], [123.0, 47.10927152317878], [122.0, 42.24193548387097], [120.0, 57.158730158730144], [121.0, 49.66666666666671], [127.0, 32.982905982905976], [126.0, 27.25949367088608], [125.0, 34.167300380228184], [124.0, 45.95923913043479], [135.0, 35.85106382978723], [134.0, 34.24324324324325], [133.0, 35.860465116279066], [132.0, 28.999999999999996], [130.0, 32.025], [129.0, 34.08571428571429], [128.0, 34.38461538461539], [131.0, 47.62857142857143], [143.0, 37.582278481012665], [142.0, 28.512500000000003], [141.0, 34.652777777777764], [140.0, 35.388888888888886], [139.0, 40.69565217391305], [138.0, 35.23728813559322], [137.0, 32.92063492063492], [136.0, 38.650000000000006], [148.0, 47.67032967032968], [149.0, 48.58904109589041], [150.0, 54.08433734939757], [151.0, 83.83673469387757], [147.0, 40.49999999999999], [145.0, 40.92105263157893], [146.0, 48.65624999999999], [144.0, 38.04054054054054], [154.0, 76.80851063829786], [155.0, 55.26923076923077], [156.0, 43.0520231213873], [157.0, 49.358490566037716], [153.0, 40.58823529411765], [152.0, 70.37142857142857], [158.0, 69.79999999999998], [159.0, 123.00000000000001], [160.0, 168.3888888888889], [161.0, 154.22222222222223], [163.0, 44.578947368421055], [164.0, 40.857142857142854], [166.0, 58.27777777777778], [167.0, 96.75757575757576], [165.0, 26.799999999999997], [162.0, 46.1764705882353], [168.0, 60.6], [169.0, 40.07142857142856], [170.0, 134.04999999999998], [171.0, 123.6], [172.0, 60.25], [175.0, 28.375000000000004], [174.0, 27.0], [173.0, 30.749999999999996], [180.0, 81.5], [181.0, 101.0], [182.0, 67.72222222222223], [183.0, 29.0], [179.0, 13.0], [177.0, 20.6], [176.0, 19.25], [184.0, 51.1851851851852], [185.0, 55.857142857142854], [186.0, 62.5], [187.0, 62.38709677419355], [188.0, 76.00000000000001], [189.0, 25.166666666666668], [190.0, 90.0], [191.0, 13.217391304347824], [192.0, 121.0], [194.0, 26.4], [195.0, 277.375], [199.0, 218.30769230769235], [198.0, 126.0], [197.0, 81.4375], [196.0, 102.14285714285715], [193.0, 8.5], [200.0, 150.9], [202.0, 106.30769230769229], [203.0, 133.72], [204.0, 108.04347826086958], [205.0, 129.17647058823533], [206.0, 110.125], [207.0, 251.9090909090909], [201.0, 115.89473684210527], [208.0, 80.6923076923077], [210.0, 72.00000000000001], [211.0, 104.75], [212.0, 123.78571428571429], [213.0, 100.25], [214.0, 89.71428571428572], [215.0, 130.4242424242424], [209.0, 51.05263157894737], [219.0, 68.97499999999998], [220.0, 86.03999999999999], [221.0, 91.14285714285714], [222.0, 53.45454545454545], [218.0, 56.82456140350877], [216.0, 46.333333333333336], [223.0, 7.0], [217.0, 49.4], [225.0, 74.8], [226.0, 101.0], [227.0, 54.06666666666666], [230.0, 56.46153846153846], [231.0, 106.0], [229.0, 14.0], [228.0, 48.6], [224.0, 38.5], [232.0, 69.6], [233.0, 44.77777777777778], [234.0, 78.80000000000001], [235.0, 75.25], [236.0, 64.66666666666666], [237.0, 53.22727272727272], [238.0, 42.74074074074074], [239.0, 50.42857142857143], [242.0, 80.25], [246.0, 62.75757575757575], [247.0, 56.00000000000001], [245.0, 59.095238095238095], [244.0, 40.22222222222222], [243.0, 32.2], [240.0, 50.42857142857144], [248.0, 75.57142857142858], [251.0, 72.57142857142858], [252.0, 53.8], [255.0, 88.27777777777777], [254.0, 16.0], [253.0, 58.0], [250.0, 14.666666666666666], [249.0, 58.75], [257.0, 62.0], [256.0, 65.52941176470588], [259.0, 75.66666666666667], [258.0, 60.25], [268.0, 75.06666666666666], [269.0, 65.0], [270.0, 133.0], [271.0, 62.5], [260.0, 98.49999999999999], [261.0, 28.5], [262.0, 89.57894736842105], [263.0, 77.82142857142857], [264.0, 63.949999999999996], [265.0, 61.625], [266.0, 64.53846153846153], [267.0, 70.18918918918921], [273.0, 108.05882352941178], [272.0, 94.0], [275.0, 114.5], [274.0, 71.89473684210527], [284.0, 90.90000000000002], [285.0, 83.60000000000001], [286.0, 53.583333333333336], [287.0, 88.02702702702703], [276.0, 61.300000000000004], [277.0, 101.93333333333334], [279.0, 84.0], [278.0, 68.0], [280.0, 92.61111111111111], [281.0, 106.15384615384613], [282.0, 84.44444444444444], [283.0, 77.2], [289.0, 62.57142857142857], [288.0, 67.0], [290.0, 96.375], [291.0, 110.0], [292.0, 80.4], [293.0, 91.6842105263158], [294.0, 72.03703703703704], [295.0, 116.54545454545453], [297.0, 68.4074074074074], [296.0, 90.5], [303.0, 67.84615384615384], [302.0, 63.105263157894726], [300.0, 127.69999999999999], [301.0, 208.83333333333334], [298.0, 81.90000000000002], [299.0, 70.81249999999999], [305.0, 51.2], [304.0, 113.2068965517241], [306.0, 88.76923076923077], [307.0, 100.9], [308.0, 84.0], [309.0, 119.8], [310.0, 113.0], [311.0, 113.13333333333333], [312.0, 93.76923076923075], [319.0, 142.73529411764702], [316.0, 227.99999999999997], [317.0, 75.6], [318.0, 111.71428571428571], [313.0, 98.75], [314.0, 77.3125], [315.0, 74.33333333333333], [322.0, 106.06666666666668], [321.0, 157.2], [320.0, 118.0], [323.0, 161.85714285714286], [332.0, 77.72727272727273], [333.0, 126.0], [334.0, 98.83333333333331], [335.0, 100.83333333333333], [324.0, 99.33333333333334], [325.0, 101.74074074074073], [326.0, 67.15384615384615], [327.0, 258.7142857142857], [328.0, 91.40000000000002], [329.0, 138.75], [330.0, 112.8], [331.0, 99.14285714285714], [338.0, 106.0], [337.0, 120.63636363636363], [336.0, 103.33333333333333], [339.0, 113.90909090909092], [348.0, 115.4], [349.0, 109.45161290322581], [350.0, 87.375], [351.0, 96.6923076923077], [344.0, 66.73684210526316], [340.0, 111.125], [341.0, 154.40000000000003], [342.0, 124.54166666666669], [343.0, 100.125], [345.0, 102.72727272727273], [346.0, 97.22222222222223], [347.0, 135.29166666666666], [353.0, 94.53846153846153], [352.0, 148.33333333333334], [354.0, 108.5], [355.0, 103.0], [356.0, 93.375], [357.0, 119.64705882352942], [358.0, 98.53846153846153], [359.0, 84.91999999999999], [360.0, 105.77777777777776], [366.0, 104.05263157894736], [367.0, 94.45833333333331], [364.0, 296.0], [365.0, 152.75], [361.0, 142.0], [363.0, 81.72972972972974], [362.0, 84.94736842105262], [369.0, 128.51612903225802], [368.0, 128.29411764705878], [370.0, 98.41666666666667], [371.0, 71.6], [372.0, 81.00000000000001], [373.0, 151.375], [374.0, 112.63636363636364], [375.0, 203.875], [376.0, 134.93939393939397], [383.0, 87.7391304347826], [381.0, 102.66666666666667], [380.0, 76.75000000000001], [382.0, 120.25806451612904], [377.0, 48.6], [378.0, 145.60000000000002], [379.0, 105.07142857142857], [385.0, 130.50000000000003], [384.0, 168.625], [386.0, 134.27272727272725], [387.0, 67.92307692307693], [396.0, 574.0], [397.0, 125.0], [399.0, 114.71428571428572], [398.0, 79.0], [388.0, 112.49999999999997], [389.0, 375.23076923076917], [391.0, 112.3103448275862], [390.0, 85.32000000000001], [392.0, 98.92307692307693], [393.0, 431.2], [395.0, 101.78571428571428], [394.0, 183.33333333333331], [401.0, 296.5], [400.0, 224.5], [402.0, 143.43750000000003], [403.0, 148.61290322580646], [404.0, 182.18181818181816], [405.0, 126.125], [406.0, 376.33333333333337], [407.0, 283.79999999999995], [408.0, 140.16], [414.0, 266.66666666666663], [415.0, 294.0], [412.0, 210.92857142857142], [413.0, 127.45454545454547], [409.0, 97.5], [410.0, 255.0], [411.0, 242.44444444444443], [417.0, 231.22222222222223], [416.0, 176.5], [419.0, 237.4736842105263], [418.0, 30.0], [428.0, 199.88888888888889], [429.0, 240.05882352941174], [430.0, 120.74074074074075], [431.0, 213.42857142857142], [420.0, 137.22580645161293], [421.0, 122.45833333333331], [422.0, 474.20000000000005], [423.0, 153.25], [424.0, 323.22222222222223], [425.0, 231.375], [426.0, 224.87500000000003], [427.0, 290.63636363636357], [433.0, 235.33333333333334], [432.0, 85.88888888888887], [434.0, 241.95454545454544], [435.0, 81.75], [444.0, 146.33333333333337], [445.0, 113.54285714285712], [446.0, 139.75862068965515], [447.0, 246.6], [436.0, 146.2380952380952], [437.0, 168.99999999999997], [438.0, 252.91666666666666], [439.0, 192.0], [440.0, 123.4], [441.0, 101.77777777777777], [442.0, 138.47368421052633], [443.0, 146.7222222222222], [450.0, 251.3461538461538], [449.0, 160.33333333333334], [448.0, 202.0], [451.0, 130.85714285714286], [460.0, 197.93333333333337], [461.0, 302.2], [462.0, 195.1176470588236], [463.0, 206.3888888888889], [452.0, 302.0], [453.0, 520.0], [454.0, 142.66666666666663], [455.0, 152.33333333333337], [456.0, 177.35], [457.0, 197.2758620689655], [458.0, 188.8139534883721], [459.0, 145.1666666666667], [465.0, 239.7], [464.0, 257.99999999999994], [466.0, 244.27272727272725], [467.0, 116.10000000000001], [476.0, 201.29166666666663], [478.0, 88.00000000000001], [477.0, 105.375], [479.0, 220.38095238095244], [469.0, 407.0], [468.0, 121.83333333333334], [470.0, 184.2], [471.0, 195.0769230769231], [472.0, 138.8181818181818], [473.0, 151.2], [474.0, 143.13793103448282], [475.0, 139.4931506849315], [481.0, 170.89361702127664], [480.0, 465.8333333333333], [482.0, 148.71999999999994], [483.0, 106.82978723404258], [484.0, 100.27777777777777], [485.0, 194.27272727272722], [487.0, 301.5714285714285], [486.0, 104.125], [488.0, 247.0], [490.0, 247.38461538461536], [489.0, 93.0], [491.0, 109.39999999999999], [492.0, 506.25], [493.0, 256.5454545454545], [495.0, 910.6666666666667], [494.0, 206.0], [508.0, 208.65], [497.0, 541.6666666666666], [498.0, 480.33333333333337], [499.0, 68.5], [500.0, 1072.0], [501.0, 109.25], [503.0, 186.76470588235304], [496.0, 148.0], [502.0, 124.25], [509.0, 1134.75], [511.0, 535.75], [505.0, 120.0], [504.0, 144.66666666666666], [510.0, 75.0], [507.0, 223.0], [506.0, 98.5], [540.0, 98.6], [517.0, 234.64999999999998], [514.0, 257.2727272727273], [512.0, 571.75], [513.0, 158.66666666666666], [527.0, 99.16666666666669], [526.0, 99.86363636363635], [515.0, 481.71428571428567], [516.0, 78.14285714285714], [519.0, 521.3333333333334], [518.0, 104.50000000000001], [537.0, 107.5], [536.0, 107.76923076923076], [539.0, 136.0], [538.0, 183.0], [541.0, 104.0], [522.0, 220.45454545454547], [521.0, 92.59090909090911], [520.0, 65.0], [523.0, 92.8125], [524.0, 141.4], [525.0, 424.5], [543.0, 137.0], [529.0, 113.6842105263158], [528.0, 103.6875], [531.0, 169.66666666666666], [530.0, 122.0], [533.0, 138.0], [532.0, 86.91666666666667], [535.0, 105.99999999999999], [534.0, 168.11111111111114], [542.0, 159.5], [559.0, 142.83333333333334], [555.0, 559.25], [552.0, 475.0], [553.0, 528.0], [554.0, 507.2857142857142], [556.0, 389.2142857142858], [557.0, 371.0], [558.0, 581.8333333333331], [560.0, 176.28571428571428], [562.0, 135.66666666666666], [561.0, 79.33333333333334], [574.0, 165.46666666666667], [575.0, 429.5], [572.0, 612.1], [573.0, 353.00000000000006], [570.0, 240.12500000000003], [571.0, 270.75], [568.0, 333.7142857142857], [551.0, 36.0], [550.0, 183.0], [549.0, 94.5], [547.0, 111.5], [546.0, 62.83333333333333], [545.0, 183.0], [544.0, 39.0], [569.0, 231.5], [563.0, 418.6666666666667], [564.0, 242.06666666666663], [565.0, 98.8], [566.0, 363.75], [567.0, 286.8], [583.0, 300.42857142857144], [579.0, 413.2], [576.0, 243.66666666666663], [591.0, 591.1428571428572], [589.0, 762.25], [588.0, 266.0], [587.0, 148.0], [590.0, 628.8000000000001], [577.0, 382.375], [578.0, 426.4666666666666], [580.0, 454.2], [581.0, 560.090909090909], [582.0, 376.25], [593.0, 318.8409090909092], [607.0, 598.0714285714286], [592.0, 650.4999999999999], [605.0, 343.02127659574484], [606.0, 326.08], [603.0, 228.27272727272728], [604.0, 284.1219512195122], [601.0, 196.94318181818184], [600.0, 165.50000000000003], [602.0, 179.41176470588235], [594.0, 344.23809523809524], [597.0, 243.6153846153845], [596.0, 146.8], [595.0, 162.36363636363637], [599.0, 321.6315789473684], [598.0, 140.61904761904762], [585.0, 708.9230769230769], [584.0, 187.45454545454544], [586.0, 570.2], [609.0, 262.2222222222222], [619.0, 515.1666666666667], [608.0, 992.4], [622.0, 216.80000000000004], [623.0, 602.8], [620.0, 239.42857142857144], [621.0, 615.3333333333334], [610.0, 348.77777777777777], [611.0, 306.65217391304344], [613.0, 400.6999999999999], [612.0, 148.55555555555557], [615.0, 117.1], [614.0, 134.2], [632.0, 340.9], [633.0, 267.2307692307693], [634.0, 297.88235294117646], [635.0, 209.57499999999993], [636.0, 266.21739130434776], [637.0, 404.3809523809524], [638.0, 248.5531914893617], [639.0, 271.7619047619047], [624.0, 348.15384615384613], [625.0, 368.8], [626.0, 230.09523809523813], [627.0, 340.3333333333333], [628.0, 460.41176470588243], [629.0, 269.4000000000001], [630.0, 223.2820512820513], [631.0, 173.375], [616.0, 181.75862068965517], [617.0, 246.33333333333331], [618.0, 389.375], [643.0, 292.0], [640.0, 437.0714285714285], [654.0, 203.75], [655.0, 381.46666666666675], [652.0, 374.92307692307685], [653.0, 206.88888888888889], [650.0, 505.7142857142857], [651.0, 231.88888888888889], [641.0, 585.9565217391305], [642.0, 326.8518518518519], [644.0, 378.6521739130435], [645.0, 308.0], [646.0, 291.25], [647.0, 702.1111111111111], [656.0, 278.54166666666663], [670.0, 492.36842105263145], [671.0, 268.60869565217394], [668.0, 304.0357142857143], [669.0, 453.74999999999994], [666.0, 265.77142857142854], [667.0, 467.06250000000006], [664.0, 264.5185185185186], [665.0, 209.78571428571428], [657.0, 268.4666666666667], [659.0, 306.25], [658.0, 206.5], [660.0, 269.75], [661.0, 329.99999999999994], [663.0, 226.69230769230768], [662.0, 274.0], [648.0, 626.75], [649.0, 209.0], [677.0, 333.7692307692308], [673.0, 229.10000000000002], [672.0, 211.81818181818184], [686.0, 364.0], [687.0, 281.9285714285714], [684.0, 323.2051282051282], [685.0, 260.25], [682.0, 273.88235294117646], [683.0, 290.3076923076923], [674.0, 462.79999999999995], [675.0, 356.1034482758621], [676.0, 281.4090909090908], [678.0, 429.14285714285717], [679.0, 181.0], [696.0, 464.23076923076917], [698.0, 285.8260869565217], [697.0, 219.51851851851845], [699.0, 233.28571428571428], [700.0, 350.5714285714286], [701.0, 256.23076923076917], [702.0, 239.20000000000002], [703.0, 231.1], [688.0, 260.1304347826087], [689.0, 190.1904761904762], [690.0, 206.71428571428572], [691.0, 373.9166666666667], [692.0, 304.42857142857144], [693.0, 528.9], [694.0, 302.5], [695.0, 288.3999999999999], [680.0, 323.53846153846155], [681.0, 265.5000000000001], [707.0, 247.92307692307696], [704.0, 217.5357142857143], [718.0, 188.28571428571428], [719.0, 269.0], [716.0, 222.64814814814815], [717.0, 247.78048780487808], [714.0, 319.6818181818182], [715.0, 279.15384615384613], [705.0, 217.79310344827582], [706.0, 279.56790123456796], [708.0, 245.58333333333337], [709.0, 202.97435897435895], [710.0, 328.2307692307693], [711.0, 287.30000000000007], [721.0, 236.6470588235294], [734.0, 246.33333333333334], [735.0, 419.41176470588243], [732.0, 214.43478260869568], [733.0, 239.87500000000003], [730.0, 229.28571428571425], [731.0, 232.5], [728.0, 256.83333333333337], [729.0, 468.3333333333333], [722.0, 239.5238095238095], [723.0, 178.42857142857142], [724.0, 229.83333333333331], [725.0, 205.75], [726.0, 318.1111111111111], [712.0, 310.87500000000006], [713.0, 408.6538461538462], [739.0, 187.6315789473684], [736.0, 580.5625], [751.0, 301.0238095238095], [750.0, 182.66666666666666], [748.0, 371.87499999999994], [749.0, 306.5], [746.0, 292.04761904761915], [747.0, 297.7586206896553], [737.0, 440.625], [738.0, 594.0], [740.0, 187.62857142857146], [741.0, 230.09677419354844], [742.0, 213.1176470588235], [743.0, 304.93181818181813], [753.0, 313.4117647058824], [752.0, 167.04761904761904], [766.0, 257.2641509433962], [767.0, 284.76315789473693], [764.0, 402.9090909090909], [765.0, 223.24657534246572], [762.0, 315.55555555555554], [763.0, 258.5], [760.0, 333.69565217391306], [761.0, 501.3333333333333], [754.0, 162.59090909090912], [755.0, 363.7500000000001], [756.0, 352.4], [757.0, 155.99999999999997], [758.0, 291.3076923076924], [759.0, 302.5], [744.0, 384.8], [745.0, 459.0666666666667], [775.0, 227.25], [769.0, 276.90909090909093], [768.0, 411.2857142857143], [782.0, 242.87500000000006], [781.0, 172.77777777777777], [780.0, 168.89999999999998], [783.0, 203.55], [770.0, 421.31578947368416], [771.0, 110.75], [772.0, 221.90243902439013], [773.0, 174.97058823529412], [774.0, 173.81818181818184], [784.0, 192.66666666666666], [798.0, 293.17307692307685], [799.0, 329.37500000000006], [796.0, 596.25], [797.0, 323.38888888888886], [794.0, 411.5], [795.0, 223.52631578947367], [792.0, 371.1739130434783], [793.0, 368.0769230769231], [785.0, 281.32692307692315], [786.0, 227.5], [787.0, 160.65217391304344], [788.0, 162.18518518518516], [789.0, 254.0333333333333], [790.0, 218.72839506172838], [791.0, 215.30434782608697], [776.0, 212.33333333333331], [777.0, 200.92592592592595], [778.0, 219.4848484848485], [779.0, 366.4615384615384], [806.0, 266.2941176470588], [801.0, 257.64705882352933], [800.0, 425.54999999999995], [815.0, 291.1875], [813.0, 455.4], [814.0, 176.0], [811.0, 317.99999999999994], [812.0, 308.0769230769231], [802.0, 228.49999999999994], [803.0, 391.6363636363636], [804.0, 334.13636363636357], [805.0, 225.7142857142857], [807.0, 381.0], [824.0, 365.07692307692304], [825.0, 362.8275862068966], [826.0, 371.16666666666663], [828.0, 392.51282051282067], [827.0, 278.2], [829.0, 321.0], [830.0, 350.96], [831.0, 424.16666666666663], [817.0, 183.66666666666666], [816.0, 195.9], [819.0, 407.4081632653061], [820.0, 318.5789473684211], [821.0, 357.2307692307692], [823.0, 368.8888888888889], [822.0, 353.0], [818.0, 278.34883720930225], [809.0, 278.4166666666667], [808.0, 177.0], [810.0, 348.3846153846154], [835.0, 385.9166666666667], [832.0, 432.3333333333333], [847.0, 407.1000000000001], [845.0, 267.50000000000006], [846.0, 284.3571428571429], [843.0, 269.53333333333325], [844.0, 286.50000000000006], [833.0, 488.7391304347826], [834.0, 339.94444444444446], [836.0, 328.54838709677415], [837.0, 312.3333333333333], [838.0, 374.09090909090907], [839.0, 419.95652173913044], [848.0, 293.0624999999999], [862.0, 313.860465116279], [863.0, 453.4324324324324], [860.0, 342.8518518518518], [861.0, 331.30681818181813], [858.0, 287.20000000000005], [859.0, 319.50000000000006], [856.0, 496.5384615384615], [857.0, 285.54545454545456], [849.0, 293.4666666666667], [850.0, 482.1], [851.0, 249.0], [852.0, 278.4444444444445], [853.0, 303.57142857142867], [854.0, 338.42857142857144], [855.0, 333.54545454545456], [840.0, 344.84615384615387], [841.0, 245.42857142857142], [842.0, 293.741935483871], [870.0, 352.58333333333337], [865.0, 349.875], [864.0, 334.84], [878.0, 379.4615384615384], [879.0, 320.258064516129], [876.0, 521.6315789473684], [877.0, 390.4375], [874.0, 323.84615384615387], [875.0, 409.0], [866.0, 441.3478260869566], [867.0, 366.03333333333325], [869.0, 334.5], [868.0, 267.0], [871.0, 262.2448979591837], [888.0, 350.2857142857143], [889.0, 373.92857142857144], [890.0, 385.7200000000001], [891.0, 258.68421052631584], [892.0, 244.58], [893.0, 245.3095238095238], [894.0, 271.0000000000001], [895.0, 334.56000000000006], [880.0, 366.3333333333333], [881.0, 320.9545454545455], [882.0, 350.15], [883.0, 334.5714285714285], [884.0, 323.8055555555556], [885.0, 359.75], [886.0, 434.4], [887.0, 403.9545454545455], [872.0, 480.225], [873.0, 327.94999999999993], [899.0, 262.1818181818182], [896.0, 219.29411764705884], [910.0, 343.43749999999994], [911.0, 325.95454545454544], [908.0, 284.76000000000005], [909.0, 378.9090909090909], [906.0, 287.2750000000001], [907.0, 247.3928571428571], [897.0, 253.0], [898.0, 247.03448275862075], [900.0, 326.1388888888889], [901.0, 303.4761904761905], [902.0, 302.8695652173913], [903.0, 381.61290322580646], [912.0, 346.83333333333326], [926.0, 240.72972972972974], [927.0, 259.8], [924.0, 315.60784313725486], [925.0, 269.40625], [922.0, 358.3035714285715], [923.0, 330.48979591836735], [920.0, 258.3], [921.0, 296.2380952380952], [913.0, 283.1578947368421], [914.0, 341.3461538461539], [915.0, 347.1333333333334], [916.0, 235.8620689655172], [917.0, 349.33333333333337], [918.0, 334.66666666666663], [919.0, 348.6666666666667], [904.0, 347.36585365853654], [905.0, 334.93750000000006], [931.0, 355.64285714285717], [928.0, 317.77777777777777], [942.0, 248.2758620689655], [943.0, 305.85714285714283], [940.0, 333.0], [941.0, 269.5], [938.0, 365.7796610169491], [939.0, 284.3548387096775], [929.0, 241.25], [930.0, 236.35999999999993], [932.0, 289.25], [934.0, 231.2790697674419], [933.0, 254.25000000000009], [935.0, 269.6756756756757], [944.0, 351.32], [958.0, 335.6666666666667], [957.0, 249.94117647058826], [956.0, 249.14285714285717], [955.0, 187.0], [954.0, 188.0], [959.0, 381.125], [952.0, 411.38461538461536], [953.0, 493.5999999999999], [945.0, 382.5263157894737], [946.0, 351.4166666666667], [947.0, 308.0], [948.0, 371.0], [949.0, 274.1707317073172], [950.0, 295.70454545454544], [951.0, 285.9166666666667], [936.0, 272.1034482758621], [937.0, 366.06], [965.0, 268.375], [961.0, 379.99999999999994], [960.0, 344.7894736842105], [974.0, 325.16], [975.0, 341.42857142857144], [972.0, 402.15625000000006], [973.0, 301.0], [962.0, 265.34482758620686], [963.0, 244.23076923076923], [964.0, 381.57894736842104], [976.0, 345.18181818181824], [990.0, 337.86301369863], [991.0, 404.4047619047618], [988.0, 385.53846153846166], [989.0, 315.034188034188], [986.0, 458.7586206896551], [987.0, 444.49999999999994], [984.0, 442.5], [967.0, 229.54999999999998], [966.0, 207.33333333333334], [985.0, 409.27272727272725], [977.0, 435.64705882352933], [978.0, 299.4583333333333], [979.0, 446.77272727272714], [980.0, 420.74999999999994], [981.0, 269.2], [982.0, 342.00000000000006], [983.0, 387.13636363636357], [968.0, 426.18421052631584], [969.0, 396.85365853658527], [970.0, 370.15909090909093], [971.0, 358.7777777777778], [999.0, 295.9354838709678], [995.0, 401.7142857142858], [992.0, 338.688524590164], [1006.0, 405.4358974358975], [1007.0, 364.87931034482756], [1002.0, 299.75], [1004.0, 395.2], [1003.0, 290.33333333333337], [1005.0, 353.1951219512196], [993.0, 398.78260869565213], [994.0, 438.194805194805], [996.0, 346.68518518518516], [998.0, 409.35555555555555], [997.0, 379.48837209302326], [1008.0, 260.48214285714295], [1022.0, 439.0400000000001], [1023.0, 465.2307692307692], [1020.0, 330.00000000000006], [1019.0, 274.55555555555554], [1021.0, 258.68], [1016.0, 346.8611111111111], [1017.0, 273.0], [1018.0, 384.1875], [1009.0, 281.6181818181818], [1010.0, 348.9824561403509], [1011.0, 301.5909090909091], [1012.0, 396.12499999999994], [1013.0, 267.7758620689656], [1015.0, 297.093023255814], [1014.0, 289.9166666666665], [1000.0, 450.68181818181824], [1001.0, 461.80487804878055], [1026.0, 261.07142857142856], [1024.0, 397.2777777777777], [1054.0, 392.68421052631584], [1052.0, 271.3111111111112], [1050.0, 288.72413793103453], [1048.0, 393.108695652174], [1046.0, 458.3461538461538], [1044.0, 366.5777777777778], [1042.0, 410.7741935483871], [1040.0, 369.00000000000006], [1028.0, 336.1818181818182], [1030.0, 367.1525423728814], [1032.0, 426.9384615384615], [1034.0, 417.1555555555555], [1036.0, 360.35714285714283], [1038.0, 408.2999999999999], [1058.0, 297.95652173913044], [1056.0, 276.6], [1086.0, 303.2962962962963], [1084.0, 322.49999999999994], [1076.0, 319.81081081081084], [1080.0, 287.6292134831461], [1078.0, 366.72222222222223], [1082.0, 329.74999999999994], [1072.0, 416.4848484848484], [1074.0, 483.75], [1060.0, 393.2682926829269], [1062.0, 333.15], [1064.0, 406.9347826086956], [1066.0, 403.84000000000015], [1068.0, 400.51898734177223], [1070.0, 371.5744680851063], [1096.0, 379.48571428571427], [1104.0, 465.55999999999995], [1102.0, 560.0], [1136.0, 480.86885245901635], [1138.0, 488.12765957446794], [1140.0, 519.1605839416059], [1142.0, 509.946524064171], [1144.0, 491.0072463768114], [1146.0, 467.8285714285714], [1148.0, 521.0675675675674], [1150.0, 486.1000000000001], [1120.0, 467.0999999999999], [1122.0, 455.8181818181818], [1124.0, 433.09230769230766], [1126.0, 490.7272727272727], [1128.0, 436.49999999999994], [1130.0, 472.6470588235293], [1132.0, 412.04999999999995], [1134.0, 430.9574468085107], [1106.0, 396.05], [1108.0, 478.5434782608696], [1100.0, 405.15], [1098.0, 325.6363636363636], [1094.0, 444.00000000000006], [1092.0, 435.15999999999997], [1090.0, 329.10638297872345], [1088.0, 256.6428571428571], [1112.0, 402.5121951219512], [1114.0, 366.0232558139535], [1116.0, 447.5625], [1118.0, 433.9999999999999], [1110.0, 363.41666666666663], [1158.0, 477.40952380952393], [1152.0, 438.87234042553195], [1182.0, 407.3106796116506], [1176.0, 495.7500000000001], [1178.0, 388.2692307692307], [1180.0, 407.75], [1172.0, 421.4000000000001], [1174.0, 387.12962962962973], [1154.0, 434.3032786885244], [1156.0, 439.3662420382166], [1162.0, 454.42168674698786], [1160.0, 482.472972972973], [1164.0, 437.74074074074065], [1166.0, 458.6875], [1184.0, 452.24666666666667], [1212.0, 486.4754098360656], [1208.0, 467.6203703703703], [1210.0, 481.32420091324195], [1206.0, 428.737089201878], [1204.0, 447.64055299539183], [1200.0, 454.3703703703706], [1202.0, 448.08673469387736], [1186.0, 459.1666666666669], [1188.0, 490.6223404255317], [1190.0, 475.49264705882325], [1192.0, 449.8470948012233], [1194.0, 454.1604095563139], [1196.0, 452.4277108433735], [1198.0, 448.4078674948238], [1168.0, 342.25000000000006], [1170.0, 441.64285714285705], [1027.0, 322.69230769230774], [1051.0, 387.50000000000006], [1055.0, 346.5833333333333], [1053.0, 331.88235294117646], [1049.0, 286.04], [1047.0, 395.10526315789474], [1045.0, 305.7755102040815], [1043.0, 415.55000000000007], [1041.0, 374.4473684210527], [1025.0, 271.5263157894737], [1031.0, 331.7391304347827], [1029.0, 241.44444444444443], [1035.0, 332.6923076923077], [1037.0, 331.21428571428567], [1039.0, 338.22222222222223], [1057.0, 364.1333333333333], [1087.0, 348.22222222222223], [1085.0, 472.75000000000017], [1081.0, 324.75], [1079.0, 293.85], [1077.0, 334.15625], [1083.0, 367.375], [1073.0, 303.5357142857143], [1075.0, 287.13043478260863], [1059.0, 282.2820512820513], [1061.0, 333.40625000000006], [1063.0, 351.64285714285717], [1065.0, 426.02298850574715], [1067.0, 458.4177215189874], [1069.0, 438.084745762712], [1071.0, 404.4054054054054], [1033.0, 428.14000000000004], [1097.0, 356.8888888888888], [1103.0, 446.3333333333333], [1137.0, 469.8702290076335], [1139.0, 517.9090909090913], [1141.0, 524.0205761316876], [1143.0, 509.11940298507477], [1145.0, 524.09], [1147.0, 507.4545454545453], [1149.0, 482.81355932203394], [1151.0, 477.72173913043486], [1121.0, 464.11320754716974], [1123.0, 449.6585365853659], [1125.0, 458.7857142857143], [1127.0, 442.33333333333326], [1129.0, 419.6923076923077], [1131.0, 415.87142857142857], [1133.0, 397.31111111111113], [1135.0, 434.84615384615387], [1101.0, 472.8888888888889], [1105.0, 342.2619047619048], [1107.0, 499.77500000000003], [1109.0, 456.128205128205], [1099.0, 333.6923076923077], [1095.0, 353.66666666666674], [1093.0, 284.3333333333333], [1091.0, 291.56249999999994], [1089.0, 389.7499999999999], [1113.0, 418.39130434782606], [1115.0, 462.5882352941177], [1117.0, 409.7341772151899], [1119.0, 450.2307692307692], [1111.0, 450.51724137931035], [1159.0, 525.2830188679246], [1155.0, 428.27184466019423], [1153.0, 421.7142857142857], [1181.0, 393.60130718954235], [1183.0, 410.7254901960784], [1177.0, 484.61111111111103], [1179.0, 404.3770491803278], [1173.0, 424.05555555555566], [1175.0, 379.7692307692307], [1157.0, 431.5974025974026], [1161.0, 500.74468085106366], [1163.0, 500.7037037037037], [1165.0, 493.42857142857156], [1167.0, 462.4444444444445], [1185.0, 494.715277777778], [1213.0, 456.77777777777777], [1209.0, 447.23555555555544], [1211.0, 439.45312500000006], [1205.0, 437.2459016393446], [1207.0, 453.74509803921563], [1201.0, 434.34411764705897], [1203.0, 442.03308823529426], [1187.0, 513.9772727272727], [1189.0, 498.86826347305384], [1191.0, 451.30837004405294], [1193.0, 444.84873949579816], [1195.0, 473.5110410094638], [1197.0, 453.90554414784384], [1199.0, 444.9522727272729], [1169.0, 400.5882352941177], [1171.0, 383.9375], [1.0, 1.1861187845303875]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[26.143644799998356, 9.690354000000523]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1213.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 298127.7, "minX": 1.70786748E12, "maxY": 7.2948312E7, "series": [{"data": [[1.70786838E12, 7.290506393333334E7], [1.70786772E12, 7.288611253333333E7], [1.70786832E12, 7.28958312E7], [1.70786802E12, 7.285695653333333E7], [1.70786748E12, 6.911624173333333E7], [1.70786844E12, 5.23627182E7], [1.70786814E12, 7.288028133333333E7], [1.70786808E12, 7.291381073333333E7], [1.70786778E12, 7.286861893333334E7], [1.7078682E12, 7.291818413333334E7], [1.7078679E12, 7.281905373333333E7], [1.70786784E12, 7.291672633333333E7], [1.70786754E12, 7.288368286666666E7], [1.70786796E12, 7.2948312E7], [1.70786766E12, 7.2911867E7], [1.70786826E12, 7.287639386666666E7], [1.7078676E12, 7.287347826666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70786838E12, 415085.76666666666], [1.70786772E12, 414977.86666666664], [1.70786832E12, 415033.2], [1.70786802E12, 414811.86666666664], [1.70786748E12, 393514.06666666665], [1.70786844E12, 298127.7], [1.70786814E12, 414944.6666666667], [1.70786808E12, 415135.56666666665], [1.70786778E12, 414878.26666666666], [1.7078682E12, 415160.4666666667], [1.7078679E12, 414596.06666666665], [1.70786784E12, 415152.1666666667], [1.70786754E12, 414964.0333333333], [1.70786796E12, 415332.0], [1.70786766E12, 415124.5], [1.70786826E12, 414922.5333333333], [1.7078676E12, 414905.93333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70786844E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.505312879905689, "minX": 1.70786748E12, "maxY": 82.73841697484261, "series": [{"data": [[1.70786838E12, 4.387879838166731], [1.70786772E12, 4.885713904741619], [1.70786832E12, 6.5815801402553955], [1.70786802E12, 6.153336179067808], [1.70786748E12, 82.73841697484261], [1.70786844E12, 1.505312879905689], [1.70786814E12, 5.776696892919088], [1.70786808E12, 7.669747882358428], [1.70786778E12, 5.163474619221621], [1.7078682E12, 4.801516746857822], [1.7078679E12, 6.649498845543013], [1.70786784E12, 5.214474692612755], [1.70786754E12, 5.454166027722431], [1.70786796E12, 5.619504396482777], [1.70786766E12, 3.8830284248059046], [1.70786826E12, 5.595651188221995], [1.7078676E12, 4.1343637891254925]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70786844E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1.425800644041674, "minX": 1.70786748E12, "maxY": 82.42368210132655, "series": [{"data": [[1.70786838E12, 4.163192940125749], [1.70786772E12, 4.650574697317237], [1.70786832E12, 6.270218382529439], [1.70786802E12, 5.87229544059964], [1.70786748E12, 82.42368210132655], [1.70786844E12, 1.425800644041674], [1.70786814E12, 5.490485398053014], [1.70786808E12, 7.333477730608032], [1.70786778E12, 4.915901997919468], [1.7078682E12, 4.544855989017478], [1.7078679E12, 6.331876359656728], [1.70786784E12, 4.952704008530218], [1.70786754E12, 5.261682679165616], [1.70786796E12, 5.346096456168383], [1.70786766E12, 3.6802492585557847], [1.70786826E12, 5.323827114394532], [1.7078676E12, 3.9306042703012385]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70786844E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.02729289048507262, "minX": 1.70786748E12, "maxY": 0.10462240060805138, "series": [{"data": [[1.70786838E12, 0.07512447427531942], [1.70786772E12, 0.07475732039041971], [1.70786832E12, 0.09126603205076841], [1.70786802E12, 0.09863137955873329], [1.70786748E12, 0.04134735717198417], [1.70786844E12, 0.02729289048507262], [1.70786814E12, 0.06378183757834321], [1.70786808E12, 0.07073689261507975], [1.70786778E12, 0.08247752674117614], [1.7078682E12, 0.0949099681456489], [1.7078679E12, 0.10049781787606574], [1.70786784E12, 0.09164639632134876], [1.70786754E12, 0.10462240060805138], [1.70786796E12, 0.08555822009059345], [1.70786766E12, 0.05672298310506906], [1.70786826E12, 0.09686474808630911], [1.7078676E12, 0.07209634183748383]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70786844E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70786748E12, "maxY": 2034.0, "series": [{"data": [[1.70786838E12, 210.0], [1.70786772E12, 220.0], [1.70786832E12, 207.0], [1.70786802E12, 257.0], [1.70786748E12, 2034.0], [1.70786844E12, 38.0], [1.70786814E12, 211.0], [1.70786808E12, 276.0], [1.70786778E12, 167.0], [1.7078682E12, 141.0], [1.7078679E12, 208.0], [1.70786784E12, 196.0], [1.70786754E12, 331.0], [1.70786796E12, 262.0], [1.70786766E12, 149.0], [1.70786826E12, 173.0], [1.7078676E12, 200.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70786838E12, 0.0], [1.70786772E12, 0.0], [1.70786832E12, 1.0], [1.70786802E12, 1.0], [1.70786748E12, 0.0], [1.70786844E12, 0.0], [1.70786814E12, 0.0], [1.70786808E12, 0.0], [1.70786778E12, 0.0], [1.7078682E12, 1.0], [1.7078679E12, 0.0], [1.70786784E12, 0.0], [1.70786754E12, 0.0], [1.70786796E12, 0.0], [1.70786766E12, 0.0], [1.70786826E12, 1.0], [1.7078676E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70786838E12, 3.0], [1.70786772E12, 7.0], [1.70786832E12, 7.0], [1.70786802E12, 14.0], [1.70786748E12, 16.0], [1.70786844E12, 2.0], [1.70786814E12, 9.0], [1.70786808E12, 13.0], [1.70786778E12, 8.0], [1.7078682E12, 6.0], [1.7078679E12, 10.0], [1.70786784E12, 6.0], [1.70786754E12, 7.0], [1.70786796E12, 7.0], [1.70786766E12, 7.0], [1.70786826E12, 7.0], [1.7078676E12, 7.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70786838E12, 8.0], [1.70786772E12, 25.0], [1.70786832E12, 20.0], [1.70786802E12, 33.0], [1.70786748E12, 55.0], [1.70786844E12, 6.0], [1.70786814E12, 24.0], [1.70786808E12, 31.0], [1.70786778E12, 21.0], [1.7078682E12, 15.0], [1.7078679E12, 30.0], [1.70786784E12, 16.0], [1.70786754E12, 25.0], [1.70786796E12, 16.0], [1.70786766E12, 20.0], [1.70786826E12, 19.0], [1.7078676E12, 22.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70786838E12, 1.0], [1.70786772E12, 3.0], [1.70786832E12, 3.0], [1.70786802E12, 4.0], [1.70786748E12, 3.0], [1.70786844E12, 1.0], [1.70786814E12, 3.0], [1.70786808E12, 4.0], [1.70786778E12, 3.0], [1.7078682E12, 2.0], [1.7078679E12, 3.0], [1.70786784E12, 3.0], [1.70786754E12, 2.0], [1.70786796E12, 3.0], [1.70786766E12, 3.0], [1.70786826E12, 3.0], [1.7078676E12, 2.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70786838E12, 4.0], [1.70786772E12, 10.0], [1.70786832E12, 10.0], [1.70786802E12, 19.0], [1.70786748E12, 25.0], [1.70786844E12, 3.0], [1.70786814E12, 12.0], [1.70786808E12, 18.0], [1.70786778E12, 11.0], [1.7078682E12, 8.0], [1.7078679E12, 14.0], [1.70786784E12, 9.0], [1.70786754E12, 11.0], [1.70786796E12, 9.0], [1.70786766E12, 9.0], [1.70786826E12, 9.0], [1.7078676E12, 10.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70786844E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 10.0, "maxY": 519.0, "series": [{"data": [[10.0, 2.0], [262.0, 1.0], [300.0, 84.5], [1016.0, 509.5], [1074.0, 169.0], [1704.0, 403.0], [1780.0, 5.0], [1973.0, 6.0], [2162.0, 430.0], [2173.0, 477.0], [2126.0, 4.0], [2130.0, 4.0], [2165.0, 3.0], [2088.0, 5.0], [2154.0, 5.0], [2102.0, 4.0], [2157.0, 3.0], [2082.0, 4.0], [2080.0, 5.0], [2125.0, 6.0], [2174.0, 4.0], [2282.0, 3.0], [2234.0, 398.0], [2223.0, 519.0], [2209.0, 16.0], [2216.0, 6.0], [2225.0, 6.0], [2268.0, 7.0], [2271.0, 9.0], [2273.0, 3.0], [2272.0, 4.0], [2178.0, 7.0], [2235.0, 8.0], [2183.0, 23.0], [2279.0, 11.0], [2277.0, 13.0], [2275.0, 11.0], [2281.0, 6.0], [2274.0, 3.0], [2294.0, 3.0], [2291.0, 4.0], [2293.0, 11.0], [2288.0, 13.0], [2289.0, 3.0], [2295.0, 6.0], [2296.0, 21.0], [2299.0, 11.0], [2267.0, 9.0], [2241.0, 4.0], [2263.0, 5.0], [2252.0, 5.0], [2245.0, 4.0], [2242.0, 5.0], [2411.0, 3.0], [2315.0, 6.0], [2353.0, 2.0], [2362.0, 8.0], [2360.0, 5.0], [2358.0, 5.0], [2355.0, 6.0], [2357.0, 2.0], [2343.0, 4.0], [2344.0, 4.0], [2347.0, 7.0], [2345.0, 5.0], [2336.0, 2.0], [2338.0, 8.0], [2428.0, 2.0], [2376.0, 3.0], [2394.0, 2.0], [2382.0, 3.0], [2377.0, 4.0], [2380.0, 2.0], [2379.0, 3.0], [2385.0, 3.0], [2383.0, 5.0], [2384.0, 2.0], [2391.0, 3.0], [2392.0, 3.0], [2388.0, 4.0], [2399.0, 3.0], [2397.0, 3.0], [2395.0, 6.0], [2396.0, 8.0], [2430.0, 3.0], [2429.0, 3.0], [2431.0, 3.0], [2373.0, 3.0], [2375.0, 3.0], [2374.0, 2.0], [2370.0, 3.0], [2371.0, 5.0], [2363.0, 2.0], [2305.0, 4.0], [2366.0, 4.0], [2364.0, 5.0], [2306.0, 5.0], [2326.0, 2.0], [2332.0, 2.0], [2329.0, 4.0], [2330.0, 6.0], [2402.0, 2.0], [2333.0, 5.0], [2334.0, 4.0], [2400.0, 4.0], [2406.0, 3.0], [2407.0, 2.0], [2409.0, 3.0], [2405.0, 2.0], [2318.0, 4.0], [2324.0, 5.0], [2322.0, 14.0], [2414.0, 3.0], [2415.0, 3.0], [2416.0, 3.0], [2417.0, 10.0], [2412.0, 4.0], [2413.0, 3.0], [2426.0, 2.0], [2427.0, 3.0], [2425.0, 3.0], [2424.0, 3.0], [2421.0, 2.0], [2422.0, 4.0], [2423.0, 3.0], [2419.0, 3.0], [2420.0, 3.0], [2418.0, 3.0], [2532.0, 3.0], [2498.0, 2.0], [2512.0, 2.0], [2495.0, 3.0], [2484.0, 2.0], [2482.0, 2.0], [2483.0, 3.0], [2481.0, 2.0], [2479.0, 3.0], [2480.0, 3.0], [2478.0, 2.0], [2476.0, 3.0], [2469.0, 3.0], [2470.0, 3.0], [2471.0, 2.0], [2472.0, 2.0], [2474.0, 3.0], [2473.0, 3.0], [2465.0, 3.0], [2466.0, 3.0], [2467.0, 3.0], [2468.0, 3.0], [2475.0, 2.0], [2515.0, 3.0], [2516.0, 2.0], [2517.0, 3.0], [2518.0, 3.0], [2519.0, 3.0], [2520.0, 2.0], [2525.0, 3.0], [2527.0, 3.0], [2526.0, 3.0], [2524.0, 3.0], [2523.0, 3.0], [2521.0, 2.0], [2522.0, 3.0], [2514.0, 3.0], [2513.0, 3.0], [2503.0, 2.0], [2497.0, 3.0], [2496.0, 3.0], [2559.0, 3.0], [2535.0, 2.0], [2533.0, 4.0], [2534.0, 2.0], [2539.0, 3.0], [2537.0, 3.0], [2538.0, 5.0], [2544.0, 3.0], [2546.0, 4.0], [2545.0, 3.0], [2541.0, 2.0], [2542.0, 3.0], [2543.0, 3.0], [2540.0, 2.0], [2536.0, 3.0], [2551.0, 3.0], [2555.0, 3.0], [2553.0, 2.0], [2550.0, 5.0], [2548.0, 3.0], [2549.0, 3.0], [2547.0, 3.0], [2558.0, 3.0], [2457.0, 3.0], [2459.0, 3.0], [2458.0, 2.0], [2529.0, 3.0], [2530.0, 5.0], [2531.0, 3.0], [2461.0, 3.0], [2463.0, 2.0], [2462.0, 4.0], [2528.0, 2.0], [2460.0, 3.0], [2441.0, 2.0], [2455.0, 2.0], [2449.0, 4.0], [2451.0, 2.0], [2450.0, 2.0], [2454.0, 3.0], [2453.0, 3.0], [2452.0, 3.0], [2456.0, 2.0], [2448.0, 3.0], [2443.0, 3.0], [2444.0, 3.0], [2447.0, 3.0], [2446.0, 3.0], [2445.0, 7.0], [2442.0, 2.0], [2440.0, 3.0], [2439.0, 4.0], [2437.0, 3.0], [2438.0, 7.0], [2435.0, 2.0], [2433.0, 3.0], [2436.0, 3.0], [2499.0, 2.0], [2501.0, 2.0], [2502.0, 2.0], [2500.0, 2.0], [2494.0, 2.0], [2493.0, 2.0], [2492.0, 2.0], [2489.0, 3.0], [2486.0, 3.0], [2485.0, 3.0], [2488.0, 3.0], [2487.0, 3.0], [2491.0, 2.0], [2490.0, 3.0], [2510.0, 2.0], [2511.0, 2.0], [2509.0, 3.0], [2507.0, 3.0], [2506.0, 3.0], [2504.0, 2.0], [2505.0, 2.0], [2508.0, 3.0], [2564.0, 2.0], [2675.0, 4.0], [2618.0, 9.0], [2613.0, 4.0], [2614.0, 2.0], [2615.0, 4.0], [2616.0, 2.0], [2617.0, 3.0], [2610.0, 3.0], [2612.0, 2.0], [2611.0, 1.0], [2608.0, 3.0], [2595.0, 2.0], [2597.0, 3.0], [2596.0, 4.0], [2598.0, 2.0], [2599.0, 4.0], [2602.0, 3.0], [2606.0, 3.0], [2605.0, 3.0], [2603.0, 9.0], [2600.0, 7.0], [2593.0, 4.0], [2592.0, 4.0], [2594.0, 4.0], [2644.0, 3.0], [2639.0, 3.0], [2652.0, 4.0], [2646.0, 3.0], [2645.0, 3.0], [2647.0, 5.0], [2650.0, 4.0], [2687.0, 4.0], [2680.0, 3.0], [2681.0, 2.0], [2678.0, 5.0], [2627.0, 7.0], [2629.0, 2.0], [2635.0, 3.0], [2636.0, 11.0], [2632.0, 3.0], [2637.0, 2.0], [2568.0, 5.0], [2569.0, 3.0], [2570.0, 4.0], [2572.0, 4.0], [2571.0, 3.0], [2567.0, 3.0], [2565.0, 4.0], [2582.0, 5.0], [2583.0, 2.0], [2580.0, 3.0], [2579.0, 2.0], [2581.0, 4.0], [2577.0, 4.0], [2576.0, 4.0], [2574.0, 3.0], [2575.0, 2.0], [2578.0, 3.0], [2573.0, 2.0], [2589.0, 2.0], [2586.0, 2.0], [2585.0, 3.0], [2587.0, 10.0], [2588.0, 3.0], [2590.0, 4.0], [2656.0, 4.0], [2673.0, 4.0], [2670.0, 4.0], [2665.0, 3.0], [2672.0, 3.0], [2662.0, 4.0], [2657.0, 3.0], [2658.0, 11.0], [2664.0, 7.0], [2591.0, 3.0], [2584.0, 2.0], [2561.0, 2.0], [2563.0, 3.0], [2560.0, 3.0], [2623.0, 4.0], [2620.0, 6.0], [2619.0, 4.0], [2622.0, 10.0], [2698.0, 2.0], [2703.0, 3.0], [2694.0, 5.0], [2724.0, 7.0], [2731.0, 4.0], [2734.0, 10.0], [2729.0, 5.0], [2727.0, 10.0], [2744.0, 5.0], [2740.0, 3.0], [2697.0, 5.0], [2696.0, 4.0], [2700.0, 4.0], [2747.0, 7.0], [2692.0, 6.0], [2693.0, 10.0], [2688.0, 3.0], [2750.0, 3.0], [2748.0, 4.0], [2774.0, 3.0], [2719.0, 6.0], [2801.0, 4.0], [2810.0, 5.0], [2811.0, 7.0], [2753.0, 8.0], [2716.0, 2.0], [2706.0, 5.0], [2708.0, 5.0], [2711.0, 5.0], [2782.0, 3.0], [2826.0, 7.0], [2850.0, 33.0], [2869.0, 11.0], [2870.0, 30.0], [2820.0, 21.0], [2895.0, 5.0], [2884.0, 5.0], [2817.0, 5.0], [2915.0, 6.0], [2841.0, 6.0], [2906.0, 9.0], [2898.0, 6.0], [3061.0, 9.0], [2952.0, 12.0], [3210.0, 6.0], [3500.0, 344.0], [4231.0, 228.0], [4193.0, 143.0], [4459.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4459.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 10.0, "maxY": 518.0, "series": [{"data": [[10.0, 2.0], [262.0, 1.0], [300.0, 81.0], [1016.0, 502.0], [1074.0, 163.5], [1704.0, 401.0], [1780.0, 5.0], [1973.0, 6.0], [2162.0, 429.0], [2173.0, 476.0], [2126.0, 4.0], [2130.0, 4.0], [2165.0, 3.0], [2088.0, 5.0], [2154.0, 5.0], [2102.0, 4.0], [2157.0, 3.0], [2082.0, 4.0], [2080.0, 5.0], [2125.0, 5.0], [2174.0, 4.0], [2282.0, 3.0], [2234.0, 397.0], [2223.0, 518.0], [2209.0, 15.0], [2216.0, 6.0], [2225.0, 5.0], [2268.0, 6.0], [2271.0, 8.0], [2273.0, 3.0], [2272.0, 3.0], [2178.0, 7.0], [2235.0, 7.0], [2183.0, 23.0], [2279.0, 10.0], [2277.0, 13.0], [2275.0, 10.0], [2281.0, 6.0], [2274.0, 3.0], [2294.0, 3.0], [2291.0, 4.0], [2293.0, 10.0], [2288.0, 12.0], [2289.0, 3.0], [2295.0, 5.0], [2296.0, 20.0], [2299.0, 11.0], [2267.0, 8.0], [2241.0, 4.0], [2263.0, 5.0], [2252.0, 5.0], [2245.0, 4.0], [2242.0, 5.0], [2411.0, 3.0], [2315.0, 6.0], [2353.0, 2.0], [2362.0, 7.0], [2360.0, 4.0], [2358.0, 5.0], [2355.0, 6.0], [2357.0, 2.0], [2343.0, 4.0], [2344.0, 4.0], [2347.0, 6.0], [2345.0, 4.0], [2336.0, 2.0], [2338.0, 7.0], [2428.0, 2.0], [2376.0, 3.0], [2394.0, 2.0], [2382.0, 3.0], [2377.0, 4.0], [2380.0, 2.0], [2379.0, 2.0], [2385.0, 2.0], [2383.0, 5.0], [2384.0, 2.0], [2391.0, 3.0], [2392.0, 3.0], [2388.0, 3.0], [2399.0, 2.0], [2397.0, 3.0], [2395.0, 6.0], [2396.0, 8.0], [2430.0, 3.0], [2429.0, 3.0], [2431.0, 3.0], [2373.0, 3.0], [2375.0, 3.0], [2374.0, 1.0], [2370.0, 3.0], [2371.0, 4.0], [2363.0, 2.0], [2305.0, 4.0], [2366.0, 3.0], [2364.0, 4.0], [2306.0, 5.0], [2326.0, 2.0], [2332.0, 2.0], [2329.0, 3.0], [2330.0, 6.0], [2402.0, 2.0], [2333.0, 5.0], [2334.0, 4.0], [2400.0, 4.0], [2406.0, 3.0], [2407.0, 2.0], [2409.0, 3.0], [2405.0, 2.0], [2318.0, 3.0], [2324.0, 5.0], [2322.0, 13.0], [2414.0, 3.0], [2415.0, 3.0], [2416.0, 3.0], [2417.0, 9.0], [2412.0, 4.0], [2413.0, 3.0], [2426.0, 2.0], [2427.0, 3.0], [2425.0, 3.0], [2424.0, 3.0], [2421.0, 2.0], [2422.0, 4.0], [2423.0, 3.0], [2419.0, 3.0], [2420.0, 2.0], [2418.0, 2.0], [2532.0, 3.0], [2498.0, 2.0], [2512.0, 2.0], [2495.0, 3.0], [2484.0, 2.0], [2482.0, 2.0], [2483.0, 2.0], [2481.0, 2.0], [2479.0, 3.0], [2480.0, 3.0], [2478.0, 2.0], [2476.0, 3.0], [2469.0, 3.0], [2470.0, 3.0], [2471.0, 2.0], [2472.0, 2.0], [2474.0, 2.0], [2473.0, 3.0], [2465.0, 3.0], [2466.0, 3.0], [2467.0, 3.0], [2468.0, 2.0], [2475.0, 2.0], [2515.0, 3.0], [2516.0, 2.0], [2517.0, 2.0], [2518.0, 3.0], [2519.0, 2.0], [2520.0, 2.0], [2525.0, 3.0], [2527.0, 3.0], [2526.0, 2.0], [2524.0, 3.0], [2523.0, 3.0], [2521.0, 2.0], [2522.0, 2.0], [2514.0, 2.0], [2513.0, 2.0], [2503.0, 2.0], [2497.0, 3.0], [2496.0, 2.0], [2559.0, 3.0], [2535.0, 2.0], [2533.0, 4.0], [2534.0, 2.0], [2539.0, 3.0], [2537.0, 3.0], [2538.0, 5.0], [2544.0, 3.0], [2546.0, 4.0], [2545.0, 3.0], [2541.0, 2.0], [2542.0, 3.0], [2543.0, 3.0], [2540.0, 2.0], [2536.0, 3.0], [2551.0, 3.0], [2555.0, 3.0], [2553.0, 2.0], [2550.0, 5.0], [2548.0, 3.0], [2549.0, 3.0], [2547.0, 3.0], [2558.0, 3.0], [2457.0, 2.0], [2459.0, 3.0], [2458.0, 2.0], [2529.0, 2.0], [2530.0, 4.0], [2531.0, 3.0], [2461.0, 3.0], [2463.0, 2.0], [2462.0, 4.0], [2528.0, 2.0], [2460.0, 3.0], [2441.0, 2.0], [2455.0, 2.0], [2449.0, 3.0], [2451.0, 2.0], [2450.0, 2.0], [2454.0, 3.0], [2453.0, 3.0], [2452.0, 3.0], [2456.0, 2.0], [2448.0, 3.0], [2443.0, 3.0], [2444.0, 3.0], [2447.0, 2.0], [2446.0, 3.0], [2445.0, 6.0], [2442.0, 2.0], [2440.0, 3.0], [2439.0, 4.0], [2437.0, 3.0], [2438.0, 7.0], [2435.0, 2.0], [2433.0, 3.0], [2436.0, 2.0], [2499.0, 2.0], [2501.0, 2.0], [2502.0, 2.0], [2500.0, 2.0], [2494.0, 2.0], [2493.0, 2.0], [2492.0, 2.0], [2489.0, 2.0], [2486.0, 3.0], [2485.0, 3.0], [2488.0, 3.0], [2487.0, 2.0], [2491.0, 2.0], [2490.0, 3.0], [2510.0, 2.0], [2511.0, 2.0], [2509.0, 2.0], [2507.0, 3.0], [2506.0, 2.0], [2504.0, 2.0], [2505.0, 2.0], [2508.0, 2.0], [2564.0, 2.0], [2675.0, 4.0], [2618.0, 9.0], [2613.0, 4.0], [2614.0, 2.0], [2615.0, 4.0], [2616.0, 2.0], [2617.0, 3.0], [2610.0, 3.0], [2612.0, 2.0], [2611.0, 1.0], [2608.0, 2.0], [2595.0, 2.0], [2597.0, 3.0], [2596.0, 3.0], [2598.0, 2.0], [2599.0, 4.0], [2602.0, 3.0], [2606.0, 3.0], [2605.0, 3.0], [2603.0, 8.0], [2600.0, 7.0], [2593.0, 4.0], [2592.0, 4.0], [2594.0, 4.0], [2644.0, 2.0], [2639.0, 3.0], [2652.0, 4.0], [2646.0, 3.0], [2645.0, 3.0], [2647.0, 4.0], [2650.0, 4.0], [2687.0, 3.0], [2680.0, 2.0], [2681.0, 2.0], [2678.0, 4.0], [2627.0, 7.0], [2629.0, 2.0], [2635.0, 3.0], [2636.0, 10.0], [2632.0, 3.0], [2637.0, 2.0], [2568.0, 5.0], [2569.0, 3.0], [2570.0, 4.0], [2572.0, 4.0], [2571.0, 3.0], [2567.0, 2.0], [2565.0, 4.0], [2582.0, 4.0], [2583.0, 2.0], [2580.0, 3.0], [2579.0, 2.0], [2581.0, 4.0], [2577.0, 4.0], [2576.0, 4.0], [2574.0, 3.0], [2575.0, 2.0], [2578.0, 3.0], [2573.0, 2.0], [2589.0, 2.0], [2586.0, 2.0], [2585.0, 3.0], [2587.0, 9.0], [2588.0, 3.0], [2590.0, 3.0], [2656.0, 3.0], [2673.0, 4.0], [2670.0, 4.0], [2665.0, 2.0], [2672.0, 3.0], [2662.0, 3.0], [2657.0, 2.0], [2658.0, 10.0], [2664.0, 6.0], [2591.0, 3.0], [2584.0, 2.0], [2561.0, 2.0], [2563.0, 3.0], [2560.0, 3.0], [2623.0, 4.0], [2620.0, 6.0], [2619.0, 4.0], [2622.0, 9.0], [2698.0, 2.0], [2703.0, 3.0], [2694.0, 4.0], [2724.0, 6.0], [2731.0, 4.0], [2734.0, 9.0], [2729.0, 4.0], [2727.0, 9.0], [2744.0, 5.0], [2740.0, 3.0], [2697.0, 4.0], [2696.0, 4.0], [2700.0, 4.0], [2747.0, 7.0], [2692.0, 6.0], [2693.0, 9.0], [2688.0, 3.0], [2750.0, 2.0], [2748.0, 4.0], [2774.0, 3.0], [2719.0, 5.0], [2801.0, 4.0], [2810.0, 5.0], [2811.0, 7.0], [2753.0, 7.0], [2716.0, 2.0], [2706.0, 5.0], [2708.0, 5.0], [2711.0, 5.0], [2782.0, 3.0], [2826.0, 6.0], [2850.0, 32.5], [2869.0, 10.0], [2870.0, 29.0], [2820.0, 20.0], [2895.0, 4.0], [2884.0, 4.0], [2817.0, 5.0], [2915.0, 6.0], [2841.0, 5.0], [2906.0, 8.0], [2898.0, 6.0], [3061.0, 9.0], [2952.0, 11.0], [3210.0, 6.0], [3500.0, 344.0], [4231.0, 228.0], [4193.0, 142.0], [4459.0, 32.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4459.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1795.9, "minX": 1.70786748E12, "maxY": 2501.6833333333334, "series": [{"data": [[1.70786838E12, 2500.516666666667], [1.70786772E12, 2499.866666666667], [1.70786832E12, 2500.1], [1.70786802E12, 2499.15], [1.70786748E12, 2370.6666666666665], [1.70786844E12, 1795.9], [1.70786814E12, 2499.75], [1.70786808E12, 2500.6], [1.70786778E12, 2499.233333333333], [1.7078682E12, 2500.8333333333335], [1.7078679E12, 2497.883333333333], [1.70786784E12, 2500.95], [1.70786754E12, 2499.766666666667], [1.70786796E12, 2501.6833333333334], [1.70786766E12, 2500.633333333333], [1.70786826E12, 2499.5833333333335], [1.7078676E12, 2499.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70786844E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1795.95, "minX": 1.70786748E12, "maxY": 2502.0, "series": [{"data": [[1.70786838E12, 2500.516666666667], [1.70786772E12, 2499.866666666667], [1.70786832E12, 2500.2], [1.70786802E12, 2498.866666666667], [1.70786748E12, 2370.5666666666666], [1.70786844E12, 1795.95], [1.70786814E12, 2499.6666666666665], [1.70786808E12, 2500.8166666666666], [1.70786778E12, 2499.266666666667], [1.7078682E12, 2500.9666666666667], [1.7078679E12, 2497.5666666666666], [1.70786784E12, 2500.9166666666665], [1.70786754E12, 2499.7833333333333], [1.70786796E12, 2502.0], [1.70786766E12, 2500.75], [1.70786826E12, 2499.5333333333333], [1.7078676E12, 2499.4333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70786844E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1795.95, "minX": 1.70786748E12, "maxY": 2502.0, "series": [{"data": [[1.70786838E12, 2500.516666666667], [1.70786772E12, 2499.866666666667], [1.70786832E12, 2500.2], [1.70786802E12, 2498.866666666667], [1.70786748E12, 2370.5666666666666], [1.70786844E12, 1795.95], [1.70786814E12, 2499.6666666666665], [1.70786808E12, 2500.8166666666666], [1.70786778E12, 2499.266666666667], [1.7078682E12, 2500.9666666666667], [1.7078679E12, 2497.5666666666666], [1.70786784E12, 2500.9166666666665], [1.70786754E12, 2499.7833333333333], [1.70786796E12, 2502.0], [1.70786766E12, 2500.75], [1.70786826E12, 2499.5333333333333], [1.7078676E12, 2499.4333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70786844E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1795.95, "minX": 1.70786748E12, "maxY": 2502.0, "series": [{"data": [[1.70786838E12, 2500.516666666667], [1.70786772E12, 2499.866666666667], [1.70786832E12, 2500.2], [1.70786802E12, 2498.866666666667], [1.70786748E12, 2370.5666666666666], [1.70786844E12, 1795.95], [1.70786814E12, 2499.6666666666665], [1.70786808E12, 2500.8166666666666], [1.70786778E12, 2499.266666666667], [1.7078682E12, 2500.9666666666667], [1.7078679E12, 2497.5666666666666], [1.70786784E12, 2500.9166666666665], [1.70786754E12, 2499.7833333333333], [1.70786796E12, 2502.0], [1.70786766E12, 2500.75], [1.70786826E12, 2499.5333333333333], [1.7078676E12, 2499.4333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70786844E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

