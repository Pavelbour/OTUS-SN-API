/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 62.0, "series": [{"data": [[0.0, 6.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 8.0], [4.0, 8.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 9.0], [14.3, 9.0], [14.4, 9.0], [14.5, 9.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 9.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 9.0], [31.5, 9.0], [31.6, 9.0], [31.7, 9.0], [31.8, 9.0], [31.9, 9.0], [32.0, 9.0], [32.1, 9.0], [32.2, 9.0], [32.3, 9.0], [32.4, 9.0], [32.5, 9.0], [32.6, 9.0], [32.7, 9.0], [32.8, 9.0], [32.9, 9.0], [33.0, 9.0], [33.1, 9.0], [33.2, 9.0], [33.3, 9.0], [33.4, 9.0], [33.5, 9.0], [33.6, 9.0], [33.7, 9.0], [33.8, 9.0], [33.9, 9.0], [34.0, 9.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 9.0], [35.0, 9.0], [35.1, 9.0], [35.2, 9.0], [35.3, 9.0], [35.4, 9.0], [35.5, 9.0], [35.6, 9.0], [35.7, 9.0], [35.8, 9.0], [35.9, 9.0], [36.0, 9.0], [36.1, 9.0], [36.2, 9.0], [36.3, 9.0], [36.4, 9.0], [36.5, 9.0], [36.6, 9.0], [36.7, 9.0], [36.8, 9.0], [36.9, 9.0], [37.0, 9.0], [37.1, 9.0], [37.2, 9.0], [37.3, 9.0], [37.4, 9.0], [37.5, 9.0], [37.6, 9.0], [37.7, 9.0], [37.8, 9.0], [37.9, 9.0], [38.0, 9.0], [38.1, 9.0], [38.2, 9.0], [38.3, 9.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 10.0], [39.9, 10.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 10.0], [47.4, 10.0], [47.5, 10.0], [47.6, 10.0], [47.7, 10.0], [47.8, 10.0], [47.9, 10.0], [48.0, 10.0], [48.1, 10.0], [48.2, 10.0], [48.3, 10.0], [48.4, 10.0], [48.5, 10.0], [48.6, 10.0], [48.7, 10.0], [48.8, 10.0], [48.9, 10.0], [49.0, 10.0], [49.1, 10.0], [49.2, 10.0], [49.3, 10.0], [49.4, 10.0], [49.5, 10.0], [49.6, 10.0], [49.7, 10.0], [49.8, 10.0], [49.9, 10.0], [50.0, 10.0], [50.1, 10.0], [50.2, 10.0], [50.3, 10.0], [50.4, 10.0], [50.5, 10.0], [50.6, 10.0], [50.7, 10.0], [50.8, 10.0], [50.9, 10.0], [51.0, 10.0], [51.1, 10.0], [51.2, 10.0], [51.3, 10.0], [51.4, 10.0], [51.5, 10.0], [51.6, 10.0], [51.7, 10.0], [51.8, 10.0], [51.9, 10.0], [52.0, 10.0], [52.1, 10.0], [52.2, 10.0], [52.3, 10.0], [52.4, 10.0], [52.5, 10.0], [52.6, 10.0], [52.7, 10.0], [52.8, 10.0], [52.9, 10.0], [53.0, 10.0], [53.1, 10.0], [53.2, 10.0], [53.3, 10.0], [53.4, 10.0], [53.5, 10.0], [53.6, 10.0], [53.7, 10.0], [53.8, 10.0], [53.9, 10.0], [54.0, 10.0], [54.1, 10.0], [54.2, 10.0], [54.3, 10.0], [54.4, 10.0], [54.5, 10.0], [54.6, 10.0], [54.7, 10.0], [54.8, 10.0], [54.9, 10.0], [55.0, 10.0], [55.1, 10.0], [55.2, 10.0], [55.3, 10.0], [55.4, 10.0], [55.5, 10.0], [55.6, 10.0], [55.7, 10.0], [55.8, 10.0], [55.9, 11.0], [56.0, 11.0], [56.1, 11.0], [56.2, 11.0], [56.3, 11.0], [56.4, 11.0], [56.5, 11.0], [56.6, 11.0], [56.7, 11.0], [56.8, 11.0], [56.9, 11.0], [57.0, 11.0], [57.1, 11.0], [57.2, 11.0], [57.3, 11.0], [57.4, 11.0], [57.5, 11.0], [57.6, 11.0], [57.7, 11.0], [57.8, 11.0], [57.9, 11.0], [58.0, 11.0], [58.1, 11.0], [58.2, 11.0], [58.3, 11.0], [58.4, 11.0], [58.5, 11.0], [58.6, 11.0], [58.7, 11.0], [58.8, 11.0], [58.9, 11.0], [59.0, 11.0], [59.1, 11.0], [59.2, 11.0], [59.3, 11.0], [59.4, 11.0], [59.5, 11.0], [59.6, 11.0], [59.7, 11.0], [59.8, 11.0], [59.9, 11.0], [60.0, 11.0], [60.1, 11.0], [60.2, 11.0], [60.3, 11.0], [60.4, 11.0], [60.5, 11.0], [60.6, 11.0], [60.7, 11.0], [60.8, 11.0], [60.9, 11.0], [61.0, 11.0], [61.1, 11.0], [61.2, 11.0], [61.3, 11.0], [61.4, 11.0], [61.5, 11.0], [61.6, 11.0], [61.7, 11.0], [61.8, 11.0], [61.9, 11.0], [62.0, 11.0], [62.1, 11.0], [62.2, 11.0], [62.3, 11.0], [62.4, 11.0], [62.5, 11.0], [62.6, 11.0], [62.7, 11.0], [62.8, 11.0], [62.9, 11.0], [63.0, 11.0], [63.1, 11.0], [63.2, 11.0], [63.3, 11.0], [63.4, 11.0], [63.5, 11.0], [63.6, 11.0], [63.7, 11.0], [63.8, 11.0], [63.9, 11.0], [64.0, 11.0], [64.1, 11.0], [64.2, 11.0], [64.3, 11.0], [64.4, 11.0], [64.5, 11.0], [64.6, 11.0], [64.7, 11.0], [64.8, 11.0], [64.9, 11.0], [65.0, 11.0], [65.1, 11.0], [65.2, 11.0], [65.3, 11.0], [65.4, 11.0], [65.5, 11.0], [65.6, 11.0], [65.7, 11.0], [65.8, 11.0], [65.9, 11.0], [66.0, 11.0], [66.1, 11.0], [66.2, 11.0], [66.3, 11.0], [66.4, 11.0], [66.5, 11.0], [66.6, 11.0], [66.7, 11.0], [66.8, 11.0], [66.9, 11.0], [67.0, 11.0], [67.1, 11.0], [67.2, 11.0], [67.3, 11.0], [67.4, 11.0], [67.5, 11.0], [67.6, 12.0], [67.7, 12.0], [67.8, 12.0], [67.9, 12.0], [68.0, 12.0], [68.1, 12.0], [68.2, 12.0], [68.3, 12.0], [68.4, 12.0], [68.5, 12.0], [68.6, 12.0], [68.7, 12.0], [68.8, 12.0], [68.9, 12.0], [69.0, 12.0], [69.1, 12.0], [69.2, 12.0], [69.3, 12.0], [69.4, 12.0], [69.5, 12.0], [69.6, 12.0], [69.7, 12.0], [69.8, 12.0], [69.9, 12.0], [70.0, 12.0], [70.1, 12.0], [70.2, 12.0], [70.3, 12.0], [70.4, 12.0], [70.5, 12.0], [70.6, 12.0], [70.7, 12.0], [70.8, 12.0], [70.9, 12.0], [71.0, 12.0], [71.1, 12.0], [71.2, 12.0], [71.3, 12.0], [71.4, 12.0], [71.5, 12.0], [71.6, 12.0], [71.7, 12.0], [71.8, 12.0], [71.9, 12.0], [72.0, 12.0], [72.1, 12.0], [72.2, 12.0], [72.3, 12.0], [72.4, 12.0], [72.5, 12.0], [72.6, 12.0], [72.7, 12.0], [72.8, 12.0], [72.9, 12.0], [73.0, 12.0], [73.1, 12.0], [73.2, 12.0], [73.3, 12.0], [73.4, 12.0], [73.5, 12.0], [73.6, 12.0], [73.7, 12.0], [73.8, 12.0], [73.9, 12.0], [74.0, 12.0], [74.1, 12.0], [74.2, 12.0], [74.3, 12.0], [74.4, 12.0], [74.5, 12.0], [74.6, 12.0], [74.7, 12.0], [74.8, 12.0], [74.9, 12.0], [75.0, 12.0], [75.1, 12.0], [75.2, 12.0], [75.3, 12.0], [75.4, 12.0], [75.5, 12.0], [75.6, 12.0], [75.7, 12.0], [75.8, 12.0], [75.9, 12.0], [76.0, 12.0], [76.1, 12.0], [76.2, 12.0], [76.3, 12.0], [76.4, 12.0], [76.5, 12.0], [76.6, 12.0], [76.7, 12.0], [76.8, 12.0], [76.9, 12.0], [77.0, 12.0], [77.1, 12.0], [77.2, 12.0], [77.3, 12.0], [77.4, 12.0], [77.5, 12.0], [77.6, 13.0], [77.7, 13.0], [77.8, 13.0], [77.9, 13.0], [78.0, 13.0], [78.1, 13.0], [78.2, 13.0], [78.3, 13.0], [78.4, 13.0], [78.5, 13.0], [78.6, 13.0], [78.7, 13.0], [78.8, 13.0], [78.9, 13.0], [79.0, 13.0], [79.1, 13.0], [79.2, 13.0], [79.3, 13.0], [79.4, 13.0], [79.5, 13.0], [79.6, 13.0], [79.7, 13.0], [79.8, 13.0], [79.9, 13.0], [80.0, 13.0], [80.1, 13.0], [80.2, 13.0], [80.3, 13.0], [80.4, 13.0], [80.5, 13.0], [80.6, 13.0], [80.7, 13.0], [80.8, 13.0], [80.9, 13.0], [81.0, 13.0], [81.1, 13.0], [81.2, 13.0], [81.3, 13.0], [81.4, 13.0], [81.5, 13.0], [81.6, 13.0], [81.7, 13.0], [81.8, 13.0], [81.9, 13.0], [82.0, 13.0], [82.1, 13.0], [82.2, 13.0], [82.3, 13.0], [82.4, 13.0], [82.5, 13.0], [82.6, 13.0], [82.7, 13.0], [82.8, 13.0], [82.9, 13.0], [83.0, 13.0], [83.1, 13.0], [83.2, 13.0], [83.3, 13.0], [83.4, 13.0], [83.5, 13.0], [83.6, 13.0], [83.7, 13.0], [83.8, 13.0], [83.9, 13.0], [84.0, 13.0], [84.1, 13.0], [84.2, 13.0], [84.3, 13.0], [84.4, 13.0], [84.5, 13.0], [84.6, 13.0], [84.7, 13.0], [84.8, 13.0], [84.9, 13.0], [85.0, 13.0], [85.1, 13.0], [85.2, 13.0], [85.3, 14.0], [85.4, 14.0], [85.5, 14.0], [85.6, 14.0], [85.7, 14.0], [85.8, 14.0], [85.9, 14.0], [86.0, 14.0], [86.1, 14.0], [86.2, 14.0], [86.3, 14.0], [86.4, 14.0], [86.5, 14.0], [86.6, 14.0], [86.7, 14.0], [86.8, 14.0], [86.9, 14.0], [87.0, 14.0], [87.1, 14.0], [87.2, 14.0], [87.3, 14.0], [87.4, 14.0], [87.5, 14.0], [87.6, 14.0], [87.7, 14.0], [87.8, 14.0], [87.9, 14.0], [88.0, 14.0], [88.1, 14.0], [88.2, 14.0], [88.3, 14.0], [88.4, 14.0], [88.5, 14.0], [88.6, 14.0], [88.7, 14.0], [88.8, 14.0], [88.9, 14.0], [89.0, 14.0], [89.1, 14.0], [89.2, 14.0], [89.3, 14.0], [89.4, 14.0], [89.5, 14.0], [89.6, 14.0], [89.7, 14.0], [89.8, 14.0], [89.9, 14.0], [90.0, 14.0], [90.1, 14.0], [90.2, 14.0], [90.3, 14.0], [90.4, 14.0], [90.5, 15.0], [90.6, 15.0], [90.7, 15.0], [90.8, 15.0], [90.9, 15.0], [91.0, 15.0], [91.1, 15.0], [91.2, 15.0], [91.3, 15.0], [91.4, 15.0], [91.5, 15.0], [91.6, 15.0], [91.7, 15.0], [91.8, 15.0], [91.9, 15.0], [92.0, 15.0], [92.1, 15.0], [92.2, 15.0], [92.3, 15.0], [92.4, 15.0], [92.5, 15.0], [92.6, 15.0], [92.7, 15.0], [92.8, 15.0], [92.9, 15.0], [93.0, 15.0], [93.1, 15.0], [93.2, 15.0], [93.3, 15.0], [93.4, 15.0], [93.5, 15.0], [93.6, 15.0], [93.7, 15.0], [93.8, 15.0], [93.9, 15.0], [94.0, 16.0], [94.1, 16.0], [94.2, 16.0], [94.3, 16.0], [94.4, 16.0], [94.5, 16.0], [94.6, 16.0], [94.7, 16.0], [94.8, 16.0], [94.9, 16.0], [95.0, 16.0], [95.1, 16.0], [95.2, 16.0], [95.3, 16.0], [95.4, 16.0], [95.5, 16.0], [95.6, 16.0], [95.7, 16.0], [95.8, 16.0], [95.9, 16.0], [96.0, 16.0], [96.1, 16.0], [96.2, 16.0], [96.3, 17.0], [96.4, 17.0], [96.5, 17.0], [96.6, 17.0], [96.7, 17.0], [96.8, 17.0], [96.9, 17.0], [97.0, 17.0], [97.1, 17.0], [97.2, 17.0], [97.3, 17.0], [97.4, 17.0], [97.5, 17.0], [97.6, 17.0], [97.7, 18.0], [97.8, 18.0], [97.9, 18.0], [98.0, 18.0], [98.1, 18.0], [98.2, 18.0], [98.3, 18.0], [98.4, 18.0], [98.5, 18.0], [98.6, 19.0], [98.7, 19.0], [98.8, 19.0], [98.9, 19.0], [99.0, 19.0], [99.1, 20.0], [99.2, 20.0], [99.3, 20.0], [99.4, 21.0], [99.5, 21.0], [99.6, 22.0], [99.7, 24.0], [99.8, 26.0], [99.9, 30.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 100000.0, "minX": 0.0, "maxY": 100000.0, "series": [{"data": [[0.0, 100000.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 100000.0, "series": [{"data": [[0.0, 100000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 190.8000000000001, "minX": 1.70665482E12, "maxY": 1670.653232661635, "series": [{"data": [[1.70665488E12, 1648.0292097980805], [1.70665506E12, 1670.61397720456], [1.70665494E12, 1670.653232661635], [1.70665512E12, 1365.8099574189293], [1.70665482E12, 923.7701076630757], [1.706655E12, 1670.6383276655329], [1.70665518E12, 190.8000000000001]], "isOverall": false, "label": "10000 Users 10 Requests", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.5, "minX": 1.0, "maxY": 37.2, "series": [{"data": [[2.0, 12.0], [3.0, 11.0], [4.0, 12.0], [5.0, 12.0], [6.0, 11.0], [7.0, 13.0], [8.0, 12.0], [9.0, 12.0], [10.0, 13.0], [11.0, 12.0], [12.0, 11.0], [13.0, 11.0], [14.0, 12.0], [15.0, 13.0], [16.0, 12.0], [17.0, 12.0], [18.0, 11.0], [19.0, 12.0], [20.0, 11.0], [21.0, 10.0], [22.0, 11.0], [23.0, 11.0], [24.0, 12.0], [25.0, 12.0], [26.0, 12.0], [27.0, 12.0], [28.0, 11.0], [29.0, 10.0], [30.0, 10.0], [31.0, 11.0], [33.0, 10.0], [32.0, 11.0], [35.0, 11.0], [34.0, 12.0], [37.0, 11.0], [36.0, 11.0], [39.0, 12.0], [38.0, 12.0], [41.0, 11.0], [40.0, 12.0], [43.0, 12.0], [42.0, 12.0], [45.0, 11.0], [44.0, 12.0], [47.0, 11.0], [46.0, 12.0], [49.0, 10.0], [48.0, 11.0], [51.0, 11.0], [50.0, 11.0], [53.0, 11.0], [52.0, 11.0], [55.0, 12.0], [54.0, 11.0], [57.0, 11.0], [56.0, 11.0], [59.0, 11.0], [58.0, 11.0], [61.0, 11.0], [60.0, 11.0], [63.0, 10.0], [62.0, 11.0], [67.0, 11.0], [66.0, 11.0], [65.0, 11.0], [64.0, 11.0], [71.0, 11.0], [70.0, 11.0], [69.0, 11.0], [68.0, 11.0], [75.0, 12.0], [74.0, 11.0], [73.0, 11.0], [72.0, 10.0], [79.0, 12.0], [78.0, 12.0], [77.0, 11.0], [76.0, 11.0], [83.0, 11.0], [82.0, 12.0], [81.0, 13.0], [80.0, 12.0], [87.0, 11.0], [86.0, 11.0], [85.0, 12.0], [84.0, 12.0], [91.0, 12.0], [90.0, 12.0], [89.0, 12.0], [88.0, 12.0], [95.0, 12.0], [94.0, 13.0], [93.0, 12.0], [92.0, 11.0], [99.0, 11.0], [98.0, 10.0], [97.0, 12.0], [96.0, 11.0], [103.0, 12.0], [102.0, 10.0], [101.0, 10.0], [100.0, 10.0], [107.0, 10.0], [106.0, 10.0], [105.0, 10.0], [104.0, 10.0], [111.0, 11.0], [110.0, 11.0], [109.0, 10.0], [108.0, 11.0], [115.0, 11.0], [114.0, 12.0], [113.0, 10.0], [112.0, 11.0], [119.0, 11.0], [118.0, 12.0], [117.0, 11.0], [116.0, 13.0], [123.0, 10.0], [122.0, 10.0], [121.0, 10.0], [120.0, 11.0], [127.0, 11.0], [126.0, 12.0], [125.0, 10.0], [124.0, 10.0], [135.0, 11.0], [134.0, 11.0], [133.0, 10.0], [132.0, 12.0], [131.0, 11.0], [130.0, 10.0], [129.0, 11.0], [128.0, 11.0], [143.0, 10.0], [142.0, 10.0], [141.0, 11.0], [140.0, 11.0], [139.0, 11.0], [138.0, 12.0], [137.0, 12.0], [136.0, 12.0], [151.0, 12.0], [150.0, 12.0], [149.0, 11.0], [148.0, 10.0], [147.0, 11.0], [146.0, 9.0], [145.0, 10.0], [144.0, 11.0], [159.0, 12.0], [158.0, 13.0], [157.0, 12.0], [156.0, 12.0], [155.0, 12.0], [154.0, 13.0], [153.0, 13.0], [152.0, 11.0], [167.0, 10.0], [166.0, 10.0], [165.0, 10.0], [164.0, 10.0], [163.0, 12.0], [162.0, 11.0], [161.0, 13.0], [160.0, 11.0], [174.0, 37.2], [175.0, 9.5], [173.0, 9.0], [172.0, 10.0], [171.0, 9.666666666666666], [170.0, 10.0], [169.0, 10.5], [168.0, 11.0], [177.0, 9.333333333333334], [178.0, 9.333333333333334], [180.0, 10.0], [181.0, 8.666666666666666], [182.0, 8.75], [183.0, 9.0], [179.0, 10.0], [176.0, 9.0], [184.0, 8.75], [185.0, 8.333333333333334], [186.0, 8.0], [187.0, 8.5], [188.0, 8.666666666666666], [189.0, 8.666666666666666], [190.0, 8.0], [191.0, 10.333333333333334], [192.0, 10.0], [194.0, 8.333333333333334], [195.0, 8.5], [196.0, 8.666666666666666], [197.0, 9.333333333333334], [199.0, 8.75], [198.0, 9.0], [193.0, 8.5], [200.0, 9.0], [201.0, 9.0], [202.0, 9.333333333333334], [203.0, 8.333333333333334], [204.0, 9.0], [205.0, 8.333333333333334], [207.0, 8.5], [206.0, 8.0], [208.0, 8.333333333333334], [209.0, 8.666666666666666], [210.0, 8.75], [211.0, 9.666666666666666], [213.0, 9.0], [214.0, 8.666666666666666], [215.0, 7.666666666666667], [212.0, 10.0], [216.0, 7.666666666666667], [217.0, 8.333333333333334], [218.0, 9.0], [219.0, 8.666666666666666], [220.0, 8.0], [221.0, 8.333333333333334], [222.0, 8.333333333333334], [223.0, 9.0], [224.0, 8.25], [225.0, 9.0], [226.0, 8.0], [227.0, 8.0], [229.0, 8.25], [230.0, 8.666666666666666], [231.0, 8.5], [228.0, 8.0], [232.0, 8.5], [233.0, 8.5], [234.0, 9.0], [235.0, 9.333333333333334], [236.0, 8.0], [237.0, 8.666666666666666], [238.0, 8.666666666666666], [239.0, 8.666666666666666], [241.0, 12.0], [242.0, 11.0], [243.0, 12.0], [244.0, 9.6], [245.0, 9.0], [246.0, 9.333333333333334], [247.0, 9.5], [240.0, 9.666666666666666], [248.0, 8.8], [249.0, 9.0], [250.0, 8.333333333333334], [252.0, 9.0], [253.0, 8.333333333333334], [255.0, 9.25], [254.0, 10.0], [251.0, 9.0], [257.0, 10.0], [256.0, 10.333333333333334], [258.0, 10.333333333333334], [259.0, 9.0], [261.0, 10.0], [260.0, 10.0], [262.0, 9.333333333333334], [263.0, 9.5], [264.0, 8.75], [270.0, 9.333333333333334], [271.0, 10.333333333333334], [268.0, 9.5], [269.0, 9.333333333333334], [265.0, 9.5], [266.0, 9.666666666666666], [267.0, 9.5], [274.0, 9.0], [273.0, 8.666666666666666], [275.0, 9.0], [284.0, 9.0], [285.0, 8.75], [286.0, 9.666666666666666], [287.0, 9.0], [276.0, 8.666666666666666], [277.0, 8.5], [278.0, 8.333333333333334], [279.0, 9.0], [272.0, 9.666666666666666], [280.0, 8.75], [281.0, 9.5], [282.0, 9.5], [283.0, 10.0], [290.0, 9.333333333333334], [289.0, 9.333333333333334], [291.0, 9.333333333333334], [300.0, 9.333333333333334], [302.0, 12.0], [301.0, 10.0], [303.0, 9.0], [293.0, 9.0], [292.0, 9.333333333333334], [294.0, 9.666666666666666], [295.0, 9.333333333333334], [288.0, 8.666666666666666], [296.0, 10.0], [297.0, 9.333333333333334], [298.0, 9.75], [299.0, 9.0], [306.0, 9.0], [304.0, 9.75], [305.0, 10.5], [307.0, 8.75], [316.0, 8.25], [317.0, 8.5], [318.0, 9.333333333333334], [319.0, 9.333333333333334], [308.0, 9.333333333333334], [309.0, 9.333333333333334], [311.0, 8.666666666666666], [310.0, 9.0], [312.0, 9.333333333333334], [313.0, 8.5], [315.0, 9.0], [314.0, 9.0], [333.0, 8.5], [320.0, 8.6], [322.0, 8.25], [321.0, 10.0], [332.0, 9.0], [323.0, 10.0], [334.0, 8.333333333333334], [335.0, 8.5], [324.0, 8.333333333333334], [325.0, 8.5], [326.0, 8.0], [327.0, 8.0], [328.0, 8.0], [329.0, 8.333333333333334], [330.0, 9.333333333333334], [331.0, 8.0], [338.0, 8.6], [336.0, 8.25], [337.0, 8.666666666666666], [339.0, 8.25], [348.0, 8.2], [349.0, 8.0], [350.0, 8.0], [351.0, 8.4], [340.0, 9.0], [341.0, 12.75], [342.0, 8.833333333333334], [343.0, 8.2], [344.0, 8.5], [345.0, 8.428571428571429], [346.0, 8.6], [347.0, 8.0], [353.0, 8.75], [352.0, 8.166666666666668], [354.0, 7.8], [355.0, 7.666666666666667], [364.0, 8.75], [365.0, 7.5], [366.0, 8.428571428571429], [367.0, 8.5], [356.0, 8.142857142857142], [357.0, 8.2], [358.0, 8.4], [359.0, 8.5], [360.0, 8.25], [362.0, 8.0], [361.0, 8.333333333333334], [363.0, 7.833333333333333], [369.0, 8.4], [368.0, 8.6], [370.0, 7.6], [371.0, 8.4], [372.0, 8.4], [373.0, 8.6], [374.0, 8.8], [375.0, 8.8], [376.0, 8.8], [382.0, 8.5], [383.0, 8.666666666666666], [380.0, 8.75], [381.0, 8.666666666666668], [377.0, 8.5], [379.0, 8.666666666666668], [378.0, 9.0], [385.0, 8.8], [384.0, 8.571428571428571], [386.0, 8.333333333333334], [387.0, 8.2], [388.0, 8.4], [389.0, 8.666666666666666], [390.0, 9.333333333333334], [391.0, 9.0], [392.0, 8.6], [398.0, 9.285714285714285], [399.0, 8.666666666666666], [396.0, 9.0], [397.0, 8.75], [393.0, 8.833333333333332], [394.0, 9.5], [395.0, 8.6], [401.0, 8.5], [400.0, 9.0], [402.0, 8.666666666666666], [403.0, 8.833333333333332], [404.0, 8.833333333333332], [405.0, 9.0], [406.0, 8.5], [407.0, 9.0], [408.0, 8.5], [414.0, 8.8], [415.0, 8.6], [412.0, 8.75], [413.0, 9.166666666666666], [409.0, 9.4], [410.0, 8.833333333333334], [411.0, 9.5], [417.0, 8.8], [416.0, 8.75], [418.0, 8.666666666666668], [419.0, 8.6], [420.0, 9.0], [421.0, 8.8], [422.0, 9.0], [423.0, 8.4], [424.0, 9.333333333333334], [430.0, 8.375], [431.0, 8.5], [428.0, 9.0], [429.0, 8.6], [425.0, 9.4], [426.0, 8.5], [427.0, 8.666666666666666], [433.0, 9.0], [432.0, 9.0], [434.0, 8.8], [435.0, 8.6], [436.0, 9.2], [437.0, 9.4], [438.0, 9.0], [439.0, 8.8], [440.0, 8.4], [446.0, 8.5], [447.0, 9.0], [444.0, 8.75], [445.0, 8.6], [441.0, 8.666666666666666], [442.0, 9.166666666666666], [443.0, 9.2], [449.0, 9.0], [448.0, 9.0], [450.0, 8.4], [451.0, 9.25], [460.0, 9.142857142857142], [461.0, 9.0], [462.0, 8.833333333333334], [463.0, 8.25], [452.0, 9.0], [453.0, 9.0], [454.0, 9.0], [455.0, 8.0], [456.0, 8.6], [457.0, 8.75], [458.0, 9.714285714285714], [459.0, 8.5], [465.0, 8.8], [464.0, 8.6], [466.0, 8.2], [467.0, 8.8], [469.0, 8.624999999999998], [468.0, 9.0], [470.0, 9.0], [471.0, 9.4], [472.0, 9.2], [478.0, 9.0], [479.0, 9.0], [476.0, 9.0], [477.0, 9.2], [473.0, 8.6], [474.0, 8.8], [475.0, 9.0], [481.0, 8.0], [480.0, 11.666666666666666], [482.0, 8.857142857142858], [483.0, 8.25], [484.0, 8.666666666666666], [485.0, 8.666666666666666], [486.0, 8.75], [487.0, 8.333333333333334], [488.0, 8.8], [494.0, 8.6], [495.0, 8.6], [492.0, 8.8], [493.0, 8.4], [489.0, 8.4], [490.0, 9.0], [491.0, 8.166666666666666], [497.0, 8.666666666666666], [496.0, 8.6], [498.0, 8.5], [499.0, 8.6], [500.0, 8.8], [501.0, 8.6], [502.0, 9.0], [503.0, 9.0], [504.0, 8.333333333333332], [510.0, 9.333333333333332], [511.0, 8.857142857142856], [508.0, 10.285714285714286], [509.0, 9.375], [505.0, 9.0], [506.0, 9.6], [507.0, 9.2], [514.0, 8.75], [518.0, 9.285714285714286], [512.0, 9.714285714285714], [526.0, 9.222222222222221], [524.0, 8.625], [522.0, 8.875], [516.0, 9.0], [536.0, 9.0], [538.0, 10.0], [540.0, 8.666666666666668], [542.0, 8.833333333333334], [528.0, 8.8], [530.0, 9.0], [532.0, 9.0], [534.0, 9.4], [520.0, 9.285714285714285], [546.0, 9.714285714285715], [544.0, 9.11111111111111], [558.0, 9.0], [556.0, 9.374999999999998], [554.0, 9.0], [548.0, 8.857142857142858], [550.0, 9.0], [560.0, 9.25], [574.0, 8.8], [572.0, 9.375], [570.0, 9.166666666666666], [568.0, 9.285714285714285], [562.0, 9.166666666666666], [564.0, 9.428571428571427], [566.0, 9.142857142857142], [552.0, 9.200000000000001], [578.0, 10.0], [576.0, 8.4], [590.0, 9.222222222222221], [588.0, 9.0], [586.0, 9.222222222222223], [580.0, 9.0], [582.0, 8.6], [592.0, 10.0], [606.0, 9.666666666666666], [604.0, 9.571428571428571], [602.0, 9.166666666666666], [600.0, 9.428571428571427], [594.0, 9.5], [596.0, 8.714285714285714], [598.0, 9.375], [584.0, 8.833333333333332], [610.0, 9.0], [608.0, 8.857142857142856], [622.0, 9.125], [620.0, 9.499999999999998], [618.0, 9.0], [612.0, 8.714285714285714], [614.0, 8.5], [624.0, 9.0], [638.0, 8.833333333333334], [636.0, 8.8], [634.0, 8.857142857142858], [632.0, 9.285714285714285], [626.0, 8.714285714285715], [628.0, 9.25], [630.0, 9.5], [616.0, 9.333333333333332], [642.0, 9.142857142857142], [640.0, 9.0], [654.0, 9.166666666666666], [650.0, 9.0], [652.0, 11.727272727272727], [644.0, 9.285714285714285], [646.0, 9.6], [664.0, 8.714285714285714], [666.0, 9.142857142857142], [668.0, 8.333333333333332], [670.0, 9.1], [656.0, 9.857142857142858], [658.0, 9.0], [660.0, 8.857142857142858], [662.0, 9.0], [648.0, 9.285714285714285], [674.0, 9.333333333333334], [672.0, 9.5], [686.0, 9.444444444444445], [682.0, 9.6], [684.0, 9.11111111111111], [676.0, 8.75], [678.0, 9.75], [688.0, 9.11111111111111], [702.0, 10.399999999999999], [700.0, 9.636363636363637], [698.0, 9.428571428571427], [696.0, 9.25], [690.0, 9.125], [692.0, 9.363636363636363], [694.0, 9.299999999999999], [680.0, 9.125], [706.0, 9.777777777777779], [704.0, 9.125], [718.0, 9.6], [716.0, 9.666666666666664], [714.0, 9.5], [708.0, 9.166666666666666], [710.0, 9.571428571428571], [720.0, 9.5], [734.0, 8.777777777777779], [732.0, 10.666666666666666], [730.0, 9.3], [728.0, 9.636363636363637], [722.0, 9.142857142857142], [724.0, 9.75], [726.0, 9.454545454545455], [712.0, 9.899999999999999], [738.0, 9.7], [736.0, 9.88888888888889], [750.0, 9.666666666666666], [748.0, 10.333333333333334], [746.0, 9.6], [740.0, 9.299999999999999], [742.0, 9.0], [752.0, 10.571428571428571], [766.0, 9.444444444444445], [764.0, 10.25], [762.0, 9.6], [760.0, 9.299999999999999], [754.0, 9.625], [756.0, 9.8], [758.0, 9.0], [744.0, 10.333333333333334], [770.0, 9.444444444444445], [768.0, 9.428571428571427], [782.0, 9.333333333333334], [780.0, 9.285714285714285], [778.0, 8.88888888888889], [772.0, 9.125], [774.0, 9.777777777777779], [784.0, 10.666666666666668], [798.0, 9.11111111111111], [796.0, 10.399999999999999], [794.0, 10.333333333333334], [792.0, 9.11111111111111], [786.0, 10.222222222222221], [788.0, 9.999999999999998], [790.0, 9.88888888888889], [776.0, 9.6], [802.0, 8.857142857142858], [800.0, 9.222222222222221], [812.0, 9.8], [814.0, 9.416666666666668], [810.0, 9.0], [804.0, 9.571428571428571], [806.0, 10.222222222222221], [816.0, 9.5], [830.0, 9.555555555555555], [828.0, 9.0], [824.0, 9.8], [826.0, 9.600000000000001], [818.0, 9.5], [820.0, 9.444444444444445], [822.0, 9.4], [808.0, 9.666666666666666], [834.0, 9.11111111111111], [832.0, 8.777777777777779], [846.0, 9.999999999999996], [844.0, 10.600000000000001], [842.0, 9.941176470588236], [836.0, 9.11111111111111], [838.0, 10.8], [848.0, 8.900000000000002], [862.0, 9.0], [860.0, 8.88888888888889], [858.0, 8.222222222222221], [856.0, 9.0], [850.0, 8.857142857142858], [852.0, 9.076923076923078], [854.0, 9.166666666666666], [840.0, 10.11111111111111], [866.0, 9.399999999999999], [864.0, 8.8], [878.0, 9.833333333333334], [876.0, 10.416666666666666], [874.0, 10.538461538461538], [868.0, 9.333333333333332], [870.0, 9.909090909090908], [880.0, 10.11111111111111], [894.0, 9.666666666666668], [892.0, 9.799999999999999], [890.0, 9.692307692307693], [888.0, 10.285714285714285], [882.0, 9.4], [884.0, 9.466666666666665], [886.0, 9.90909090909091], [872.0, 9.625], [898.0, 10.0], [896.0, 9.777777777777779], [910.0, 9.375], [908.0, 11.333333333333334], [906.0, 9.5], [900.0, 10.166666666666666], [902.0, 10.384615384615385], [912.0, 10.071428571428571], [926.0, 10.23076923076923], [924.0, 11.099999999999998], [922.0, 9.916666666666668], [920.0, 10.083333333333334], [914.0, 10.874999999999998], [916.0, 9.11111111111111], [918.0, 9.9], [904.0, 10.2], [930.0, 9.636363636363638], [928.0, 9.8], [942.0, 9.545454545454545], [940.0, 9.818181818181815], [938.0, 10.272727272727272], [932.0, 9.699999999999998], [934.0, 10.555555555555555], [944.0, 9.461538461538463], [958.0, 9.923076923076923], [956.0, 10.0], [954.0, 9.909090909090908], [952.0, 10.8], [946.0, 9.799999999999999], [948.0, 10.909090909090908], [950.0, 10.2], [936.0, 10.363636363636362], [962.0, 8.90909090909091], [960.0, 10.272727272727273], [974.0, 8.846153846153847], [972.0, 8.625], [970.0, 10.0], [964.0, 10.363636363636362], [966.0, 9.461538461538463], [976.0, 9.2], [990.0, 9.727272727272727], [988.0, 9.916666666666668], [986.0, 9.666666666666668], [984.0, 9.307692307692308], [978.0, 8.222222222222221], [980.0, 8.333333333333334], [982.0, 9.11111111111111], [968.0, 8.700000000000001], [994.0, 9.499999999999998], [992.0, 10.0], [1006.0, 8.818181818181818], [1004.0, 8.66666666666667], [1002.0, 9.166666666666666], [996.0, 9.692307692307693], [998.0, 9.2], [1008.0, 9.23076923076923], [1022.0, 9.23076923076923], [1020.0, 10.4375], [1018.0, 9.631578947368421], [1016.0, 9.444444444444445], [1010.0, 10.90909090909091], [1012.0, 10.307692307692307], [1014.0, 9.909090909090908], [1000.0, 8.900000000000002], [1028.0, 9.333333333333334], [1024.0, 9.5], [1052.0, 9.000000000000002], [1048.0, 9.8125], [1044.0, 11.0], [1032.0, 20.400000000000002], [1036.0, 9.76923076923077], [1056.0, 10.1], [1084.0, 10.3], [1080.0, 10.153846153846155], [1076.0, 9.764705882352942], [1072.0, 9.142857142857142], [1060.0, 9.692307692307692], [1064.0, 12.0], [1068.0, 9.153846153846152], [1040.0, 9.11111111111111], [1092.0, 8.916666666666666], [1088.0, 9.066666666666665], [1116.0, 9.600000000000001], [1112.0, 9.53846153846154], [1108.0, 9.375], [1096.0, 9.214285714285714], [1100.0, 8.923076923076923], [1120.0, 9.230769230769232], [1148.0, 8.785714285714285], [1144.0, 9.4], [1140.0, 9.733333333333334], [1136.0, 8.181818181818183], [1124.0, 9.692307692307693], [1128.0, 8.916666666666666], [1132.0, 9.2], [1104.0, 9.083333333333332], [1156.0, 9.428571428571429], [1152.0, 8.7], [1180.0, 10.333333333333336], [1176.0, 9.35], [1172.0, 9.266666666666667], [1160.0, 9.866666666666667], [1164.0, 9.125], [1184.0, 9.357142857142858], [1212.0, 10.166666666666668], [1208.0, 10.1875], [1204.0, 10.076923076923078], [1200.0, 11.0], [1188.0, 9.555555555555555], [1192.0, 9.52941176470588], [1196.0, 10.235294117647058], [1168.0, 9.555555555555554], [1220.0, 10.0], [1216.0, 9.941176470588234], [1244.0, 10.2], [1240.0, 9.538461538461538], [1236.0, 10.000000000000002], [1224.0, 9.428571428571429], [1228.0, 8.818181818181818], [1248.0, 10.2], [1276.0, 9.833333333333332], [1272.0, 9.666666666666668], [1268.0, 9.375], [1264.0, 10.4], [1252.0, 9.6], [1256.0, 10.000000000000002], [1260.0, 11.5], [1232.0, 9.352941176470589], [1284.0, 10.0], [1280.0, 10.3125], [1308.0, 8.75], [1304.0, 9.333333333333334], [1300.0, 12.727272727272728], [1288.0, 9.454545454545455], [1292.0, 10.705882352941176], [1312.0, 9.705882352941174], [1340.0, 9.833333333333334], [1336.0, 9.066666666666668], [1332.0, 10.000000000000002], [1328.0, 9.30769230769231], [1316.0, 9.066666666666668], [1320.0, 9.222222222222221], [1324.0, 9.4375], [1296.0, 9.666666666666668], [1348.0, 10.200000000000001], [1344.0, 9.083333333333334], [1372.0, 9.705882352941176], [1368.0, 9.444444444444446], [1364.0, 9.888888888888891], [1352.0, 9.333333333333334], [1356.0, 9.923076923076923], [1376.0, 9.533333333333335], [1404.0, 10.666666666666666], [1400.0, 9.25], [1396.0, 9.578947368421051], [1392.0, 9.833333333333334], [1380.0, 10.150000000000002], [1384.0, 9.736842105263161], [1388.0, 11.0], [1360.0, 10.666666666666668], [1412.0, 10.777777777777777], [1408.0, 13.374999999999998], [1436.0, 10.6875], [1432.0, 10.30769230769231], [1428.0, 10.666666666666668], [1416.0, 10.428571428571429], [1420.0, 12.157894736842106], [1440.0, 9.8], [1468.0, 10.533333333333333], [1464.0, 10.470588235294118], [1460.0, 10.249999999999998], [1456.0, 10.44], [1444.0, 10.35294117647059], [1448.0, 10.4375], [1452.0, 10.294117647058824], [1424.0, 12.294117647058824], [1476.0, 10.142857142857144], [1472.0, 10.352941176470589], [1500.0, 9.684210526315793], [1496.0, 9.647058823529413], [1492.0, 13.363636363636365], [1480.0, 9.73684210526316], [1484.0, 9.578947368421053], [1504.0, 9.2], [1532.0, 10.055555555555555], [1528.0, 11.222222222222225], [1524.0, 9.833333333333332], [1520.0, 10.368421052631579], [1508.0, 9.5], [1512.0, 9.73684210526316], [1516.0, 10.100000000000001], [1488.0, 9.4375], [1540.0, 9.157894736842106], [1536.0, 9.47058823529412], [1564.0, 12.611111111111109], [1560.0, 12.250000000000002], [1556.0, 17.0], [1544.0, 10.222222222222223], [1548.0, 10.299999999999999], [1568.0, 15.277777777777779], [1596.0, 11.055555555555557], [1592.0, 10.190476190476188], [1588.0, 11.0], [1584.0, 12.9375], [1572.0, 11.380952380952383], [1576.0, 15.153846153846153], [1580.0, 11.73684210526316], [1552.0, 10.63636363636364], [1604.0, 9.416666666666668], [1600.0, 10.470588235294118], [1628.0, 9.315789473684212], [1624.0, 9.399999999999999], [1620.0, 9.294117647058824], [1608.0, 9.307692307692308], [1612.0, 9.529411764705884], [1632.0, 9.47058823529412], [1660.0, 9.1875], [1656.0, 10.294117647058822], [1652.0, 9.421052631578947], [1648.0, 10.15], [1636.0, 10.263157894736844], [1640.0, 10.65], [1644.0, 9.565217391304348], [1616.0, 9.761904761904763], [1664.0, 9.900000000000002], [1668.0, 10.444444444444445], [1672.0, 12.030558482613289], [1676.0, 11.25], [1029.0, 9.294117647058822], [1025.0, 9.727272727272728], [1053.0, 9.333333333333334], [1049.0, 9.272727272727273], [1045.0, 11.727272727272727], [1033.0, 10.529411764705882], [1037.0, 9.500000000000002], [1057.0, 10.25], [1085.0, 10.363636363636363], [1081.0, 9.454545454545455], [1077.0, 9.46153846153846], [1073.0, 9.083333333333334], [1061.0, 9.076923076923077], [1065.0, 9.75], [1069.0, 9.416666666666668], [1041.0, 9.411764705882353], [1093.0, 9.071428571428573], [1089.0, 9.666666666666666], [1117.0, 8.750000000000002], [1113.0, 8.769230769230768], [1109.0, 9.714285714285715], [1097.0, 9.285714285714286], [1101.0, 8.666666666666668], [1121.0, 9.461538461538462], [1149.0, 10.6], [1145.0, 9.142857142857142], [1141.0, 8.909090909090908], [1137.0, 8.666666666666666], [1125.0, 9.0], [1129.0, 9.23076923076923], [1133.0, 9.357142857142856], [1105.0, 9.307692307692308], [1157.0, 9.181818181818182], [1153.0, 8.875], [1181.0, 9.647058823529411], [1177.0, 8.76923076923077], [1173.0, 8.692307692307693], [1161.0, 9.307692307692308], [1165.0, 9.35294117647059], [1185.0, 10.095238095238097], [1213.0, 9.705882352941176], [1209.0, 9.941176470588237], [1205.0, 9.842105263157897], [1201.0, 12.076923076923077], [1189.0, 9.23076923076923], [1193.0, 9.26666666666667], [1197.0, 9.166666666666666], [1169.0, 9.285714285714286], [1221.0, 10.153846153846153], [1217.0, 9.42857142857143], [1245.0, 9.53846153846154], [1241.0, 16.2], [1237.0, 10.812500000000002], [1225.0, 9.785714285714286], [1229.0, 9.428571428571429], [1249.0, 9.600000000000001], [1277.0, 9.923076923076923], [1273.0, 9.533333333333335], [1269.0, 9.166666666666668], [1265.0, 9.142857142857144], [1253.0, 9.4375], [1257.0, 9.461538461538462], [1261.0, 12.777777777777779], [1233.0, 9.357142857142856], [1285.0, 9.75], [1281.0, 9.5625], [1309.0, 10.076923076923077], [1305.0, 9.95], [1301.0, 10.0], [1289.0, 10.333333333333334], [1293.0, 10.538461538461537], [1313.0, 9.800000000000002], [1341.0, 9.466666666666669], [1337.0, 9.529411764705882], [1333.0, 9.400000000000002], [1329.0, 9.894736842105264], [1317.0, 9.846153846153847], [1321.0, 9.181818181818182], [1325.0, 9.769230769230768], [1297.0, 9.166666666666668], [1349.0, 9.823529411764707], [1345.0, 10.0], [1373.0, 9.588235294117645], [1369.0, 9.411764705882355], [1365.0, 10.076923076923077], [1353.0, 9.8], [1357.0, 9.933333333333334], [1377.0, 9.842105263157897], [1405.0, 9.77777777777778], [1401.0, 9.944444444444446], [1397.0, 9.857142857142858], [1393.0, 10.066666666666666], [1381.0, 10.571428571428573], [1385.0, 10.25], [1389.0, 10.8], [1361.0, 9.875000000000002], [1413.0, 9.294117647058826], [1409.0, 10.533333333333335], [1437.0, 9.285714285714286], [1433.0, 10.176470588235295], [1429.0, 12.187499999999998], [1417.0, 12.600000000000001], [1421.0, 12.538461538461538], [1441.0, 10.6], [1469.0, 9.578947368421053], [1465.0, 11.5], [1461.0, 10.428571428571429], [1457.0, 9.9], [1445.0, 9.761904761904761], [1449.0, 10.117647058823529], [1453.0, 10.666666666666668], [1425.0, 14.333333333333334], [1477.0, 10.772727272727272], [1473.0, 9.666666666666668], [1501.0, 9.23529411764706], [1497.0, 9.73684210526316], [1493.0, 21.166666666666668], [1481.0, 10.333333333333334], [1485.0, 10.0], [1505.0, 9.823529411764707], [1533.0, 9.8125], [1529.0, 11.473684210526315], [1525.0, 9.611111111111114], [1521.0, 10.200000000000001], [1509.0, 9.533333333333335], [1513.0, 9.950000000000001], [1517.0, 10.470588235294118], [1489.0, 10.055555555555555], [1541.0, 9.4], [1537.0, 10.055555555555555], [1565.0, 14.071428571428571], [1561.0, 12.125000000000004], [1557.0, 12.045454545454545], [1545.0, 10.105263157894736], [1549.0, 10.200000000000001], [1569.0, 12.111111111111112], [1597.0, 13.4], [1593.0, 10.0], [1589.0, 9.842105263157897], [1585.0, 12.055555555555555], [1573.0, 12.11111111111111], [1577.0, 12.25925925925926], [1581.0, 13.588235294117645], [1553.0, 16.88888888888889], [1605.0, 9.818181818181818], [1601.0, 10.333333333333334], [1629.0, 8.789473684210526], [1625.0, 10.176470588235295], [1621.0, 10.04761904761905], [1609.0, 9.750000000000002], [1613.0, 9.25], [1633.0, 11.5], [1661.0, 11.724137931034484], [1657.0, 9.882352941176473], [1653.0, 12.81818181818182], [1649.0, 9.312500000000002], [1637.0, 9.857142857142856], [1641.0, 9.619047619047622], [1645.0, 9.625000000000002], [1617.0, 9.421052631578949], [1665.0, 9.608695652173914], [1669.0, 9.3860103626943], [1673.0, 11.111111111111109], [1677.0, 12.333333333333334], [515.0, 8.857142857142856], [513.0, 9.0], [527.0, 8.833333333333334], [525.0, 9.166666666666666], [523.0, 8.5], [517.0, 8.857142857142858], [519.0, 8.857142857142858], [537.0, 8.714285714285715], [539.0, 10.875], [541.0, 9.125], [543.0, 9.142857142857142], [529.0, 8.75], [531.0, 9.125], [533.0, 9.428571428571429], [535.0, 8.75], [521.0, 9.142857142857142], [547.0, 9.25], [559.0, 8.666666666666666], [557.0, 9.0], [555.0, 9.285714285714285], [545.0, 8.714285714285715], [549.0, 9.0], [551.0, 9.25], [575.0, 8.714285714285714], [573.0, 8.888888888888888], [571.0, 8.666666666666668], [569.0, 9.714285714285714], [561.0, 9.166666666666666], [563.0, 9.0], [565.0, 9.0], [567.0, 9.11111111111111], [553.0, 8.5], [579.0, 9.25], [591.0, 9.6], [589.0, 9.166666666666666], [587.0, 9.5], [577.0, 9.285714285714285], [581.0, 8.857142857142858], [583.0, 9.25], [593.0, 9.25], [607.0, 9.0], [605.0, 9.571428571428571], [603.0, 9.5], [601.0, 9.444444444444445], [595.0, 8.5], [597.0, 9.142857142857142], [599.0, 9.833333333333332], [585.0, 8.857142857142858], [611.0, 8.857142857142856], [623.0, 9.222222222222221], [621.0, 9.0], [619.0, 8.6], [609.0, 9.222222222222221], [613.0, 9.285714285714285], [615.0, 9.499999999999998], [639.0, 9.428571428571429], [637.0, 8.857142857142858], [635.0, 9.2], [633.0, 9.571428571428571], [625.0, 9.0], [627.0, 9.666666666666666], [629.0, 9.222222222222221], [631.0, 9.571428571428571], [617.0, 9.142857142857142], [645.0, 9.571428571428571], [641.0, 9.0], [655.0, 9.285714285714285], [653.0, 9.428571428571429], [651.0, 9.0], [643.0, 8.428571428571427], [647.0, 9.333333333333334], [665.0, 8.857142857142856], [667.0, 8.875], [669.0, 9.0], [671.0, 8.666666666666666], [657.0, 9.142857142857142], [659.0, 8.75], [661.0, 8.571428571428573], [663.0, 9.0], [649.0, 8.857142857142858], [675.0, 9.666666666666668], [687.0, 9.333333333333334], [685.0, 9.0], [683.0, 10.85714285714286], [673.0, 9.11111111111111], [677.0, 9.583333333333334], [679.0, 9.23076923076923], [703.0, 9.555555555555555], [701.0, 9.25], [699.0, 9.799999999999999], [697.0, 9.777777777777779], [689.0, 9.2], [691.0, 9.333333333333334], [693.0, 9.5], [695.0, 9.454545454545453], [681.0, 9.125], [707.0, 9.166666666666666], [719.0, 8.875], [717.0, 9.375], [715.0, 9.799999999999999], [705.0, 9.25], [709.0, 10.0], [711.0, 10.222222222222221], [735.0, 9.777777777777779], [733.0, 9.333333333333334], [731.0, 9.666666666666666], [729.0, 9.333333333333334], [721.0, 9.333333333333334], [723.0, 9.166666666666668], [725.0, 9.0], [727.0, 9.285714285714285], [713.0, 9.285714285714285], [739.0, 9.666666666666664], [751.0, 9.818181818181818], [749.0, 10.5], [747.0, 10.11111111111111], [737.0, 9.3], [741.0, 9.000000000000002], [743.0, 9.666666666666666], [767.0, 9.833333333333334], [765.0, 10.099999999999998], [763.0, 9.25], [761.0, 10.142857142857142], [753.0, 11.818181818181818], [755.0, 9.727272727272727], [757.0, 9.384615384615385], [759.0, 9.1], [745.0, 9.333333333333332], [771.0, 9.4], [783.0, 10.25], [781.0, 9.222222222222221], [779.0, 9.5], [769.0, 9.75], [773.0, 9.1], [775.0, 9.625], [799.0, 9.444444444444445], [797.0, 9.777777777777779], [795.0, 10.5], [793.0, 9.222222222222221], [785.0, 9.363636363636365], [787.0, 9.25], [789.0, 9.11111111111111], [791.0, 9.555555555555555], [777.0, 9.111111111111109], [803.0, 9.76923076923077], [815.0, 9.555555555555557], [813.0, 10.4], [811.0, 8.88888888888889], [801.0, 9.222222222222221], [805.0, 8.88888888888889], [807.0, 9.11111111111111], [831.0, 9.0], [829.0, 9.6], [827.0, 9.0], [825.0, 14.071428571428571], [817.0, 9.777777777777779], [819.0, 8.846153846153845], [821.0, 9.666666666666666], [823.0, 9.125], [809.0, 9.333333333333334], [835.0, 8.999999999999998], [847.0, 9.125000000000002], [845.0, 10.333333333333334], [843.0, 11.272727272727273], [833.0, 9.0], [837.0, 8.899999999999999], [839.0, 9.666666666666666], [863.0, 9.363636363636363], [861.0, 8.916666666666668], [859.0, 9.142857142857144], [857.0, 9.1], [849.0, 8.6], [851.0, 9.0], [853.0, 8.777777777777779], [855.0, 8.875], [841.0, 9.5], [867.0, 9.083333333333336], [879.0, 10.0], [877.0, 10.555555555555554], [875.0, 9.875], [865.0, 9.818181818181818], [869.0, 9.9], [871.0, 9.666666666666666], [895.0, 9.5], [893.0, 9.833333333333334], [891.0, 10.125], [889.0, 9.555555555555555], [881.0, 9.666666666666668], [883.0, 10.0], [885.0, 9.857142857142858], [887.0, 9.363636363636365], [873.0, 9.636363636363635], [899.0, 10.181818181818182], [911.0, 9.444444444444443], [909.0, 11.266666666666667], [907.0, 10.11111111111111], [897.0, 9.666666666666666], [901.0, 9.666666666666668], [903.0, 10.555555555555555], [927.0, 9.6], [925.0, 10.299999999999999], [923.0, 12.0], [921.0, 10.4], [913.0, 10.384615384615385], [915.0, 10.23076923076923], [917.0, 9.5], [919.0, 10.272727272727272], [905.0, 10.272727272727272], [931.0, 9.363636363636363], [943.0, 10.0], [941.0, 9.916666666666666], [939.0, 10.272727272727273], [929.0, 10.25], [933.0, 9.75], [935.0, 10.0], [959.0, 10.299999999999999], [957.0, 10.0], [955.0, 10.399999999999999], [953.0, 11.25], [945.0, 10.4], [947.0, 9.444444444444446], [949.0, 10.416666666666668], [951.0, 9.928571428571429], [937.0, 9.909090909090908], [963.0, 9.5], [975.0, 9.250000000000002], [973.0, 9.8], [971.0, 10.25], [961.0, 10.0], [965.0, 10.11111111111111], [967.0, 8.727272727272728], [991.0, 11.0], [989.0, 9.545454545454545], [987.0, 9.666666666666666], [985.0, 9.4], [977.0, 8.76923076923077], [979.0, 9.166666666666668], [981.0, 8.785714285714285], [983.0, 9.142857142857144], [969.0, 8.88888888888889], [995.0, 9.2], [1007.0, 9.499999999999998], [1005.0, 9.0], [1003.0, 9.083333333333334], [993.0, 10.499999999999998], [997.0, 9.600000000000001], [999.0, 8.666666666666666], [1023.0, 9.538461538461538], [1021.0, 9.416666666666666], [1019.0, 9.571428571428573], [1017.0, 9.5], [1009.0, 9.277777777777777], [1011.0, 9.571428571428571], [1013.0, 9.874999999999998], [1015.0, 9.937499999999998], [1001.0, 9.125], [1030.0, 9.818181818181818], [1054.0, 9.941176470588237], [1050.0, 9.416666666666666], [1046.0, 10.166666666666666], [1026.0, 9.4], [1034.0, 9.2], [1038.0, 9.75], [1086.0, 12.23076923076923], [1082.0, 9.733333333333334], [1078.0, 9.499999999999998], [1074.0, 8.72727272727273], [1058.0, 11.26666666666667], [1062.0, 9.11111111111111], [1066.0, 11.4], [1070.0, 11.333333333333332], [1042.0, 9.428571428571429], [1094.0, 9.785714285714286], [1118.0, 9.5], [1114.0, 9.416666666666668], [1110.0, 9.538461538461538], [1090.0, 8.923076923076923], [1098.0, 8.454545454545457], [1102.0, 9.0], [1150.0, 9.923076923076922], [1146.0, 9.823529411764707], [1142.0, 9.733333333333333], [1138.0, 9.916666666666666], [1122.0, 9.375000000000002], [1126.0, 9.888888888888891], [1130.0, 9.307692307692307], [1134.0, 9.461538461538463], [1106.0, 9.461538461538462], [1158.0, 8.6], [1182.0, 10.133333333333335], [1178.0, 9.0], [1174.0, 9.538461538461538], [1154.0, 9.46153846153846], [1162.0, 8.928571428571429], [1166.0, 9.09090909090909], [1214.0, 10.333333333333334], [1210.0, 9.533333333333335], [1206.0, 9.153846153846152], [1202.0, 9.866666666666669], [1186.0, 10.0], [1190.0, 9.307692307692308], [1194.0, 9.769230769230768], [1198.0, 9.916666666666666], [1170.0, 8.8125], [1222.0, 10.157894736842108], [1246.0, 9.166666666666668], [1242.0, 9.25], [1238.0, 10.882352941176473], [1218.0, 9.428571428571429], [1226.0, 9.833333333333334], [1230.0, 9.066666666666668], [1278.0, 9.176470588235293], [1274.0, 9.176470588235293], [1270.0, 9.812500000000002], [1266.0, 9.500000000000002], [1250.0, 10.200000000000001], [1254.0, 9.769230769230768], [1258.0, 9.272727272727272], [1262.0, 10.0], [1234.0, 9.23529411764706], [1286.0, 9.428571428571427], [1310.0, 9.444444444444448], [1306.0, 9.733333333333333], [1302.0, 9.461538461538462], [1282.0, 9.818181818181818], [1290.0, 9.642857142857144], [1294.0, 10.062500000000002], [1342.0, 9.35294117647059], [1338.0, 9.000000000000002], [1334.0, 9.0], [1330.0, 9.8], [1314.0, 9.666666666666668], [1318.0, 10.0], [1322.0, 9.937500000000002], [1326.0, 9.333333333333332], [1298.0, 9.933333333333334], [1350.0, 9.75], [1374.0, 10.066666666666668], [1370.0, 10.200000000000001], [1366.0, 10.062500000000002], [1346.0, 10.3125], [1354.0, 10.0], [1358.0, 10.176470588235293], [1406.0, 10.809523809523812], [1402.0, 9.500000000000002], [1398.0, 9.578947368421053], [1394.0, 10.0], [1378.0, 9.600000000000001], [1382.0, 10.263157894736842], [1386.0, 11.166666666666668], [1390.0, 10.26666666666667], [1362.0, 9.529411764705882], [1414.0, 10.333333333333334], [1438.0, 9.750000000000002], [1434.0, 9.545454545454547], [1430.0, 12.782608695652176], [1410.0, 13.380952380952381], [1418.0, 11.7], [1422.0, 12.421052631578949], [1470.0, 9.571428571428573], [1466.0, 12.266666666666667], [1462.0, 11.529411764705884], [1458.0, 11.705882352941178], [1442.0, 12.000000000000002], [1446.0, 10.5], [1450.0, 9.944444444444443], [1454.0, 10.0], [1426.0, 14.352941176470587], [1478.0, 9.153846153846153], [1502.0, 9.944444444444445], [1498.0, 9.933333333333334], [1494.0, 14.61290322580645], [1474.0, 9.66666666666667], [1482.0, 9.266666666666667], [1486.0, 9.941176470588237], [1534.0, 10.166666666666666], [1530.0, 9.63157894736842], [1526.0, 9.272727272727272], [1522.0, 10.050000000000002], [1506.0, 9.499999999999998], [1510.0, 10.923076923076923], [1514.0, 10.352941176470587], [1518.0, 10.3], [1490.0, 9.529411764705884], [1542.0, 10.0], [1566.0, 13.285714285714285], [1562.0, 11.583333333333334], [1558.0, 11.777777777777777], [1538.0, 9.73684210526316], [1546.0, 9.772727272727273], [1550.0, 10.470588235294118], [1598.0, 10.562499999999998], [1594.0, 10.1875], [1590.0, 10.25], [1586.0, 12.142857142857146], [1570.0, 11.666666666666666], [1574.0, 13.57142857142857], [1578.0, 12.499999999999998], [1582.0, 13.25], [1554.0, 14.5625], [1606.0, 9.761904761904761], [1630.0, 9.142857142857142], [1626.0, 9.833333333333334], [1622.0, 10.363636363636362], [1602.0, 9.761904761904761], [1610.0, 10.238095238095237], [1614.0, 9.608695652173916], [1662.0, 11.238095238095239], [1658.0, 10.083333333333332], [1654.0, 9.333333333333336], [1650.0, 9.85], [1634.0, 9.35], [1638.0, 9.200000000000001], [1642.0, 9.411764705882355], [1646.0, 9.800000000000004], [1618.0, 9.705882352941176], [1666.0, 9.625000000000002], [1670.0, 10.237416596489108], [1674.0, 12.0], [1031.0, 12.333333333333334], [1055.0, 10.11111111111111], [1051.0, 9.916666666666668], [1047.0, 9.727272727272727], [1027.0, 9.272727272727273], [1035.0, 9.636363636363637], [1039.0, 9.11111111111111], [1087.0, 10.857142857142858], [1083.0, 9.47058823529412], [1079.0, 9.571428571428573], [1075.0, 8.75], [1059.0, 9.733333333333333], [1063.0, 9.888888888888891], [1067.0, 9.937500000000004], [1071.0, 9.999999999999998], [1043.0, 9.769230769230768], [1095.0, 9.833333333333334], [1119.0, 8.72727272727273], [1115.0, 9.615384615384615], [1111.0, 9.0], [1091.0, 9.307692307692308], [1099.0, 9.2], [1103.0, 9.375], [1151.0, 9.500000000000002], [1147.0, 8.785714285714286], [1143.0, 9.0], [1139.0, 9.636363636363637], [1123.0, 9.363636363636363], [1127.0, 9.0], [1131.0, 9.200000000000001], [1135.0, 9.214285714285714], [1107.0, 8.3], [1159.0, 9.294117647058824], [1183.0, 9.533333333333335], [1179.0, 10.071428571428571], [1175.0, 9.500000000000002], [1155.0, 9.384615384615383], [1163.0, 9.769230769230768], [1167.0, 8.8125], [1215.0, 9.933333333333335], [1211.0, 10.3125], [1207.0, 9.90909090909091], [1203.0, 9.6875], [1187.0, 10.384615384615385], [1191.0, 10.705882352941176], [1195.0, 9.529411764705882], [1199.0, 10.066666666666665], [1171.0, 9.181818181818182], [1223.0, 9.142857142857142], [1247.0, 9.307692307692307], [1243.0, 10.0], [1239.0, 9.8], [1219.0, 9.625000000000002], [1227.0, 9.73684210526316], [1231.0, 9.538461538461538], [1279.0, 9.384615384615385], [1275.0, 9.933333333333335], [1271.0, 9.428571428571429], [1267.0, 9.357142857142858], [1251.0, 9.68421052631579], [1255.0, 12.705882352941174], [1259.0, 10.714285714285714], [1263.0, 9.76923076923077], [1235.0, 9.615384615384615], [1287.0, 9.437500000000002], [1311.0, 9.571428571428571], [1307.0, 9.705882352941176], [1303.0, 10.736842105263158], [1283.0, 13.058823529411766], [1291.0, 10.571428571428573], [1295.0, 9.777777777777779], [1343.0, 9.88], [1339.0, 9.384615384615383], [1335.0, 10.133333333333335], [1331.0, 9.428571428571427], [1315.0, 8.642857142857142], [1319.0, 11.866666666666667], [1323.0, 9.466666666666667], [1327.0, 9.76923076923077], [1299.0, 9.700000000000001], [1351.0, 9.882352941176471], [1375.0, 9.350000000000001], [1371.0, 9.944444444444446], [1367.0, 10.25], [1347.0, 10.176470588235295], [1355.0, 9.750000000000002], [1359.0, 9.500000000000002], [1407.0, 14.307692307692307], [1403.0, 10.31578947368421], [1399.0, 9.352941176470589], [1395.0, 9.6], [1379.0, 10.8125], [1383.0, 10.600000000000001], [1387.0, 10.157894736842108], [1391.0, 10.529411764705882], [1363.0, 10.499999999999998], [1415.0, 9.875], [1439.0, 9.764705882352942], [1435.0, 9.642857142857144], [1431.0, 9.857142857142858], [1411.0, 11.235294117647058], [1419.0, 12.785714285714288], [1423.0, 12.45], [1471.0, 9.166666666666668], [1467.0, 10.100000000000001], [1463.0, 10.250000000000002], [1459.0, 10.736842105263161], [1443.0, 11.88888888888889], [1447.0, 10.733333333333333], [1451.0, 11.375], [1455.0, 10.571428571428571], [1427.0, 12.357142857142856], [1479.0, 10.0], [1503.0, 9.56], [1499.0, 9.625], [1495.0, 9.076923076923077], [1475.0, 9.4375], [1483.0, 9.294117647058824], [1487.0, 9.4375], [1535.0, 9.700000000000003], [1531.0, 11.15], [1527.0, 9.875000000000002], [1523.0, 10.157894736842103], [1507.0, 9.4375], [1511.0, 9.555555555555555], [1515.0, 10.142857142857144], [1519.0, 9.31578947368421], [1491.0, 9.941176470588236], [1543.0, 9.578947368421053], [1567.0, 13.40909090909091], [1563.0, 13.208333333333334], [1559.0, 11.761904761904763], [1539.0, 9.300000000000002], [1547.0, 9.411764705882353], [1551.0, 9.650000000000002], [1599.0, 9.526315789473683], [1595.0, 9.159999999999998], [1591.0, 9.75], [1587.0, 11.529411764705882], [1571.0, 11.733333333333333], [1575.0, 12.499999999999998], [1579.0, 12.31578947368421], [1583.0, 12.473684210526317], [1555.0, 20.25], [1607.0, 9.761904761904763], [1631.0, 9.588235294117649], [1627.0, 11.0], [1623.0, 10.0], [1603.0, 9.772727272727273], [1611.0, 9.5], [1615.0, 9.764705882352942], [1663.0, 9.75], [1659.0, 8.333333333333334], [1655.0, 9.200000000000001], [1651.0, 10.052631578947368], [1635.0, 9.9], [1639.0, 9.615384615384617], [1643.0, 9.588235294117647], [1647.0, 9.444444444444446], [1619.0, 9.894736842105264], [1667.0, 10.16666666666667], [1671.0, 11.558565440514004], [1675.0, 11.09090909090909], [1.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1577.1360699999998, 10.87532000000012]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1677.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1341.8333333333333, "minX": 1.70665482E12, "maxY": 9729612.2, "series": [{"data": [[1.70665488E12, 9491284.366666667], [1.70665506E12, 9729612.2], [1.70665494E12, 9727180.283333333], [1.70665512E12, 7424641.583333333], [1.70665482E12, 2303997.85], [1.706655E12, 9725721.133333333], [1.70665518E12, 235895.91666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70665488E12, 53988.73333333333], [1.70665506E12, 55344.4], [1.70665494E12, 55330.566666666666], [1.70665512E12, 42233.166666666664], [1.70665482E12, 13105.7], [1.706655E12, 55322.26666666667], [1.70665518E12, 1341.8333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9.91752577319588, "minX": 1.70665482E12, "maxY": 11.393512350107576, "series": [{"data": [[1.70665488E12, 11.393512350107576], [1.70665506E12, 10.847830433913186], [1.70665494E12, 11.159507975398816], [1.70665512E12, 10.094595479855924], [1.70665482E12, 9.936246569558811], [1.706655E12, 10.954590918183598], [1.70665518E12, 9.91752577319588]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9.837449862782346, "minX": 1.70665482E12, "maxY": 11.32079532643233, "series": [{"data": [[1.70665488E12, 11.32079532643233], [1.70665506E12, 10.783893221355708], [1.70665494E12, 11.089854492724672], [1.70665512E12, 10.03812643301673], [1.70665482E12, 9.837449862782346], [1.706655E12, 10.885877175435029], [1.70665518E12, 9.861855670103079]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70665482E12, "maxY": 0.10154105974245291, "series": [{"data": [[1.70665488E12, 0.015117351644972812], [1.70665506E12, 0.010147970405918767], [1.70665494E12, 0.015350767538376896], [1.70665512E12, 0.0049132001310187], [1.70665482E12, 0.10154105974245291], [1.706655E12, 0.012502500500100015], [1.70665518E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.70665482E12, "maxY": 62.0, "series": [{"data": [[1.70665488E12, 62.0], [1.70665506E12, 36.0], [1.70665494E12, 47.0], [1.70665512E12, 39.0], [1.70665482E12, 58.0], [1.706655E12, 40.0], [1.70665518E12, 13.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70665488E12, 6.0], [1.70665506E12, 6.0], [1.70665494E12, 6.0], [1.70665512E12, 6.0], [1.70665482E12, 6.0], [1.706655E12, 6.0], [1.70665518E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70665488E12, 15.0], [1.70665506E12, 15.0], [1.70665494E12, 15.0], [1.70665512E12, 13.0], [1.70665482E12, 12.0], [1.706655E12, 15.0], [1.70665518E12, 12.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70665488E12, 21.0], [1.70665506E12, 19.0], [1.70665494E12, 20.0], [1.70665512E12, 17.0], [1.70665482E12, 16.0], [1.706655E12, 19.0], [1.70665518E12, 13.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70665488E12, 11.0], [1.70665506E12, 10.0], [1.70665494E12, 10.0], [1.70665512E12, 9.0], [1.70665482E12, 10.0], [1.706655E12, 10.0], [1.70665518E12, 10.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70665488E12, 16.0], [1.70665506E12, 16.0], [1.70665494E12, 16.0], [1.70665512E12, 14.0], [1.70665482E12, 13.0], [1.706655E12, 16.0], [1.70665518E12, 12.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 10.0, "maxY": 51.5, "series": [{"data": [[10.0, 51.5], [26.0, 12.0], [33.0, 9.0], [32.0, 11.0], [34.0, 11.0], [44.0, 8.0], [60.0, 9.0], [66.0, 9.0], [68.0, 9.0], [75.0, 8.0], [91.0, 8.0], [99.0, 9.0], [102.0, 9.0], [108.0, 9.0], [124.0, 9.0], [132.0, 9.0], [135.0, 9.0], [133.0, 9.0], [136.0, 9.0], [145.0, 9.0], [158.0, 9.0], [165.0, 10.0], [166.0, 10.0], [170.0, 10.0], [173.0, 9.0], [169.0, 10.0], [199.0, 10.0], [198.0, 10.0], [194.0, 9.0], [203.0, 10.0], [204.0, 10.0], [206.0, 10.0], [201.0, 9.0], [200.0, 10.0], [231.0, 10.0], [227.0, 9.0], [237.0, 9.0], [232.0, 9.0], [233.0, 9.0], [243.0, 10.0], [255.0, 8.0], [267.0, 10.0], [264.0, 9.0], [268.0, 11.0], [271.0, 11.0], [266.0, 9.0], [269.0, 9.0], [303.0, 11.0], [297.0, 11.0], [300.0, 11.0], [302.0, 10.0], [299.0, 9.0], [294.0, 9.0], [333.0, 11.0], [330.0, 11.0], [326.0, 10.0], [324.0, 9.0], [335.0, 10.0], [328.0, 11.0], [334.0, 11.0], [332.0, 10.0], [331.0, 11.0], [329.0, 12.0], [336.0, 11.0], [340.0, 10.0], [337.0, 9.0], [339.0, 10.0], [338.0, 10.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 10.0, "maxY": 48.0, "series": [{"data": [[10.0, 48.0], [26.0, 12.0], [33.0, 9.0], [32.0, 11.0], [34.0, 11.0], [44.0, 8.0], [60.0, 9.0], [66.0, 9.0], [68.0, 8.5], [75.0, 8.0], [91.0, 8.0], [99.0, 9.0], [102.0, 9.0], [108.0, 9.0], [124.0, 9.0], [132.0, 9.0], [135.0, 9.0], [133.0, 9.0], [136.0, 9.0], [145.0, 9.0], [158.0, 9.0], [165.0, 10.0], [166.0, 10.0], [170.0, 10.0], [173.0, 9.0], [169.0, 10.0], [199.0, 10.0], [198.0, 10.0], [194.0, 9.0], [203.0, 10.0], [204.0, 10.0], [206.0, 10.0], [201.0, 9.0], [200.0, 10.0], [231.0, 10.0], [227.0, 9.0], [237.0, 9.0], [232.0, 9.0], [233.0, 9.0], [243.0, 10.0], [255.0, 8.0], [267.0, 10.0], [264.0, 9.0], [268.0, 11.0], [271.0, 11.0], [266.0, 9.0], [269.0, 9.0], [303.0, 11.0], [297.0, 11.0], [300.0, 11.0], [302.0, 10.0], [299.0, 9.0], [294.0, 9.0], [333.0, 11.0], [330.0, 11.0], [326.0, 10.0], [324.0, 9.0], [335.0, 10.0], [328.0, 11.0], [334.0, 10.0], [332.0, 10.0], [331.0, 11.0], [329.0, 11.0], [336.0, 10.0], [340.0, 10.0], [337.0, 9.0], [339.0, 9.0], [338.0, 10.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.083333333333334, "minX": 1.70665482E12, "maxY": 333.4166666666667, "series": [{"data": [[1.70665488E12, 325.23333333333335], [1.70665506E12, 333.3333333333333], [1.70665494E12, 333.26666666666665], [1.70665512E12, 254.33333333333334], [1.70665482E12, 79.0], [1.706655E12, 333.4166666666667], [1.70665518E12, 8.083333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665518E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.083333333333334, "minX": 1.70665482E12, "maxY": 333.4, "series": [{"data": [[1.70665488E12, 325.23333333333335], [1.70665506E12, 333.4], [1.70665494E12, 333.31666666666666], [1.70665512E12, 254.41666666666666], [1.70665482E12, 78.95], [1.706655E12, 333.26666666666665], [1.70665518E12, 8.083333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.083333333333334, "minX": 1.70665482E12, "maxY": 333.4, "series": [{"data": [[1.70665488E12, 325.23333333333335], [1.70665506E12, 333.4], [1.70665494E12, 333.31666666666666], [1.70665512E12, 254.41666666666666], [1.70665482E12, 78.95], [1.706655E12, 333.26666666666665], [1.70665518E12, 8.083333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.083333333333334, "minX": 1.70665482E12, "maxY": 333.4, "series": [{"data": [[1.70665488E12, 325.23333333333335], [1.70665506E12, 333.4], [1.70665494E12, 333.31666666666666], [1.70665512E12, 254.41666666666666], [1.70665482E12, 78.95], [1.706655E12, 333.26666666666665], [1.70665518E12, 8.083333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

