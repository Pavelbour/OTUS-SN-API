/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 43.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 3.0], [43.7, 3.0], [43.8, 3.0], [43.9, 3.0], [44.0, 3.0], [44.1, 3.0], [44.2, 3.0], [44.3, 3.0], [44.4, 3.0], [44.5, 3.0], [44.6, 3.0], [44.7, 3.0], [44.8, 3.0], [44.9, 3.0], [45.0, 3.0], [45.1, 3.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 3.0], [50.0, 3.0], [50.1, 3.0], [50.2, 3.0], [50.3, 3.0], [50.4, 3.0], [50.5, 3.0], [50.6, 3.0], [50.7, 3.0], [50.8, 3.0], [50.9, 3.0], [51.0, 3.0], [51.1, 3.0], [51.2, 3.0], [51.3, 3.0], [51.4, 3.0], [51.5, 3.0], [51.6, 3.0], [51.7, 3.0], [51.8, 3.0], [51.9, 3.0], [52.0, 3.0], [52.1, 3.0], [52.2, 3.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 3.0], [52.9, 3.0], [53.0, 3.0], [53.1, 3.0], [53.2, 3.0], [53.3, 3.0], [53.4, 3.0], [53.5, 3.0], [53.6, 3.0], [53.7, 3.0], [53.8, 3.0], [53.9, 3.0], [54.0, 3.0], [54.1, 3.0], [54.2, 3.0], [54.3, 3.0], [54.4, 3.0], [54.5, 3.0], [54.6, 3.0], [54.7, 3.0], [54.8, 3.0], [54.9, 3.0], [55.0, 3.0], [55.1, 3.0], [55.2, 3.0], [55.3, 3.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 3.0], [55.8, 3.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 3.0], [58.9, 3.0], [59.0, 3.0], [59.1, 3.0], [59.2, 3.0], [59.3, 3.0], [59.4, 3.0], [59.5, 3.0], [59.6, 3.0], [59.7, 3.0], [59.8, 3.0], [59.9, 3.0], [60.0, 3.0], [60.1, 3.0], [60.2, 3.0], [60.3, 3.0], [60.4, 3.0], [60.5, 3.0], [60.6, 3.0], [60.7, 3.0], [60.8, 3.0], [60.9, 3.0], [61.0, 3.0], [61.1, 3.0], [61.2, 3.0], [61.3, 3.0], [61.4, 3.0], [61.5, 3.0], [61.6, 3.0], [61.7, 3.0], [61.8, 3.0], [61.9, 3.0], [62.0, 3.0], [62.1, 3.0], [62.2, 3.0], [62.3, 3.0], [62.4, 3.0], [62.5, 3.0], [62.6, 3.0], [62.7, 3.0], [62.8, 3.0], [62.9, 3.0], [63.0, 3.0], [63.1, 3.0], [63.2, 3.0], [63.3, 3.0], [63.4, 3.0], [63.5, 3.0], [63.6, 3.0], [63.7, 3.0], [63.8, 3.0], [63.9, 3.0], [64.0, 3.0], [64.1, 3.0], [64.2, 3.0], [64.3, 3.0], [64.4, 3.0], [64.5, 3.0], [64.6, 3.0], [64.7, 3.0], [64.8, 3.0], [64.9, 3.0], [65.0, 3.0], [65.1, 3.0], [65.2, 3.0], [65.3, 3.0], [65.4, 3.0], [65.5, 3.0], [65.6, 3.0], [65.7, 3.0], [65.8, 3.0], [65.9, 3.0], [66.0, 3.0], [66.1, 3.0], [66.2, 3.0], [66.3, 3.0], [66.4, 3.0], [66.5, 3.0], [66.6, 3.0], [66.7, 3.0], [66.8, 3.0], [66.9, 3.0], [67.0, 3.0], [67.1, 3.0], [67.2, 3.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 3.0], [67.7, 3.0], [67.8, 3.0], [67.9, 3.0], [68.0, 3.0], [68.1, 3.0], [68.2, 3.0], [68.3, 3.0], [68.4, 3.0], [68.5, 3.0], [68.6, 3.0], [68.7, 3.0], [68.8, 3.0], [68.9, 3.0], [69.0, 3.0], [69.1, 3.0], [69.2, 3.0], [69.3, 3.0], [69.4, 3.0], [69.5, 3.0], [69.6, 3.0], [69.7, 3.0], [69.8, 3.0], [69.9, 3.0], [70.0, 3.0], [70.1, 3.0], [70.2, 3.0], [70.3, 3.0], [70.4, 3.0], [70.5, 3.0], [70.6, 3.0], [70.7, 3.0], [70.8, 3.0], [70.9, 3.0], [71.0, 3.0], [71.1, 3.0], [71.2, 3.0], [71.3, 3.0], [71.4, 3.0], [71.5, 3.0], [71.6, 3.0], [71.7, 3.0], [71.8, 3.0], [71.9, 3.0], [72.0, 3.0], [72.1, 3.0], [72.2, 3.0], [72.3, 3.0], [72.4, 3.0], [72.5, 3.0], [72.6, 3.0], [72.7, 3.0], [72.8, 3.0], [72.9, 3.0], [73.0, 3.0], [73.1, 3.0], [73.2, 3.0], [73.3, 3.0], [73.4, 3.0], [73.5, 3.0], [73.6, 3.0], [73.7, 3.0], [73.8, 3.0], [73.9, 3.0], [74.0, 3.0], [74.1, 3.0], [74.2, 3.0], [74.3, 3.0], [74.4, 3.0], [74.5, 3.0], [74.6, 3.0], [74.7, 3.0], [74.8, 3.0], [74.9, 3.0], [75.0, 3.0], [75.1, 3.0], [75.2, 3.0], [75.3, 3.0], [75.4, 3.0], [75.5, 3.0], [75.6, 3.0], [75.7, 3.0], [75.8, 3.0], [75.9, 3.0], [76.0, 3.0], [76.1, 3.0], [76.2, 3.0], [76.3, 3.0], [76.4, 3.0], [76.5, 3.0], [76.6, 3.0], [76.7, 3.0], [76.8, 3.0], [76.9, 3.0], [77.0, 3.0], [77.1, 3.0], [77.2, 3.0], [77.3, 3.0], [77.4, 3.0], [77.5, 3.0], [77.6, 3.0], [77.7, 3.0], [77.8, 3.0], [77.9, 3.0], [78.0, 3.0], [78.1, 3.0], [78.2, 3.0], [78.3, 3.0], [78.4, 3.0], [78.5, 3.0], [78.6, 3.0], [78.7, 3.0], [78.8, 3.0], [78.9, 3.0], [79.0, 3.0], [79.1, 3.0], [79.2, 3.0], [79.3, 3.0], [79.4, 3.0], [79.5, 3.0], [79.6, 3.0], [79.7, 3.0], [79.8, 3.0], [79.9, 3.0], [80.0, 3.0], [80.1, 3.0], [80.2, 3.0], [80.3, 3.0], [80.4, 3.0], [80.5, 3.0], [80.6, 3.0], [80.7, 3.0], [80.8, 3.0], [80.9, 3.0], [81.0, 3.0], [81.1, 3.0], [81.2, 3.0], [81.3, 3.0], [81.4, 3.0], [81.5, 3.0], [81.6, 3.0], [81.7, 3.0], [81.8, 3.0], [81.9, 3.0], [82.0, 3.0], [82.1, 3.0], [82.2, 3.0], [82.3, 3.0], [82.4, 3.0], [82.5, 3.0], [82.6, 3.0], [82.7, 3.0], [82.8, 3.0], [82.9, 3.0], [83.0, 3.0], [83.1, 3.0], [83.2, 3.0], [83.3, 3.0], [83.4, 3.0], [83.5, 3.0], [83.6, 3.0], [83.7, 3.0], [83.8, 3.0], [83.9, 3.0], [84.0, 3.0], [84.1, 3.0], [84.2, 3.0], [84.3, 3.0], [84.4, 3.0], [84.5, 3.0], [84.6, 3.0], [84.7, 3.0], [84.8, 3.0], [84.9, 3.0], [85.0, 3.0], [85.1, 3.0], [85.2, 3.0], [85.3, 3.0], [85.4, 3.0], [85.5, 3.0], [85.6, 3.0], [85.7, 3.0], [85.8, 3.0], [85.9, 3.0], [86.0, 3.0], [86.1, 3.0], [86.2, 3.0], [86.3, 3.0], [86.4, 3.0], [86.5, 3.0], [86.6, 3.0], [86.7, 3.0], [86.8, 3.0], [86.9, 3.0], [87.0, 3.0], [87.1, 3.0], [87.2, 3.0], [87.3, 3.0], [87.4, 3.0], [87.5, 3.0], [87.6, 3.0], [87.7, 3.0], [87.8, 3.0], [87.9, 3.0], [88.0, 3.0], [88.1, 3.0], [88.2, 3.0], [88.3, 3.0], [88.4, 3.0], [88.5, 3.0], [88.6, 3.0], [88.7, 3.0], [88.8, 3.0], [88.9, 3.0], [89.0, 3.0], [89.1, 3.0], [89.2, 3.0], [89.3, 3.0], [89.4, 3.0], [89.5, 3.0], [89.6, 3.0], [89.7, 3.0], [89.8, 3.0], [89.9, 3.0], [90.0, 3.0], [90.1, 3.0], [90.2, 3.0], [90.3, 3.0], [90.4, 3.0], [90.5, 3.0], [90.6, 3.0], [90.7, 3.0], [90.8, 3.0], [90.9, 3.0], [91.0, 3.0], [91.1, 3.0], [91.2, 3.0], [91.3, 3.0], [91.4, 3.0], [91.5, 3.0], [91.6, 3.0], [91.7, 3.0], [91.8, 3.0], [91.9, 3.0], [92.0, 3.0], [92.1, 3.0], [92.2, 3.0], [92.3, 3.0], [92.4, 3.0], [92.5, 3.0], [92.6, 3.0], [92.7, 3.0], [92.8, 3.0], [92.9, 3.0], [93.0, 3.0], [93.1, 3.0], [93.2, 3.0], [93.3, 3.0], [93.4, 3.0], [93.5, 3.0], [93.6, 3.0], [93.7, 3.0], [93.8, 3.0], [93.9, 3.0], [94.0, 3.0], [94.1, 3.0], [94.2, 3.0], [94.3, 3.0], [94.4, 3.0], [94.5, 3.0], [94.6, 3.0], [94.7, 3.0], [94.8, 3.0], [94.9, 3.0], [95.0, 3.0], [95.1, 3.0], [95.2, 3.0], [95.3, 3.0], [95.4, 3.0], [95.5, 3.0], [95.6, 3.0], [95.7, 3.0], [95.8, 4.0], [95.9, 4.0], [96.0, 4.0], [96.1, 4.0], [96.2, 4.0], [96.3, 4.0], [96.4, 4.0], [96.5, 4.0], [96.6, 4.0], [96.7, 4.0], [96.8, 4.0], [96.9, 4.0], [97.0, 4.0], [97.1, 4.0], [97.2, 4.0], [97.3, 4.0], [97.4, 4.0], [97.5, 4.0], [97.6, 4.0], [97.7, 4.0], [97.8, 4.0], [97.9, 4.0], [98.0, 4.0], [98.1, 4.0], [98.2, 4.0], [98.3, 4.0], [98.4, 4.0], [98.5, 4.0], [98.6, 4.0], [98.7, 5.0], [98.8, 5.0], [98.9, 5.0], [99.0, 5.0], [99.1, 5.0], [99.2, 5.0], [99.3, 5.0], [99.4, 5.0], [99.5, 5.0], [99.6, 6.0], [99.7, 6.0], [99.8, 7.0], [99.9, 8.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 100000.0, "minX": 0.0, "maxY": 100000.0, "series": [{"data": [[0.0, 100000.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 100000.0, "series": [{"data": [[0.0, 100000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 480.22065063649325, "minX": 1.70665986E12, "maxY": 1668.545731707315, "series": [{"data": [[1.70666022E12, 480.22065063649325], [1.70666004E12, 1667.7468373418687], [1.70666016E12, 1509.8034649880135], [1.70665986E12, 637.372376769155], [1.70665998E12, 1668.545731707315], [1.70665992E12, 1564.382687034856], [1.7066601E12, 1667.7081145942664]], "isOverall": false, "label": "10000 Users 10 Requests", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70666022E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.1111111111111116, "minX": 1.0, "maxY": 29.22222222222222, "series": [{"data": [[2.0, 6.0], [3.0, 8.0], [4.0, 8.0], [5.0, 7.0], [6.0, 8.0], [7.0, 7.0], [8.0, 6.0], [9.0, 8.0], [10.0, 7.0], [11.0, 8.0], [12.0, 7.0], [13.0, 8.0], [14.0, 7.0], [15.0, 6.0], [16.0, 7.0], [17.0, 8.0], [18.0, 7.0], [19.0, 8.0], [20.0, 7.0], [21.0, 7.0], [22.0, 7.0], [23.0, 6.0], [24.0, 7.0], [25.0, 7.0], [26.0, 7.0], [27.0, 7.0], [28.0, 7.0], [29.0, 7.0], [30.0, 6.0], [31.0, 6.0], [33.0, 6.0], [32.0, 6.0], [35.0, 7.0], [34.0, 7.0], [37.0, 6.0], [36.0, 7.0], [39.0, 6.0], [38.0, 7.0], [41.0, 5.0], [40.0, 5.0], [43.0, 4.0], [42.0, 4.0], [45.0, 7.0], [44.0, 5.0], [47.0, 7.0], [46.0, 7.0], [49.0, 5.0], [48.0, 6.0], [51.0, 4.0], [50.0, 4.0], [53.0, 4.0], [52.0, 4.0], [55.0, 6.0], [54.0, 4.0], [57.0, 8.0], [56.0, 6.0], [59.0, 7.0], [58.0, 7.0], [61.0, 5.0], [60.0, 6.0], [63.0, 4.0], [62.0, 4.0], [67.0, 4.0], [66.0, 4.0], [65.0, 3.0], [64.0, 4.0], [71.0, 7.0], [70.0, 8.0], [69.0, 4.0], [68.0, 4.0], [75.0, 7.0], [74.0, 6.0], [73.0, 7.0], [72.0, 7.0], [79.0, 7.0], [78.0, 7.0], [77.0, 7.0], [76.0, 8.0], [83.0, 7.0], [82.0, 7.0], [81.0, 11.0], [80.0, 7.0], [87.0, 6.0], [86.0, 8.0], [85.0, 6.0], [84.0, 7.0], [91.0, 8.0], [90.0, 7.0], [89.0, 7.0], [88.0, 7.0], [95.0, 6.0], [94.0, 7.0], [93.0, 7.0], [92.0, 7.0], [99.0, 6.0], [98.0, 8.0], [97.0, 7.0], [96.0, 8.0], [103.0, 8.0], [102.0, 7.0], [101.0, 7.0], [100.0, 8.0], [107.0, 8.0], [106.0, 7.0], [105.0, 7.0], [104.0, 8.0], [111.0, 8.0], [110.0, 8.0], [109.0, 7.0], [108.0, 8.0], [115.0, 7.0], [114.0, 6.0], [113.0, 7.0], [112.0, 7.0], [119.0, 7.0], [118.0, 6.0], [117.0, 7.0], [116.0, 8.0], [123.0, 8.0], [122.0, 8.0], [121.0, 7.0], [120.0, 8.0], [127.0, 7.0], [126.0, 7.0], [125.0, 7.0], [124.0, 6.0], [135.0, 7.0], [134.0, 7.0], [133.0, 7.0], [132.0, 7.0], [131.0, 7.0], [130.0, 7.0], [129.0, 7.0], [128.0, 7.0], [143.0, 7.0], [142.0, 7.0], [141.0, 8.0], [140.0, 7.0], [139.0, 8.0], [138.0, 8.0], [137.0, 7.0], [136.0, 7.0], [151.0, 6.0], [150.0, 7.0], [149.0, 8.0], [148.0, 7.0], [147.0, 7.0], [146.0, 7.0], [145.0, 7.0], [144.0, 7.0], [159.0, 7.0], [158.0, 6.0], [157.0, 7.0], [156.0, 7.0], [155.0, 7.0], [154.0, 7.0], [153.0, 7.0], [152.0, 7.0], [167.0, 6.0], [166.0, 7.0], [165.0, 6.0], [164.0, 6.0], [163.0, 7.0], [162.0, 7.0], [161.0, 7.0], [160.0, 7.0], [173.0, 29.22222222222222], [174.0, 4.666666666666667], [175.0, 4.333333333333333], [172.0, 6.5], [171.0, 5.5], [170.0, 5.5], [169.0, 5.333333333333333], [168.0, 7.0], [176.0, 4.666666666666667], [177.0, 5.0], [178.0, 4.0], [179.0, 5.0], [180.0, 5.0], [181.0, 4.666666666666667], [182.0, 4.333333333333333], [183.0, 4.666666666666667], [184.0, 4.666666666666667], [185.0, 4.666666666666667], [186.0, 5.0], [187.0, 4.666666666666667], [188.0, 4.666666666666667], [189.0, 4.333333333333333], [190.0, 4.666666666666667], [191.0, 4.333333333333333], [192.0, 4.333333333333333], [193.0, 4.666666666666667], [195.0, 4.0], [196.0, 4.5], [197.0, 5.0], [198.0, 4.666666666666667], [199.0, 5.0], [194.0, 5.5], [200.0, 5.666666666666667], [201.0, 5.666666666666667], [202.0, 4.666666666666667], [203.0, 5.0], [204.0, 4.666666666666667], [205.0, 4.333333333333333], [206.0, 4.666666666666667], [207.0, 4.333333333333333], [208.0, 4.666666666666667], [209.0, 4.666666666666667], [210.0, 4.666666666666667], [211.0, 4.333333333333333], [212.0, 4.666666666666667], [213.0, 4.666666666666667], [214.0, 4.666666666666667], [215.0, 4.333333333333333], [216.0, 4.666666666666667], [217.0, 5.333333333333333], [218.0, 4.666666666666667], [219.0, 4.333333333333333], [220.0, 4.0], [221.0, 5.0], [223.0, 4.0], [222.0, 5.5], [224.0, 4.666666666666667], [225.0, 4.666666666666667], [226.0, 4.666666666666667], [227.0, 4.333333333333333], [228.0, 5.0], [229.0, 4.333333333333333], [230.0, 4.666666666666667], [231.0, 5.0], [232.0, 4.666666666666667], [233.0, 4.666666666666667], [234.0, 5.0], [235.0, 4.5], [236.0, 5.0], [237.0, 5.0], [238.0, 5.0], [239.0, 5.25], [240.0, 5.0], [241.0, 4.666666666666667], [242.0, 4.666666666666667], [243.0, 4.333333333333333], [244.0, 4.0], [245.0, 4.333333333333333], [246.0, 4.0], [247.0, 4.0], [248.0, 5.0], [249.0, 4.666666666666667], [250.0, 4.333333333333333], [251.0, 3.6666666666666665], [252.0, 3.3333333333333335], [253.0, 3.3333333333333335], [254.0, 3.6666666666666665], [255.0, 4.333333333333333], [257.0, 4.0], [256.0, 4.333333333333333], [258.0, 4.666666666666667], [259.0, 4.0], [260.0, 4.0], [261.0, 4.0], [262.0, 4.333333333333333], [263.0, 4.333333333333333], [264.0, 4.0], [270.0, 3.3333333333333335], [271.0, 4.0], [268.0, 3.3333333333333335], [269.0, 3.6666666666666665], [265.0, 4.25], [266.0, 4.0], [267.0, 3.6666666666666665], [273.0, 7.75], [272.0, 5.0], [274.0, 5.0], [275.0, 5.0], [276.0, 5.0], [277.0, 5.333333333333333], [278.0, 4.0], [279.0, 5.0], [280.0, 4.333333333333333], [286.0, 5.0], [287.0, 4.666666666666667], [284.0, 4.5], [285.0, 5.0], [281.0, 5.333333333333333], [283.0, 7.25], [282.0, 6.0], [289.0, 5.0], [288.0, 5.0], [290.0, 4.333333333333333], [291.0, 4.0], [292.0, 4.5], [293.0, 5.0], [294.0, 5.0], [295.0, 4.0], [296.0, 4.666666666666667], [302.0, 4.5], [303.0, 5.5], [300.0, 4.666666666666667], [301.0, 4.333333333333333], [297.0, 4.666666666666667], [298.0, 4.666666666666667], [299.0, 4.666666666666667], [305.0, 4.333333333333333], [304.0, 4.333333333333333], [306.0, 4.0], [307.0, 3.6666666666666665], [308.0, 3.3333333333333335], [309.0, 3.6666666666666665], [310.0, 3.0], [311.0, 2.6666666666666665], [312.0, 3.0], [318.0, 5.0], [319.0, 5.0], [316.0, 4.0], [317.0, 4.0], [313.0, 2.6666666666666665], [314.0, 3.6666666666666665], [315.0, 4.0], [321.0, 5.0], [320.0, 4.666666666666667], [322.0, 5.25], [323.0, 4.333333333333333], [324.0, 5.0], [325.0, 4.666666666666667], [326.0, 5.0], [327.0, 4.666666666666667], [328.0, 4.333333333333333], [334.0, 4.25], [335.0, 4.5], [332.0, 3.6666666666666665], [333.0, 3.6666666666666665], [329.0, 4.333333333333333], [330.0, 4.0], [331.0, 4.333333333333333], [337.0, 4.25], [336.0, 4.5], [338.0, 4.25], [339.0, 5.25], [340.0, 4.363636363636364], [341.0, 4.2], [342.0, 4.2], [343.0, 4.4], [344.0, 4.2], [350.0, 4.0], [351.0, 4.0], [348.0, 4.0], [349.0, 4.4], [345.0, 4.0], [346.0, 4.2], [347.0, 4.4], [353.0, 3.8], [352.0, 4.4], [354.0, 4.0], [355.0, 4.0], [356.0, 3.8], [357.0, 4.2], [358.0, 4.0], [359.0, 4.0], [360.0, 4.0], [366.0, 6.8], [367.0, 4.2], [364.0, 3.8], [365.0, 3.8], [361.0, 4.0], [362.0, 4.0], [363.0, 3.6], [369.0, 4.0], [368.0, 4.0], [370.0, 4.2], [371.0, 4.0], [372.0, 3.8], [373.0, 4.0], [374.0, 4.0], [375.0, 3.8], [376.0, 3.8], [382.0, 3.4], [383.0, 3.4], [380.0, 4.0], [381.0, 3.2], [377.0, 3.8], [378.0, 3.8], [379.0, 3.6], [385.0, 3.0], [384.0, 3.0], [386.0, 3.2], [387.0, 3.0], [388.0, 3.4], [389.0, 3.8], [390.0, 3.6], [391.0, 4.6], [392.0, 3.4], [398.0, 3.2], [399.0, 3.8], [396.0, 3.0], [397.0, 3.2], [393.0, 3.2], [394.0, 3.2], [395.0, 3.2], [401.0, 3.2], [400.0, 3.2], [402.0, 4.0], [403.0, 4.4], [404.0, 4.2], [405.0, 4.0], [406.0, 3.8], [407.0, 3.6], [408.0, 3.8], [414.0, 3.6], [415.0, 3.6], [412.0, 3.6], [413.0, 4.0], [409.0, 4.0], [410.0, 3.6], [411.0, 3.8], [417.0, 3.4], [416.0, 3.8], [418.0, 3.0], [419.0, 3.2], [420.0, 3.6], [421.0, 3.2], [422.0, 3.8], [423.0, 4.0], [424.0, 3.8], [430.0, 4.0], [431.0, 4.4], [428.0, 4.4], [429.0, 4.2], [425.0, 4.2], [426.0, 4.0], [427.0, 4.0], [433.0, 4.0], [432.0, 4.0], [434.0, 4.0], [435.0, 4.0], [436.0, 4.2], [437.0, 4.4], [438.0, 4.4], [439.0, 4.2], [440.0, 4.0], [446.0, 4.0], [447.0, 3.6], [444.0, 4.0], [445.0, 4.0], [441.0, 4.2], [442.0, 3.8], [443.0, 4.4], [449.0, 4.25], [448.0, 3.8], [450.0, 3.8333333333333335], [451.0, 4.0], [452.0, 3.8], [453.0, 4.0], [454.0, 4.0], [455.0, 3.8], [456.0, 7.75], [462.0, 4.2], [463.0, 4.2], [460.0, 3.8], [461.0, 4.2], [457.0, 4.0], [458.0, 3.5], [459.0, 3.8], [465.0, 5.2], [464.0, 4.2], [466.0, 4.2], [467.0, 4.0], [468.0, 3.8], [469.0, 4.2], [470.0, 4.0], [471.0, 3.8], [472.0, 3.6], [478.0, 3.8], [479.0, 3.6], [476.0, 4.0], [477.0, 3.8], [473.0, 4.0], [474.0, 4.4], [475.0, 4.0], [481.0, 3.4], [480.0, 3.8], [482.0, 3.4], [483.0, 3.4], [484.0, 3.4], [485.0, 2.8], [486.0, 3.2], [487.0, 2.8], [488.0, 2.8], [494.0, 4.0], [495.0, 4.2], [492.0, 4.4], [493.0, 4.2], [489.0, 3.6], [490.0, 5.2], [491.0, 4.2], [497.0, 3.6], [496.0, 3.8], [498.0, 4.0], [499.0, 4.0], [500.0, 3.4], [501.0, 3.833333333333333], [502.0, 3.666666666666667], [503.0, 3.833333333333333], [504.0, 3.666666666666667], [510.0, 3.5714285714285716], [511.0, 4.142857142857143], [508.0, 3.7142857142857144], [509.0, 3.428571428571429], [505.0, 4.0], [506.0, 3.833333333333333], [507.0, 3.9230769230769234], [514.0, 3.428571428571429], [512.0, 3.857142857142857], [526.0, 3.7142857142857144], [524.0, 3.857142857142857], [522.0, 3.5714285714285716], [516.0, 3.428571428571429], [518.0, 3.2857142857142856], [528.0, 4.0], [542.0, 3.7142857142857144], [540.0, 3.7142857142857144], [538.0, 3.428571428571429], [536.0, 3.9999999999999996], [530.0, 3.5714285714285716], [532.0, 3.5714285714285716], [534.0, 3.428571428571429], [520.0, 3.5714285714285716], [546.0, 3.142857142857143], [544.0, 4.142857142857143], [558.0, 3.428571428571429], [556.0, 3.5714285714285716], [554.0, 3.25], [548.0, 3.285714285714286], [550.0, 3.142857142857143], [560.0, 3.4285714285714284], [574.0, 3.0], [572.0, 3.5714285714285716], [570.0, 3.5714285714285716], [568.0, 3.2857142857142856], [562.0, 3.4285714285714284], [564.0, 3.7142857142857144], [566.0, 3.857142857142857], [552.0, 2.8571428571428568], [578.0, 3.5714285714285716], [576.0, 3.5714285714285716], [590.0, 3.8571428571428568], [588.0, 3.4285714285714284], [586.0, 3.285714285714286], [580.0, 3.428571428571429], [582.0, 3.285714285714286], [592.0, 3.428571428571429], [606.0, 3.7142857142857144], [604.0, 4.0], [602.0, 3.2857142857142856], [600.0, 3.0], [594.0, 3.714285714285714], [596.0, 3.428571428571429], [598.0, 3.5714285714285716], [584.0, 3.5714285714285716], [610.0, 3.8571428571428568], [608.0, 3.5714285714285716], [622.0, 3.857142857142857], [620.0, 3.428571428571429], [618.0, 3.5714285714285716], [612.0, 4.0], [614.0, 3.5714285714285716], [624.0, 3.6666666666666665], [638.0, 2.571428571428571], [636.0, 3.0], [634.0, 3.285714285714286], [632.0, 3.8571428571428568], [626.0, 3.0], [628.0, 3.375], [630.0, 3.7142857142857144], [616.0, 3.5714285714285716], [642.0, 2.857142857142857], [640.0, 3.285714285714286], [654.0, 3.7142857142857144], [652.0, 3.714285714285714], [650.0, 3.75], [644.0, 3.0], [646.0, 3.0], [656.0, 3.2857142857142856], [670.0, 3.2500000000000004], [668.0, 3.5555555555555554], [666.0, 3.1428571428571432], [664.0, 3.285714285714286], [658.0, 3.142857142857143], [660.0, 3.4285714285714284], [662.0, 3.5714285714285716], [648.0, 3.142857142857143], [674.0, 4.866666666666668], [672.0, 3.7499999999999996], [686.0, 3.2222222222222223], [684.0, 3.4444444444444446], [682.0, 3.333333333333334], [676.0, 2.9999999999999996], [678.0, 3.4000000000000004], [688.0, 3.111111111111111], [702.0, 3.2222222222222223], [700.0, 3.4444444444444446], [698.0, 3.3333333333333335], [696.0, 3.4444444444444446], [690.0, 3.2222222222222223], [692.0, 3.4444444444444446], [694.0, 3.111111111111111], [680.0, 3.25], [706.0, 3.111111111111111], [704.0, 3.5555555555555554], [718.0, 2.9999999999999996], [716.0, 2.6666666666666665], [714.0, 3.111111111111111], [708.0, 3.2222222222222223], [710.0, 3.3333333333333335], [720.0, 2.7777777777777772], [734.0, 3.1111111111111107], [732.0, 2.8888888888888884], [730.0, 3.0], [728.0, 2.9999999999999996], [722.0, 3.111111111111111], [724.0, 3.5999999999999996], [726.0, 3.111111111111111], [712.0, 3.2222222222222223], [738.0, 3.111111111111111], [736.0, 3.4444444444444446], [750.0, 3.111111111111111], [748.0, 3.111111111111111], [746.0, 3.0], [740.0, 3.5555555555555554], [742.0, 3.2222222222222223], [752.0, 2.7777777777777777], [766.0, 3.5555555555555554], [764.0, 3.5555555555555554], [762.0, 2.5555555555555554], [760.0, 2.6666666666666665], [754.0, 2.8888888888888884], [756.0, 2.7777777777777777], [758.0, 2.8888888888888884], [744.0, 3.1111111111111107], [770.0, 3.333333333333334], [768.0, 3.111111111111111], [782.0, 2.9999999999999996], [780.0, 3.2222222222222223], [778.0, 3.3333333333333335], [772.0, 3.5555555555555554], [774.0, 3.2222222222222223], [784.0, 3.2222222222222223], [798.0, 3.5555555555555554], [796.0, 3.6666666666666665], [794.0, 3.4444444444444446], [792.0, 3.4444444444444446], [786.0, 3.2222222222222223], [788.0, 3.0], [790.0, 3.111111111111111], [776.0, 2.888888888888889], [802.0, 3.111111111111111], [800.0, 3.5555555555555554], [814.0, 3.375], [812.0, 3.3333333333333335], [810.0, 3.222222222222222], [804.0, 3.2222222222222223], [806.0, 3.2222222222222223], [816.0, 3.3333333333333335], [830.0, 3.333333333333334], [828.0, 3.2222222222222223], [826.0, 3.4444444444444446], [824.0, 3.4444444444444446], [818.0, 3.111111111111111], [820.0, 3.3333333333333335], [822.0, 3.0], [808.0, 3.4444444444444446], [834.0, 3.0], [832.0, 3.2222222222222223], [846.0, 3.1666666666666665], [844.0, 3.0999999999999996], [842.0, 3.25], [836.0, 3.1999999999999997], [838.0, 3.0], [848.0, 2.727272727272727], [862.0, 2.9090909090909087], [860.0, 3.0909090909090904], [858.0, 3.1818181818181817], [856.0, 3.3636363636363638], [850.0, 3.0909090909090904], [852.0, 3.272727272727273], [854.0, 3.181818181818182], [840.0, 3.1], [866.0, 2.8], [864.0, 3.2500000000000004], [878.0, 2.833333333333333], [876.0, 3.090909090909091], [874.0, 3.0909090909090904], [868.0, 2.9999999999999996], [870.0, 2.727272727272727], [880.0, 2.833333333333333], [894.0, 3.090909090909091], [892.0, 3.3636363636363638], [890.0, 3.5000000000000004], [888.0, 2.909090909090909], [882.0, 2.727272727272727], [884.0, 2.545454545454545], [886.0, 2.454545454545455], [872.0, 2.7272727272727266], [898.0, 3.1818181818181817], [896.0, 3.272727272727273], [910.0, 3.181818181818182], [908.0, 3.3000000000000003], [906.0, 3.1], [900.0, 3.416666666666667], [902.0, 3.1], [912.0, 2.909090909090909], [926.0, 3.181818181818182], [924.0, 3.7499999999999996], [922.0, 3.0], [920.0, 3.181818181818182], [914.0, 3.0909090909090904], [916.0, 2.9999999999999996], [918.0, 2.9090909090909087], [904.0, 2.818181818181818], [930.0, 3.2307692307692317], [928.0, 3.1000000000000005], [942.0, 3.3000000000000003], [940.0, 3.083333333333333], [938.0, 3.0], [932.0, 2.9999999999999996], [934.0, 3.090909090909091], [944.0, 3.181818181818182], [958.0, 3.0909090909090904], [956.0, 3.1999999999999997], [954.0, 3.0909090909090904], [952.0, 3.0], [946.0, 3.0], [948.0, 2.6999999999999997], [950.0, 3.0], [936.0, 2.9166666666666665], [962.0, 3.454545454545455], [960.0, 3.2], [974.0, 3.3636363636363638], [972.0, 2.6363636363636362], [970.0, 2.727272727272727], [964.0, 3.1818181818181825], [966.0, 3.0909090909090913], [976.0, 2.75], [990.0, 3.181818181818182], [988.0, 3.083333333333333], [986.0, 3.1666666666666665], [984.0, 3.0], [978.0, 2.9090909090909087], [980.0, 2.454545454545455], [982.0, 3.3], [968.0, 3.181818181818182], [994.0, 3.2500000000000004], [992.0, 2.9999999999999996], [1006.0, 3.0], [1004.0, 2.916666666666667], [1002.0, 3.1666666666666674], [996.0, 3.0999999999999996], [998.0, 2.916666666666667], [1008.0, 3.0], [1022.0, 3.1666666666666665], [1020.0, 2.769230769230769], [1018.0, 3.230769230769231], [1016.0, 2.923076923076923], [1010.0, 2.923076923076923], [1012.0, 2.9999999999999996], [1014.0, 3.769230769230769], [1000.0, 3.0], [1028.0, 3.0], [1024.0, 3.857142857142857], [1052.0, 2.4615384615384617], [1048.0, 2.846153846153846], [1044.0, 2.7857142857142856], [1032.0, 2.692307692307692], [1036.0, 3.0], [1056.0, 2.8461538461538454], [1084.0, 3.083333333333333], [1080.0, 2.9230769230769225], [1076.0, 2.9230769230769234], [1072.0, 2.846153846153846], [1060.0, 2.785714285714285], [1064.0, 2.846153846153846], [1068.0, 2.727272727272727], [1040.0, 3.0769230769230766], [1092.0, 3.0769230769230766], [1088.0, 2.9166666666666665], [1116.0, 2.9999999999999996], [1112.0, 2.8461538461538454], [1108.0, 3.230769230769231], [1096.0, 2.923076923076923], [1100.0, 2.769230769230769], [1120.0, 2.9166666666666665], [1148.0, 3.5384615384615388], [1144.0, 2.846153846153846], [1140.0, 2.846153846153846], [1136.0, 2.846153846153846], [1124.0, 3.0], [1128.0, 3.1538461538461537], [1132.0, 2.833333333333333], [1104.0, 2.9999999999999996], [1156.0, 3.0769230769230766], [1152.0, 2.923076923076923], [1180.0, 2.9166666666666665], [1176.0, 3.0666666666666664], [1172.0, 3.2352941176470584], [1160.0, 3.0833333333333335], [1164.0, 3.0000000000000004], [1184.0, 2.733333333333333], [1212.0, 3.0], [1208.0, 2.8], [1204.0, 2.8666666666666663], [1200.0, 2.8], [1188.0, 2.933333333333333], [1192.0, 3.0], [1196.0, 3.0], [1168.0, 3.0714285714285716], [1220.0, 2.5333333333333337], [1216.0, 2.7333333333333334], [1244.0, 2.933333333333333], [1240.0, 2.7857142857142847], [1236.0, 2.9285714285714284], [1224.0, 3.3333333333333335], [1228.0, 2.714285714285714], [1248.0, 2.75], [1276.0, 2.785714285714285], [1272.0, 2.8], [1268.0, 2.8], [1264.0, 2.8], [1252.0, 2.733333333333333], [1256.0, 2.9411764705882355], [1260.0, 2.9166666666666665], [1232.0, 3.1333333333333333], [1284.0, 2.6], [1280.0, 2.9375], [1308.0, 2.9333333333333336], [1304.0, 2.6666666666666665], [1300.0, 2.9999999999999996], [1288.0, 2.6666666666666665], [1292.0, 2.5624999999999996], [1312.0, 2.733333333333333], [1340.0, 2.75], [1336.0, 2.9411764705882355], [1332.0, 3.0666666666666664], [1328.0, 2.7999999999999994], [1316.0, 2.9375], [1320.0, 2.7333333333333334], [1324.0, 2.8], [1296.0, 2.533333333333333], [1348.0, 2.823529411764706], [1344.0, 2.588235294117647], [1372.0, 2.705882352941176], [1368.0, 2.9411764705882355], [1364.0, 2.4117647058823533], [1352.0, 2.4705882352941178], [1356.0, 2.6470588235294112], [1376.0, 2.833333333333333], [1404.0, 2.4705882352941178], [1400.0, 2.411764705882353], [1396.0, 2.6470588235294117], [1392.0, 2.5882352941176467], [1380.0, 2.764705882352941], [1384.0, 2.5], [1388.0, 2.736842105263158], [1360.0, 2.529411764705882], [1412.0, 2.705882352941176], [1408.0, 2.7647058823529407], [1436.0, 2.529411764705882], [1432.0, 2.5294117647058822], [1428.0, 2.7272727272727266], [1416.0, 2.411764705882353], [1420.0, 2.823529411764705], [1440.0, 2.294117647058824], [1468.0, 2.733333333333333], [1464.0, 2.88235294117647], [1460.0, 2.588235294117647], [1456.0, 2.5625], [1444.0, 2.411764705882353], [1448.0, 2.7058823529411766], [1452.0, 2.5294117647058822], [1424.0, 3.1176470588235294], [1476.0, 2.705882352941176], [1472.0, 2.6470588235294112], [1500.0, 2.5882352941176476], [1496.0, 2.764705882352941], [1492.0, 2.7647058823529402], [1480.0, 2.764705882352941], [1484.0, 2.6666666666666665], [1504.0, 2.4736842105263155], [1532.0, 2.578947368421053], [1528.0, 2.578947368421052], [1524.0, 2.578947368421052], [1520.0, 2.6842105263157894], [1508.0, 2.5200000000000005], [1512.0, 2.6470588235294117], [1516.0, 2.3684210526315788], [1488.0, 2.5294117647058822], [1540.0, 2.5500000000000003], [1536.0, 2.6499999999999995], [1564.0, 2.473684210526316], [1560.0, 2.6315789473684212], [1556.0, 2.5], [1544.0, 2.631578947368421], [1548.0, 2.6315789473684217], [1568.0, 2.4999999999999996], [1596.0, 2.6315789473684204], [1592.0, 2.7368421052631575], [1588.0, 2.9499999999999997], [1584.0, 2.5], [1572.0, 2.55], [1576.0, 2.4000000000000004], [1580.0, 2.5], [1552.0, 2.55], [1604.0, 2.6842105263157894], [1600.0, 2.6111111111111107], [1628.0, 2.631578947368421], [1624.0, 2.55], [1620.0, 2.5999999999999996], [1608.0, 2.4736842105263164], [1612.0, 2.5454545454545454], [1632.0, 2.526315789473684], [1660.0, 2.5], [1656.0, 2.5294117647058822], [1652.0, 2.4444444444444446], [1648.0, 2.722222222222222], [1636.0, 2.7619047619047623], [1640.0, 2.428571428571429], [1644.0, 2.4736842105263164], [1616.0, 2.5263157894736836], [1664.0, 2.5263157894736836], [1668.0, 2.6016724183700415], [1672.0, 2.4444444444444446], [1029.0, 2.9999999999999996], [1025.0, 2.846153846153846], [1053.0, 2.5384615384615383], [1049.0, 2.5384615384615383], [1045.0, 2.692307692307692], [1033.0, 2.727272727272727], [1037.0, 2.769230769230769], [1057.0, 2.9999999999999996], [1085.0, 3.428571428571429], [1081.0, 3.153846153846154], [1077.0, 2.8461538461538454], [1073.0, 3.1538461538461533], [1061.0, 2.769230769230769], [1065.0, 2.8461538461538454], [1069.0, 3.266666666666667], [1041.0, 2.9999999999999996], [1093.0, 2.923076923076923], [1089.0, 2.9285714285714284], [1117.0, 3.071428571428571], [1113.0, 2.846153846153846], [1109.0, 2.923076923076923], [1097.0, 2.846153846153846], [1101.0, 2.7692307692307687], [1121.0, 2.928571428571429], [1149.0, 2.923076923076923], [1145.0, 2.692307692307692], [1141.0, 2.8461538461538454], [1137.0, 2.9230769230769234], [1125.0, 3.142857142857143], [1129.0, 2.846153846153846], [1133.0, 2.7857142857142856], [1105.0, 2.9999999999999996], [1157.0, 2.846153846153846], [1153.0, 2.846153846153846], [1181.0, 3.1111111111111116], [1177.0, 2.9333333333333327], [1173.0, 2.8571428571428568], [1161.0, 3.071428571428571], [1165.0, 2.833333333333333], [1185.0, 2.866666666666666], [1213.0, 2.8666666666666663], [1209.0, 3.066666666666667], [1205.0, 2.5333333333333337], [1201.0, 2.8], [1189.0, 2.933333333333333], [1193.0, 3.0666666666666673], [1197.0, 2.933333333333333], [1169.0, 3.071428571428571], [1221.0, 2.466666666666667], [1217.0, 2.642857142857143], [1245.0, 2.6666666666666665], [1241.0, 3.0], [1237.0, 2.933333333333333], [1225.0, 3.066666666666667], [1229.0, 3.0625000000000004], [1249.0, 2.5714285714285716], [1277.0, 2.625], [1273.0, 2.733333333333333], [1269.0, 2.733333333333333], [1265.0, 2.8125], [1253.0, 2.466666666666667], [1257.0, 2.866666666666666], [1261.0, 5.611111111111112], [1233.0, 3.0000000000000004], [1285.0, 2.8], [1281.0, 2.8125], [1309.0, 2.8], [1305.0, 2.8], [1301.0, 2.866666666666666], [1289.0, 2.733333333333333], [1293.0, 2.666666666666666], [1313.0, 2.666666666666667], [1341.0, 2.8695652173913047], [1337.0, 2.625], [1333.0, 2.733333333333333], [1329.0, 2.866666666666666], [1317.0, 2.8666666666666663], [1321.0, 2.866666666666666], [1325.0, 2.6666666666666665], [1297.0, 3.066666666666667], [1349.0, 3.1250000000000004], [1345.0, 2.5294117647058822], [1373.0, 2.823529411764706], [1369.0, 2.529411764705882], [1365.0, 2.3529411764705888], [1353.0, 2.6470588235294117], [1357.0, 2.7058823529411766], [1377.0, 3.0], [1405.0, 2.9411764705882355], [1401.0, 2.6470588235294117], [1397.0, 2.235294117647059], [1393.0, 2.588235294117647], [1381.0, 2.529411764705882], [1385.0, 2.470588235294118], [1389.0, 2.4705882352941178], [1361.0, 2.6470588235294112], [1413.0, 2.588235294117647], [1409.0, 2.7058823529411766], [1437.0, 2.8235294117647056], [1433.0, 3.0], [1429.0, 2.4117647058823524], [1417.0, 2.470588235294118], [1421.0, 2.352941176470588], [1441.0, 2.5882352941176467], [1469.0, 2.7777777777777772], [1465.0, 2.6470588235294117], [1461.0, 2.8235294117647056], [1457.0, 2.823529411764705], [1445.0, 2.5882352941176467], [1449.0, 2.666666666666667], [1453.0, 2.6666666666666665], [1425.0, 3.0588235294117645], [1477.0, 2.888888888888889], [1473.0, 2.9411764705882355], [1501.0, 2.5882352941176467], [1497.0, 2.2941176470588234], [1493.0, 2.5294117647058822], [1481.0, 2.7647058823529407], [1485.0, 2.5294117647058822], [1505.0, 2.6470588235294117], [1533.0, 2.4210526315789473], [1529.0, 2.8947368421052633], [1525.0, 2.7368421052631575], [1521.0, 2.578947368421052], [1509.0, 2.5499999999999994], [1513.0, 2.4761904761904763], [1517.0, 2.6315789473684212], [1489.0, 2.5625], [1541.0, 2.631578947368421], [1537.0, 2.526315789473684], [1565.0, 2.8947368421052633], [1561.0, 2.4210526315789473], [1557.0, 2.5263157894736836], [1545.0, 2.4736842105263164], [1549.0, 2.421052631578947], [1569.0, 3.9473684210526314], [1597.0, 2.631578947368421], [1593.0, 2.5789473684210527], [1589.0, 2.611111111111111], [1585.0, 2.4444444444444446], [1573.0, 2.3684210526315796], [1577.0, 2.2222222222222228], [1581.0, 2.421052631578947], [1553.0, 2.5625], [1605.0, 2.5263157894736836], [1601.0, 2.3809523809523805], [1629.0, 2.526315789473684], [1625.0, 2.7], [1621.0, 2.4999999999999996], [1609.0, 2.947368421052632], [1613.0, 2.5263157894736836], [1633.0, 2.5789473684210527], [1661.0, 2.5789473684210527], [1657.0, 2.4210526315789473], [1653.0, 2.6842105263157903], [1649.0, 2.684210526315789], [1637.0, 2.6842105263157894], [1641.0, 2.4705882352941178], [1645.0, 2.473684210526316], [1617.0, 2.4736842105263155], [1665.0, 2.368421052631579], [1669.0, 2.6076895692417175], [1673.0, 2.7777777777777772], [515.0, 3.7142857142857144], [527.0, 3.428571428571429], [525.0, 3.857142857142857], [523.0, 3.714285714285714], [513.0, 3.5714285714285716], [517.0, 3.428571428571429], [519.0, 3.5714285714285716], [543.0, 4.285714285714286], [541.0, 3.285714285714286], [539.0, 3.5714285714285716], [537.0, 3.428571428571429], [529.0, 3.7142857142857144], [531.0, 3.8571428571428568], [533.0, 4.0], [535.0, 3.5714285714285716], [521.0, 3.5714285714285716], [547.0, 3.4285714285714284], [559.0, 3.4285714285714284], [557.0, 3.285714285714286], [555.0, 3.5714285714285716], [545.0, 3.285714285714286], [549.0, 3.142857142857143], [551.0, 3.1428571428571432], [575.0, 3.142857142857143], [573.0, 3.5714285714285716], [571.0, 3.428571428571429], [569.0, 3.5714285714285716], [561.0, 3.5714285714285716], [563.0, 3.7142857142857144], [565.0, 3.428571428571429], [567.0, 3.857142857142857], [553.0, 3.0], [579.0, 3.4285714285714284], [591.0, 3.428571428571429], [589.0, 4.0], [587.0, 3.7142857142857144], [577.0, 3.142857142857143], [581.0, 3.5714285714285716], [583.0, 3.2857142857142856], [607.0, 3.8571428571428568], [605.0, 3.4285714285714284], [603.0, 3.285714285714286], [601.0, 3.4285714285714284], [593.0, 3.2857142857142856], [595.0, 3.428571428571429], [597.0, 3.571428571428571], [599.0, 3.7142857142857144], [585.0, 3.7142857142857144], [611.0, 3.5714285714285716], [623.0, 3.7142857142857144], [621.0, 3.7142857142857144], [619.0, 3.5714285714285716], [609.0, 4.0], [613.0, 5.25], [615.0, 3.5714285714285716], [639.0, 3.0000000000000004], [637.0, 2.8571428571428568], [635.0, 3.285714285714286], [633.0, 3.5714285714285716], [625.0, 3.625], [627.0, 3.5], [629.0, 3.7142857142857144], [631.0, 3.8571428571428568], [617.0, 3.7142857142857144], [643.0, 2.8571428571428568], [655.0, 3.2857142857142856], [653.0, 3.7142857142857144], [651.0, 3.1666666666666665], [641.0, 3.7142857142857144], [645.0, 2.8571428571428568], [647.0, 2.625], [671.0, 3.3750000000000004], [669.0, 3.2500000000000004], [667.0, 3.3333333333333335], [665.0, 3.0], [657.0, 3.2857142857142856], [659.0, 3.2857142857142856], [661.0, 3.142857142857143], [663.0, 3.2857142857142856], [649.0, 3.285714285714286], [675.0, 3.375], [687.0, 3.2222222222222223], [685.0, 3.2222222222222223], [683.0, 3.2222222222222223], [673.0, 3.75], [677.0, 3.2222222222222223], [679.0, 3.2222222222222223], [703.0, 3.2222222222222223], [701.0, 3.5555555555555554], [699.0, 3.1111111111111107], [697.0, 3.4444444444444446], [689.0, 3.3333333333333335], [691.0, 3.1111111111111107], [693.0, 3.3333333333333335], [695.0, 3.3333333333333335], [681.0, 3.2222222222222223], [707.0, 3.3333333333333335], [719.0, 2.5555555555555554], [717.0, 2.7777777777777777], [715.0, 3.0], [705.0, 3.7777777777777772], [709.0, 3.111111111111111], [711.0, 3.5555555555555554], [735.0, 3.2222222222222228], [733.0, 3.111111111111111], [731.0, 2.8888888888888884], [729.0, 2.8888888888888884], [721.0, 3.0], [723.0, 3.5555555555555554], [725.0, 3.0], [727.0, 3.111111111111111], [713.0, 3.3333333333333335], [739.0, 3.4444444444444446], [751.0, 3.0], [749.0, 3.111111111111111], [747.0, 2.9999999999999996], [737.0, 3.2222222222222223], [741.0, 3.4444444444444446], [743.0, 3.3333333333333335], [767.0, 3.111111111111111], [765.0, 3.444444444444444], [763.0, 2.666666666666666], [761.0, 2.8888888888888884], [753.0, 2.7777777777777777], [755.0, 2.7777777777777777], [757.0, 3.0], [759.0, 2.9999999999999996], [745.0, 3.0], [771.0, 3.2222222222222223], [783.0, 2.8888888888888884], [781.0, 3.2222222222222223], [779.0, 3.222222222222222], [769.0, 3.6666666666666665], [773.0, 3.5555555555555554], [775.0, 3.222222222222222], [799.0, 3.4444444444444446], [797.0, 3.6666666666666665], [795.0, 3.3333333333333335], [793.0, 3.3333333333333335], [785.0, 3.2222222222222223], [787.0, 3.3333333333333335], [789.0, 2.9999999999999996], [791.0, 3.6666666666666665], [777.0, 3.222222222222222], [803.0, 3.1111111111111107], [815.0, 3.2222222222222223], [813.0, 3.5], [811.0, 3.3333333333333335], [801.0, 4.444444444444445], [805.0, 3.111111111111111], [807.0, 3.2222222222222223], [831.0, 3.4444444444444446], [829.0, 3.333333333333334], [827.0, 3.3333333333333335], [825.0, 3.3333333333333335], [817.0, 3.3], [819.0, 3.4444444444444446], [821.0, 3.5555555555555554], [823.0, 3.111111111111111], [809.0, 3.4444444444444446], [835.0, 3.2000000000000006], [847.0, 2.909090909090909], [845.0, 2.9999999999999996], [843.0, 3.0], [833.0, 3.2222222222222223], [837.0, 3.5], [839.0, 3.1], [863.0, 3.5454545454545454], [861.0, 3.1], [859.0, 3.090909090909091], [857.0, 3.0909090909090904], [849.0, 2.9090909090909087], [851.0, 3.181818181818182], [853.0, 2.6363636363636362], [855.0, 3.181818181818182], [841.0, 3.058823529411765], [867.0, 3.0], [879.0, 3.4545454545454546], [877.0, 2.8999999999999995], [875.0, 3.4545454545454546], [865.0, 2.9999999999999996], [869.0, 2.9166666666666665], [871.0, 2.6363636363636362], [895.0, 3.454545454545455], [893.0, 3.363636363636364], [891.0, 3.3636363636363638], [889.0, 3.4000000000000004], [881.0, 3.0], [883.0, 2.818181818181818], [885.0, 2.545454545454545], [887.0, 3.545454545454545], [873.0, 2.7272727272727266], [899.0, 3.3000000000000003], [911.0, 3.272727272727273], [909.0, 2.9999999999999996], [907.0, 2.9999999999999996], [897.0, 3.272727272727273], [901.0, 3.25], [903.0, 3.454545454545455], [927.0, 3.090909090909091], [925.0, 3.0], [923.0, 3.0999999999999996], [921.0, 3.3000000000000003], [913.0, 3.090909090909091], [915.0, 3.272727272727273], [917.0, 3.0], [919.0, 3.0], [905.0, 3.1666666666666665], [931.0, 3.2222222222222228], [943.0, 3.181818181818182], [941.0, 3.272727272727273], [939.0, 2.9999999999999996], [929.0, 3.1818181818181825], [933.0, 3.1], [935.0, 3.090909090909091], [959.0, 3.090909090909091], [957.0, 3.250000000000001], [955.0, 3.090909090909091], [953.0, 3.090909090909091], [945.0, 3.3636363636363638], [947.0, 3.083333333333333], [949.0, 3.181818181818182], [951.0, 3.083333333333333], [937.0, 3.4000000000000004], [963.0, 3.181818181818182], [975.0, 2.9999999999999996], [973.0, 3.0], [971.0, 2.6363636363636362], [961.0, 3.090909090909091], [965.0, 3.090909090909091], [967.0, 3.363636363636364], [991.0, 2.9999999999999996], [989.0, 3.0], [987.0, 3.3000000000000003], [985.0, 3.454545454545455], [977.0, 2.909090909090909], [979.0, 2.5454545454545454], [981.0, 2.8181818181818175], [983.0, 3.333333333333334], [969.0, 2.916666666666666], [995.0, 2.833333333333333], [1007.0, 3.0625], [1005.0, 3.1428571428571423], [1003.0, 2.916666666666667], [993.0, 3.111111111111111], [997.0, 2.9999999999999996], [999.0, 2.909090909090909], [1023.0, 3.153846153846154], [1021.0, 2.923076923076923], [1019.0, 2.923076923076923], [1017.0, 2.9230769230769234], [1009.0, 2.923076923076923], [1011.0, 3.0], [1013.0, 2.9999999999999996], [1015.0, 2.7142857142857144], [1001.0, 3.0909090909090904], [1030.0, 2.769230769230769], [1054.0, 2.769230769230769], [1050.0, 2.5384615384615388], [1046.0, 2.769230769230769], [1026.0, 2.5384615384615388], [1034.0, 2.7333333333333334], [1038.0, 2.769230769230769], [1086.0, 2.692307692307692], [1082.0, 3.0769230769230766], [1078.0, 2.8461538461538454], [1074.0, 3.0], [1058.0, 2.7499999999999996], [1062.0, 3.0], [1066.0, 2.5000000000000004], [1070.0, 3.230769230769231], [1042.0, 2.9230769230769234], [1094.0, 3.307692307692308], [1118.0, 2.769230769230769], [1114.0, 2.923076923076923], [1110.0, 2.769230769230769], [1090.0, 3.230769230769231], [1098.0, 2.8461538461538454], [1102.0, 2.9999999999999996], [1150.0, 3.230769230769231], [1146.0, 3.0769230769230766], [1142.0, 2.846153846153846], [1138.0, 2.769230769230769], [1122.0, 3.0000000000000004], [1126.0, 3.153846153846154], [1130.0, 2.9999999999999996], [1134.0, 3.0769230769230766], [1106.0, 2.923076923076923], [1158.0, 2.923076923076923], [1182.0, 3.3333333333333335], [1178.0, 2.642857142857143], [1174.0, 3.181818181818182], [1154.0, 3.1538461538461537], [1162.0, 2.8461538461538454], [1166.0, 3.2857142857142856], [1214.0, 2.8], [1210.0, 2.733333333333333], [1206.0, 2.9333333333333336], [1202.0, 2.9333333333333327], [1186.0, 2.8749999999999996], [1190.0, 3.1333333333333337], [1194.0, 2.8], [1198.0, 2.4666666666666663], [1170.0, 3.0714285714285716], [1222.0, 2.4666666666666663], [1246.0, 2.75], [1242.0, 2.7857142857142856], [1238.0, 3.0666666666666664], [1218.0, 2.6666666666666665], [1226.0, 3.0], [1230.0, 2.933333333333333], [1278.0, 2.8], [1274.0, 2.866666666666666], [1270.0, 2.866666666666666], [1266.0, 3.153846153846154], [1250.0, 2.7333333333333334], [1254.0, 2.6666666666666665], [1258.0, 3.0], [1262.0, 2.6666666666666665], [1234.0, 2.666666666666666], [1286.0, 2.866666666666666], [1310.0, 2.733333333333333], [1306.0, 2.8], [1302.0, 2.6666666666666665], [1282.0, 2.714285714285714], [1290.0, 2.8666666666666667], [1294.0, 2.5333333333333337], [1342.0, 2.3749999999999996], [1338.0, 2.785714285714285], [1334.0, 3.076923076923077], [1330.0, 2.733333333333333], [1314.0, 2.6666666666666665], [1318.0, 2.8], [1322.0, 2.6], [1326.0, 2.8], [1298.0, 3.1333333333333333], [1350.0, 3.0], [1374.0, 2.8823529411764706], [1370.0, 2.555555555555555], [1366.0, 2.4117647058823524], [1346.0, 2.6470588235294117], [1354.0, 2.5], [1358.0, 2.764705882352941], [1406.0, 2.647058823529412], [1402.0, 2.7058823529411766], [1398.0, 2.529411764705882], [1394.0, 2.529411764705882], [1378.0, 2.833333333333333], [1382.0, 2.3529411764705888], [1386.0, 2.4117647058823533], [1390.0, 2.6470588235294117], [1362.0, 2.8823529411764706], [1414.0, 2.6470588235294117], [1438.0, 2.529411764705882], [1434.0, 2.5882352941176476], [1430.0, 2.352941176470589], [1410.0, 2.4705882352941178], [1418.0, 2.8235294117647056], [1422.0, 2.529411764705882], [1470.0, 2.529411764705882], [1466.0, 3.0], [1462.0, 2.7058823529411766], [1458.0, 2.705882352941176], [1442.0, 2.7647058823529407], [1446.0, 2.733333333333333], [1450.0, 2.5000000000000004], [1454.0, 2.375], [1426.0, 3.0588235294117645], [1478.0, 3.0], [1502.0, 2.473684210526316], [1498.0, 3.0000000000000004], [1494.0, 2.7647058823529407], [1474.0, 2.5294117647058827], [1482.0, 2.5294117647058822], [1486.0, 2.470588235294118], [1534.0, 2.684210526315789], [1530.0, 2.6315789473684212], [1526.0, 2.5263157894736836], [1522.0, 2.45], [1506.0, 2.333333333333334], [1510.0, 2.1111111111111116], [1514.0, 2.6315789473684212], [1518.0, 2.4210526315789473], [1490.0, 2.764705882352941], [1542.0, 2.526315789473684], [1566.0, 2.526315789473684], [1562.0, 2.4736842105263155], [1558.0, 2.473684210526316], [1538.0, 2.3157894736842106], [1546.0, 2.5263157894736845], [1550.0, 2.5263157894736845], [1598.0, 2.5789473684210527], [1594.0, 2.4615384615384617], [1590.0, 2.6315789473684217], [1586.0, 2.4736842105263164], [1570.0, 2.473684210526316], [1574.0, 2.5263157894736845], [1578.0, 2.6315789473684204], [1582.0, 2.4210526315789473], [1554.0, 2.4999999999999996], [1606.0, 2.5263157894736845], [1630.0, 2.7894736842105257], [1626.0, 2.722222222222222], [1622.0, 2.684210526315789], [1602.0, 2.6666666666666665], [1610.0, 2.7894736842105257], [1614.0, 2.3684210526315788], [1662.0, 2.722222222222222], [1658.0, 2.4210526315789473], [1654.0, 2.4210526315789473], [1650.0, 3.1428571428571432], [1634.0, 2.5263157894736836], [1638.0, 2.4736842105263164], [1642.0, 2.45], [1646.0, 2.631578947368421], [1618.0, 2.6999999999999997], [1666.0, 2.4736842105263155], [1670.0, 2.8197424892703853], [1674.0, 3.5833333333333335], [1031.0, 2.692307692307692], [1055.0, 2.923076923076923], [1051.0, 3.3846153846153846], [1047.0, 2.769230769230769], [1027.0, 2.923076923076923], [1035.0, 3.0], [1039.0, 2.8461538461538463], [1087.0, 2.769230769230769], [1083.0, 2.923076923076923], [1079.0, 2.8461538461538454], [1075.0, 2.923076923076923], [1059.0, 2.769230769230769], [1063.0, 2.769230769230769], [1067.0, 2.928571428571429], [1071.0, 2.9230769230769234], [1043.0, 2.9999999999999996], [1095.0, 2.846153846153846], [1119.0, 3.0769230769230766], [1115.0, 3.0], [1111.0, 2.846153846153846], [1091.0, 3.0769230769230766], [1099.0, 2.769230769230769], [1103.0, 2.769230769230769], [1151.0, 2.9999999999999996], [1147.0, 3.5384615384615383], [1143.0, 2.6153846153846154], [1139.0, 2.6923076923076925], [1123.0, 3.0909090909090904], [1127.0, 3.0769230769230766], [1131.0, 2.6923076923076925], [1135.0, 2.846153846153846], [1107.0, 3.0], [1159.0, 3.153846153846154], [1183.0, 2.7333333333333334], [1179.0, 3.0625], [1175.0, 3.0], [1155.0, 3.0769230769230766], [1163.0, 2.8461538461538463], [1167.0, 3.1538461538461537], [1215.0, 2.625], [1211.0, 2.6666666666666665], [1207.0, 2.933333333333333], [1203.0, 2.8666666666666663], [1187.0, 2.642857142857143], [1191.0, 3.0], [1195.0, 3.0], [1199.0, 2.8], [1171.0, 2.909090909090909], [1223.0, 2.933333333333333], [1247.0, 2.6428571428571423], [1243.0, 2.7333333333333325], [1239.0, 2.866666666666666], [1219.0, 2.333333333333333], [1227.0, 2.6666666666666665], [1231.0, 2.933333333333333], [1279.0, 2.7857142857142856], [1275.0, 2.866666666666666], [1271.0, 2.666666666666666], [1267.0, 3.0000000000000004], [1251.0, 2.8], [1255.0, 2.7692307692307687], [1259.0, 2.8], [1263.0, 2.6], [1235.0, 3.0000000000000004], [1287.0, 2.8], [1311.0, 2.733333333333333], [1307.0, 2.8], [1303.0, 2.6666666666666665], [1283.0, 2.8], [1291.0, 2.5], [1295.0, 2.666666666666667], [1343.0, 2.9444444444444446], [1339.0, 2.6111111111111107], [1335.0, 3.411764705882353], [1331.0, 2.7999999999999994], [1315.0, 2.714285714285714], [1319.0, 2.933333333333333], [1323.0, 3.3333333333333335], [1327.0, 2.6666666666666665], [1299.0, 2.8666666666666667], [1351.0, 2.588235294117647], [1375.0, 2.7647058823529407], [1371.0, 2.4375], [1367.0, 3.0588235294117645], [1347.0, 2.7058823529411766], [1355.0, 2.6999999999999993], [1359.0, 2.5882352941176467], [1407.0, 2.5294117647058822], [1403.0, 2.705882352941176], [1399.0, 2.6470588235294117], [1395.0, 2.5294117647058822], [1379.0, 2.4374999999999996], [1383.0, 2.6111111111111107], [1387.0, 2.6], [1391.0, 2.7647058823529407], [1363.0, 2.7647058823529407], [1415.0, 2.5882352941176467], [1439.0, 2.7058823529411766], [1435.0, 2.4705882352941173], [1431.0, 2.2941176470588234], [1411.0, 2.7058823529411766], [1419.0, 2.6470588235294117], [1423.0, 2.7058823529411766], [1471.0, 2.6470588235294112], [1467.0, 2.7777777777777777], [1463.0, 2.823529411764706], [1459.0, 2.88235294117647], [1443.0, 2.6470588235294117], [1447.0, 2.736842105263158], [1451.0, 2.6470588235294117], [1455.0, 2.7222222222222223], [1427.0, 2.833333333333333], [1479.0, 2.6470588235294117], [1503.0, 2.444444444444444], [1499.0, 3.470588235294118], [1495.0, 2.764705882352941], [1475.0, 2.9999999999999996], [1483.0, 2.8235294117647056], [1487.0, 2.705882352941176], [1535.0, 2.7777777777777772], [1531.0, 2.421052631578948], [1527.0, 2.578947368421052], [1523.0, 2.7777777777777772], [1507.0, 2.8888888888888884], [1511.0, 2.578947368421053], [1515.0, 2.4736842105263164], [1519.0, 2.5263157894736836], [1491.0, 2.4117647058823533], [1543.0, 2.894736842105263], [1567.0, 2.277777777777778], [1563.0, 2.6315789473684212], [1559.0, 2.736842105263158], [1539.0, 3.0], [1547.0, 2.526315789473683], [1551.0, 2.6842105263157894], [1599.0, 2.736842105263158], [1595.0, 2.4799999999999995], [1591.0, 2.6842105263157894], [1587.0, 2.789473684210526], [1571.0, 2.444444444444444], [1575.0, 2.5263157894736836], [1579.0, 2.4999999999999996], [1583.0, 2.473684210526316], [1555.0, 2.5999999999999988], [1607.0, 2.578947368421053], [1631.0, 3.052631578947368], [1627.0, 2.6315789473684212], [1623.0, 2.7222222222222223], [1603.0, 2.68421052631579], [1611.0, 2.5789473684210527], [1615.0, 2.3125], [1663.0, 2.4499999999999993], [1659.0, 2.444444444444444], [1655.0, 2.4499999999999997], [1651.0, 2.65], [1635.0, 2.2941176470588234], [1639.0, 2.5789473684210527], [1643.0, 2.6111111111111107], [1647.0, 3.1052631578947367], [1619.0, 2.555555555555556], [1667.0, 2.345386457118292], [1671.0, 3.0909090909090904], [1675.0, 3.0], [1.0, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1574.774509999979, 2.635400000000022]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1675.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5668.9, "minX": 1.70665986E12, "maxY": 9695876.8, "series": [{"data": [[1.70666022E12, 1027836.6], [1.70666004E12, 9691515.4], [1.70666016E12, 8699054.6], [1.70665986E12, 992945.4], [1.70665998E12, 9695876.8], [1.70665992E12, 8660286.6], [1.7066601E12, 9692484.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70666022E12, 5868.1], [1.70666004E12, 55330.566666666666], [1.70666016E12, 49664.433333333334], [1.70665986E12, 5668.9], [1.70665998E12, 55355.46666666667], [1.70665992E12, 49443.1], [1.7066601E12, 55336.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70666022E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.5455727213639388, "minX": 1.70665986E12, "maxY": 4.3776520509193775, "series": [{"data": [[1.70666022E12, 4.3776520509193775], [1.70666004E12, 2.557927896394814], [1.70666016E12, 2.6909364380814385], [1.70665986E12, 3.052708638360175], [1.70665998E12, 2.5594262295082038], [1.70665992E12, 2.597280510323975], [1.7066601E12, 2.5455727213639388]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70666022E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.4887255637218257, "minX": 1.70665986E12, "maxY": 4.266855256954268, "series": [{"data": [[1.70666022E12, 4.266855256954268], [1.70666004E12, 2.505025251262575], [1.70666016E12, 2.6246448665812494], [1.70665986E12, 2.9795021961932666], [1.70665998E12, 2.510395841663345], [1.70665992E12, 2.5431145431145596], [1.7066601E12, 2.4887255637218257]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70666022E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70665986E12, "maxY": 0.19033674963396768, "series": [{"data": [[1.70666022E12, 0.0], [1.70666004E12, 0.010300515025751345], [1.70666016E12, 0.0061277923235474475], [1.70665986E12, 0.19033674963396768], [1.70665998E12, 0.010195921631347506], [1.70665992E12, 0.016507190420233863], [1.7066601E12, 0.010749462526873628]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70666022E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.70665986E12, "maxY": 43.0, "series": [{"data": [[1.70666022E12, 11.0], [1.70666004E12, 19.0], [1.70666016E12, 15.0], [1.70665986E12, 43.0], [1.70665998E12, 20.0], [1.70665992E12, 24.0], [1.7066601E12, 16.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70666022E12, 2.0], [1.70666004E12, 1.0], [1.70666016E12, 1.0], [1.70665986E12, 1.0], [1.70665998E12, 1.0], [1.70665992E12, 1.0], [1.7066601E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70666022E12, 6.0], [1.70666004E12, 3.0], [1.70666016E12, 3.0], [1.70665986E12, 4.0], [1.70665998E12, 3.0], [1.70665992E12, 3.0], [1.7066601E12, 3.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70666022E12, 8.0], [1.70666004E12, 4.0], [1.70666016E12, 4.0], [1.70665986E12, 6.0], [1.70665998E12, 4.0], [1.70665992E12, 4.0], [1.7066601E12, 3.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70666022E12, 4.0], [1.70666004E12, 3.0], [1.70666016E12, 3.0], [1.70665986E12, 3.0], [1.70665998E12, 3.0], [1.70665992E12, 3.0], [1.7066601E12, 3.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70666022E12, 7.0], [1.70666004E12, 3.0], [1.70666016E12, 4.0], [1.70665986E12, 4.0], [1.70665998E12, 3.0], [1.70665992E12, 3.0], [1.7066601E12, 3.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70666022E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 10.0, "maxY": 38.0, "series": [{"data": [[10.0, 38.0], [25.0, 7.0], [33.0, 4.0], [34.0, 4.5], [44.0, 3.0], [58.0, 6.0], [66.0, 3.0], [67.0, 5.0], [68.0, 3.0], [77.0, 3.0], [90.0, 5.0], [99.0, 4.0], [100.0, 4.0], [101.0, 4.0], [109.0, 3.0], [124.0, 4.0], [133.0, 4.0], [134.0, 3.0], [132.0, 3.0], [143.0, 3.0], [158.0, 4.0], [166.0, 3.0], [167.0, 3.0], [168.0, 3.0], [176.0, 3.0], [191.0, 3.0], [200.0, 3.0], [201.0, 3.0], [208.0, 3.0], [224.0, 3.0], [234.0, 3.0], [232.0, 3.0], [233.0, 3.0], [243.0, 3.0], [265.0, 3.0], [268.0, 3.0], [267.0, 3.0], [266.0, 3.0], [256.0, 3.0], [277.0, 3.0], [300.0, 3.0], [299.0, 3.0], [301.0, 3.0], [290.0, 3.0], [309.0, 3.0], [333.0, 3.0], [334.0, 3.0], [332.0, 3.0], [335.0, 3.0], [322.0, 3.0], [331.0, 3.0], [327.0, 3.0], [330.0, 3.0], [336.0, 3.0], [337.0, 3.0], [338.0, 3.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 338.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 10.0, "maxY": 34.0, "series": [{"data": [[10.0, 34.0], [25.0, 7.0], [33.0, 4.0], [34.0, 4.5], [44.0, 3.0], [58.0, 6.0], [66.0, 3.0], [67.0, 5.0], [68.0, 3.0], [77.0, 3.0], [90.0, 5.0], [99.0, 4.0], [100.0, 4.0], [101.0, 4.0], [109.0, 3.0], [124.0, 4.0], [133.0, 4.0], [134.0, 3.0], [132.0, 3.0], [143.0, 3.0], [158.0, 4.0], [166.0, 3.0], [167.0, 3.0], [168.0, 3.0], [176.0, 3.0], [191.0, 3.0], [200.0, 3.0], [201.0, 3.0], [208.0, 3.0], [224.0, 3.0], [234.0, 3.0], [232.0, 3.0], [233.0, 3.0], [243.0, 3.0], [265.0, 3.0], [268.0, 3.0], [267.0, 3.0], [266.0, 3.0], [256.0, 3.0], [277.0, 3.0], [300.0, 3.0], [299.0, 3.0], [301.0, 3.0], [290.0, 3.0], [309.0, 3.0], [333.0, 3.0], [334.0, 3.0], [332.0, 3.0], [335.0, 3.0], [322.0, 3.0], [331.0, 3.0], [327.0, 2.0], [330.0, 3.0], [336.0, 3.0], [337.0, 3.0], [338.0, 3.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 338.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 34.15, "minX": 1.70665986E12, "maxY": 333.45, "series": [{"data": [[1.70666022E12, 35.35], [1.70666004E12, 333.3333333333333], [1.70666016E12, 299.18333333333334], [1.70665986E12, 34.15], [1.70665998E12, 333.45], [1.70665992E12, 297.8666666666667], [1.7066601E12, 333.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70666022E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 34.15, "minX": 1.70665986E12, "maxY": 333.46666666666664, "series": [{"data": [[1.70666022E12, 35.35], [1.70666004E12, 333.31666666666666], [1.70666016E12, 299.18333333333334], [1.70665986E12, 34.15], [1.70665998E12, 333.46666666666664], [1.70665992E12, 297.85], [1.7066601E12, 333.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70666022E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 34.15, "minX": 1.70665986E12, "maxY": 333.46666666666664, "series": [{"data": [[1.70666022E12, 35.35], [1.70666004E12, 333.31666666666666], [1.70666016E12, 299.18333333333334], [1.70665986E12, 34.15], [1.70665998E12, 333.46666666666664], [1.70665992E12, 297.85], [1.7066601E12, 333.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70666022E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 34.15, "minX": 1.70665986E12, "maxY": 333.46666666666664, "series": [{"data": [[1.70666022E12, 35.35], [1.70666004E12, 333.31666666666666], [1.70666016E12, 299.18333333333334], [1.70665986E12, 34.15], [1.70665998E12, 333.46666666666664], [1.70665992E12, 297.85], [1.7066601E12, 333.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70666022E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

