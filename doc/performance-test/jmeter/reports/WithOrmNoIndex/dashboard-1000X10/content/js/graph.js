/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 25329.0, "series": [{"data": [[0.0, 33.0], [0.1, 33.0], [0.2, 33.0], [0.3, 34.0], [0.4, 34.0], [0.5, 36.0], [0.6, 37.0], [0.7, 38.0], [0.8, 40.0], [0.9, 42.0], [1.0, 46.0], [1.1, 49.0], [1.2, 51.0], [1.3, 53.0], [1.4, 56.0], [1.5, 61.0], [1.6, 66.0], [1.7, 77.0], [1.8, 89.0], [1.9, 99.0], [2.0, 109.0], [2.1, 119.0], [2.2, 129.0], [2.3, 141.0], [2.4, 148.0], [2.5, 157.0], [2.6, 165.0], [2.7, 182.0], [2.8, 191.0], [2.9, 208.0], [3.0, 221.0], [3.1, 231.0], [3.2, 245.0], [3.3, 265.0], [3.4, 277.0], [3.5, 292.0], [3.6, 306.0], [3.7, 328.0], [3.8, 344.0], [3.9, 357.0], [4.0, 371.0], [4.1, 389.0], [4.2, 404.0], [4.3, 425.0], [4.4, 451.0], [4.5, 477.0], [4.6, 499.0], [4.7, 516.0], [4.8, 542.0], [4.9, 566.0], [5.0, 578.0], [5.1, 594.0], [5.2, 618.0], [5.3, 635.0], [5.4, 654.0], [5.5, 668.0], [5.6, 684.0], [5.7, 704.0], [5.8, 725.0], [5.9, 737.0], [6.0, 763.0], [6.1, 787.0], [6.2, 807.0], [6.3, 822.0], [6.4, 831.0], [6.5, 847.0], [6.6, 876.0], [6.7, 887.0], [6.8, 903.0], [6.9, 916.0], [7.0, 926.0], [7.1, 937.0], [7.2, 956.0], [7.3, 968.0], [7.4, 980.0], [7.5, 996.0], [7.6, 1004.0], [7.7, 1026.0], [7.8, 1037.0], [7.9, 1044.0], [8.0, 1056.0], [8.1, 1073.0], [8.2, 1080.0], [8.3, 1099.0], [8.4, 1110.0], [8.5, 1135.0], [8.6, 1151.0], [8.7, 1164.0], [8.8, 1177.0], [8.9, 1193.0], [9.0, 1203.0], [9.1, 1219.0], [9.2, 1229.0], [9.3, 1235.0], [9.4, 1241.0], [9.5, 1249.0], [9.6, 1255.0], [9.7, 1263.0], [9.8, 1280.0], [9.9, 1288.0], [10.0, 1301.0], [10.1, 1308.0], [10.2, 1322.0], [10.3, 1333.0], [10.4, 1343.0], [10.5, 1355.0], [10.6, 1371.0], [10.7, 1387.0], [10.8, 1403.0], [10.9, 1415.0], [11.0, 1428.0], [11.1, 1437.0], [11.2, 1450.0], [11.3, 1460.0], [11.4, 1466.0], [11.5, 1482.0], [11.6, 1490.0], [11.7, 1504.0], [11.8, 1518.0], [11.9, 1525.0], [12.0, 1541.0], [12.1, 1575.0], [12.2, 1589.0], [12.3, 1602.0], [12.4, 1620.0], [12.5, 1633.0], [12.6, 1646.0], [12.7, 1657.0], [12.8, 1673.0], [12.9, 1681.0], [13.0, 1691.0], [13.1, 1699.0], [13.2, 1707.0], [13.3, 1720.0], [13.4, 1737.0], [13.5, 1746.0], [13.6, 1753.0], [13.7, 1767.0], [13.8, 1783.0], [13.9, 1799.0], [14.0, 1811.0], [14.1, 1826.0], [14.2, 1839.0], [14.3, 1850.0], [14.4, 1863.0], [14.5, 1870.0], [14.6, 1885.0], [14.7, 1899.0], [14.8, 1918.0], [14.9, 1929.0], [15.0, 1944.0], [15.1, 1960.0], [15.2, 1967.0], [15.3, 1975.0], [15.4, 1988.0], [15.5, 1996.0], [15.6, 2009.0], [15.7, 2019.0], [15.8, 2034.0], [15.9, 2047.0], [16.0, 2058.0], [16.1, 2071.0], [16.2, 2079.0], [16.3, 2094.0], [16.4, 2115.0], [16.5, 2132.0], [16.6, 2148.0], [16.7, 2164.0], [16.8, 2175.0], [16.9, 2186.0], [17.0, 2202.0], [17.1, 2220.0], [17.2, 2236.0], [17.3, 2245.0], [17.4, 2256.0], [17.5, 2268.0], [17.6, 2281.0], [17.7, 2298.0], [17.8, 2309.0], [17.9, 2329.0], [18.0, 2345.0], [18.1, 2361.0], [18.2, 2370.0], [18.3, 2389.0], [18.4, 2402.0], [18.5, 2419.0], [18.6, 2435.0], [18.7, 2453.0], [18.8, 2465.0], [18.9, 2482.0], [19.0, 2498.0], [19.1, 2519.0], [19.2, 2545.0], [19.3, 2563.0], [19.4, 2575.0], [19.5, 2591.0], [19.6, 2604.0], [19.7, 2620.0], [19.8, 2640.0], [19.9, 2653.0], [20.0, 2668.0], [20.1, 2689.0], [20.2, 2708.0], [20.3, 2721.0], [20.4, 2737.0], [20.5, 2758.0], [20.6, 2772.0], [20.7, 2792.0], [20.8, 2802.0], [20.9, 2814.0], [21.0, 2835.0], [21.1, 2843.0], [21.2, 2851.0], [21.3, 2878.0], [21.4, 2896.0], [21.5, 2913.0], [21.6, 2928.0], [21.7, 2943.0], [21.8, 2958.0], [21.9, 2975.0], [22.0, 2987.0], [22.1, 3003.0], [22.2, 3012.0], [22.3, 3023.0], [22.4, 3033.0], [22.5, 3055.0], [22.6, 3069.0], [22.7, 3091.0], [22.8, 3114.0], [22.9, 3124.0], [23.0, 3151.0], [23.1, 3162.0], [23.2, 3178.0], [23.3, 3202.0], [23.4, 3211.0], [23.5, 3227.0], [23.6, 3244.0], [23.7, 3260.0], [23.8, 3270.0], [23.9, 3282.0], [24.0, 3297.0], [24.1, 3309.0], [24.2, 3333.0], [24.3, 3347.0], [24.4, 3366.0], [24.5, 3388.0], [24.6, 3407.0], [24.7, 3426.0], [24.8, 3437.0], [24.9, 3448.0], [25.0, 3469.0], [25.1, 3488.0], [25.2, 3501.0], [25.3, 3517.0], [25.4, 3530.0], [25.5, 3538.0], [25.6, 3555.0], [25.7, 3564.0], [25.8, 3584.0], [25.9, 3596.0], [26.0, 3610.0], [26.1, 3628.0], [26.2, 3642.0], [26.3, 3665.0], [26.4, 3684.0], [26.5, 3698.0], [26.6, 3721.0], [26.7, 3747.0], [26.8, 3766.0], [26.9, 3782.0], [27.0, 3795.0], [27.1, 3836.0], [27.2, 3850.0], [27.3, 3877.0], [27.4, 3898.0], [27.5, 3922.0], [27.6, 3946.0], [27.7, 3961.0], [27.8, 3984.0], [27.9, 4007.0], [28.0, 4027.0], [28.1, 4047.0], [28.2, 4074.0], [28.3, 4088.0], [28.4, 4108.0], [28.5, 4132.0], [28.6, 4154.0], [28.7, 4176.0], [28.8, 4198.0], [28.9, 4225.0], [29.0, 4241.0], [29.1, 4258.0], [29.2, 4291.0], [29.3, 4323.0], [29.4, 4351.0], [29.5, 4377.0], [29.6, 4396.0], [29.7, 4414.0], [29.8, 4427.0], [29.9, 4451.0], [30.0, 4467.0], [30.1, 4482.0], [30.2, 4500.0], [30.3, 4525.0], [30.4, 4540.0], [30.5, 4560.0], [30.6, 4575.0], [30.7, 4582.0], [30.8, 4608.0], [30.9, 4631.0], [31.0, 4656.0], [31.1, 4676.0], [31.2, 4699.0], [31.3, 4720.0], [31.4, 4749.0], [31.5, 4774.0], [31.6, 4796.0], [31.7, 4813.0], [31.8, 4826.0], [31.9, 4851.0], [32.0, 4868.0], [32.1, 4900.0], [32.2, 4911.0], [32.3, 4934.0], [32.4, 4959.0], [32.5, 4978.0], [32.6, 5005.0], [32.7, 5024.0], [32.8, 5042.0], [32.9, 5060.0], [33.0, 5087.0], [33.1, 5106.0], [33.2, 5133.0], [33.3, 5154.0], [33.4, 5169.0], [33.5, 5184.0], [33.6, 5205.0], [33.7, 5228.0], [33.8, 5251.0], [33.9, 5266.0], [34.0, 5275.0], [34.1, 5288.0], [34.2, 5302.0], [34.3, 5324.0], [34.4, 5334.0], [34.5, 5351.0], [34.6, 5366.0], [34.7, 5385.0], [34.8, 5397.0], [34.9, 5412.0], [35.0, 5432.0], [35.1, 5445.0], [35.2, 5457.0], [35.3, 5471.0], [35.4, 5487.0], [35.5, 5500.0], [35.6, 5515.0], [35.7, 5534.0], [35.8, 5554.0], [35.9, 5567.0], [36.0, 5589.0], [36.1, 5608.0], [36.2, 5617.0], [36.3, 5636.0], [36.4, 5655.0], [36.5, 5670.0], [36.6, 5699.0], [36.7, 5725.0], [36.8, 5750.0], [36.9, 5761.0], [37.0, 5783.0], [37.1, 5806.0], [37.2, 5829.0], [37.3, 5855.0], [37.4, 5878.0], [37.5, 5906.0], [37.6, 5934.0], [37.7, 5947.0], [37.8, 5965.0], [37.9, 5977.0], [38.0, 5988.0], [38.1, 5996.0], [38.2, 6014.0], [38.3, 6027.0], [38.4, 6041.0], [38.5, 6051.0], [38.6, 6063.0], [38.7, 6078.0], [38.8, 6090.0], [38.9, 6102.0], [39.0, 6113.0], [39.1, 6125.0], [39.2, 6143.0], [39.3, 6150.0], [39.4, 6167.0], [39.5, 6182.0], [39.6, 6194.0], [39.7, 6217.0], [39.8, 6234.0], [39.9, 6245.0], [40.0, 6263.0], [40.1, 6280.0], [40.2, 6305.0], [40.3, 6317.0], [40.4, 6336.0], [40.5, 6354.0], [40.6, 6383.0], [40.7, 6394.0], [40.8, 6403.0], [40.9, 6418.0], [41.0, 6432.0], [41.1, 6441.0], [41.2, 6451.0], [41.3, 6465.0], [41.4, 6489.0], [41.5, 6505.0], [41.6, 6519.0], [41.7, 6540.0], [41.8, 6553.0], [41.9, 6565.0], [42.0, 6576.0], [42.1, 6580.0], [42.2, 6596.0], [42.3, 6619.0], [42.4, 6629.0], [42.5, 6640.0], [42.6, 6654.0], [42.7, 6665.0], [42.8, 6680.0], [42.9, 6691.0], [43.0, 6701.0], [43.1, 6718.0], [43.2, 6727.0], [43.3, 6738.0], [43.4, 6750.0], [43.5, 6765.0], [43.6, 6779.0], [43.7, 6791.0], [43.8, 6800.0], [43.9, 6821.0], [44.0, 6834.0], [44.1, 6844.0], [44.2, 6855.0], [44.3, 6864.0], [44.4, 6883.0], [44.5, 6896.0], [44.6, 6910.0], [44.7, 6926.0], [44.8, 6934.0], [44.9, 6944.0], [45.0, 6959.0], [45.1, 6967.0], [45.2, 6978.0], [45.3, 6995.0], [45.4, 7002.0], [45.5, 7025.0], [45.6, 7046.0], [45.7, 7065.0], [45.8, 7076.0], [45.9, 7089.0], [46.0, 7096.0], [46.1, 7112.0], [46.2, 7126.0], [46.3, 7149.0], [46.4, 7164.0], [46.5, 7178.0], [46.6, 7198.0], [46.7, 7214.0], [46.8, 7229.0], [46.9, 7247.0], [47.0, 7267.0], [47.1, 7287.0], [47.2, 7301.0], [47.3, 7312.0], [47.4, 7325.0], [47.5, 7336.0], [47.6, 7356.0], [47.7, 7373.0], [47.8, 7393.0], [47.9, 7406.0], [48.0, 7419.0], [48.1, 7438.0], [48.2, 7456.0], [48.3, 7469.0], [48.4, 7489.0], [48.5, 7505.0], [48.6, 7519.0], [48.7, 7530.0], [48.8, 7536.0], [48.9, 7549.0], [49.0, 7561.0], [49.1, 7579.0], [49.2, 7592.0], [49.3, 7612.0], [49.4, 7629.0], [49.5, 7647.0], [49.6, 7657.0], [49.7, 7668.0], [49.8, 7680.0], [49.9, 7693.0], [50.0, 7706.0], [50.1, 7727.0], [50.2, 7741.0], [50.3, 7754.0], [50.4, 7764.0], [50.5, 7769.0], [50.6, 7793.0], [50.7, 7803.0], [50.8, 7822.0], [50.9, 7832.0], [51.0, 7845.0], [51.1, 7858.0], [51.2, 7871.0], [51.3, 7883.0], [51.4, 7898.0], [51.5, 7912.0], [51.6, 7930.0], [51.7, 7944.0], [51.8, 7953.0], [51.9, 7962.0], [52.0, 7968.0], [52.1, 7979.0], [52.2, 7994.0], [52.3, 8005.0], [52.4, 8016.0], [52.5, 8032.0], [52.6, 8044.0], [52.7, 8055.0], [52.8, 8079.0], [52.9, 8091.0], [53.0, 8102.0], [53.1, 8112.0], [53.2, 8127.0], [53.3, 8142.0], [53.4, 8151.0], [53.5, 8169.0], [53.6, 8185.0], [53.7, 8196.0], [53.8, 8217.0], [53.9, 8228.0], [54.0, 8239.0], [54.1, 8252.0], [54.2, 8257.0], [54.3, 8278.0], [54.4, 8287.0], [54.5, 8297.0], [54.6, 8306.0], [54.7, 8325.0], [54.8, 8339.0], [54.9, 8352.0], [55.0, 8364.0], [55.1, 8372.0], [55.2, 8385.0], [55.3, 8403.0], [55.4, 8413.0], [55.5, 8425.0], [55.6, 8436.0], [55.7, 8448.0], [55.8, 8453.0], [55.9, 8466.0], [56.0, 8472.0], [56.1, 8479.0], [56.2, 8487.0], [56.3, 8498.0], [56.4, 8503.0], [56.5, 8510.0], [56.6, 8533.0], [56.7, 8540.0], [56.8, 8550.0], [56.9, 8560.0], [57.0, 8572.0], [57.1, 8589.0], [57.2, 8611.0], [57.3, 8625.0], [57.4, 8643.0], [57.5, 8656.0], [57.6, 8673.0], [57.7, 8687.0], [57.8, 8703.0], [57.9, 8720.0], [58.0, 8736.0], [58.1, 8750.0], [58.2, 8764.0], [58.3, 8780.0], [58.4, 8797.0], [58.5, 8822.0], [58.6, 8836.0], [58.7, 8844.0], [58.8, 8857.0], [58.9, 8873.0], [59.0, 8896.0], [59.1, 8908.0], [59.2, 8915.0], [59.3, 8923.0], [59.4, 8942.0], [59.5, 8954.0], [59.6, 8969.0], [59.7, 8986.0], [59.8, 8996.0], [59.9, 9015.0], [60.0, 9025.0], [60.1, 9032.0], [60.2, 9040.0], [60.3, 9051.0], [60.4, 9064.0], [60.5, 9079.0], [60.6, 9096.0], [60.7, 9106.0], [60.8, 9118.0], [60.9, 9130.0], [61.0, 9140.0], [61.1, 9150.0], [61.2, 9164.0], [61.3, 9178.0], [61.4, 9194.0], [61.5, 9213.0], [61.6, 9229.0], [61.7, 9255.0], [61.8, 9271.0], [61.9, 9281.0], [62.0, 9304.0], [62.1, 9315.0], [62.2, 9337.0], [62.3, 9354.0], [62.4, 9397.0], [62.5, 9426.0], [62.6, 9445.0], [62.7, 9465.0], [62.8, 9484.0], [62.9, 9497.0], [63.0, 9507.0], [63.1, 9523.0], [63.2, 9535.0], [63.3, 9547.0], [63.4, 9561.0], [63.5, 9583.0], [63.6, 9597.0], [63.7, 9615.0], [63.8, 9629.0], [63.9, 9643.0], [64.0, 9662.0], [64.1, 9676.0], [64.2, 9692.0], [64.3, 9702.0], [64.4, 9713.0], [64.5, 9721.0], [64.6, 9736.0], [64.7, 9749.0], [64.8, 9763.0], [64.9, 9779.0], [65.0, 9793.0], [65.1, 9806.0], [65.2, 9817.0], [65.3, 9829.0], [65.4, 9844.0], [65.5, 9865.0], [65.6, 9878.0], [65.7, 9895.0], [65.8, 9916.0], [65.9, 9928.0], [66.0, 9943.0], [66.1, 9957.0], [66.2, 9966.0], [66.3, 9979.0], [66.4, 9990.0], [66.5, 10000.0], [66.6, 10013.0], [66.7, 10030.0], [66.8, 10041.0], [66.9, 10053.0], [67.0, 10060.0], [67.1, 10081.0], [67.2, 10090.0], [67.3, 10101.0], [67.4, 10113.0], [67.5, 10125.0], [67.6, 10137.0], [67.7, 10152.0], [67.8, 10169.0], [67.9, 10179.0], [68.0, 10189.0], [68.1, 10200.0], [68.2, 10206.0], [68.3, 10214.0], [68.4, 10219.0], [68.5, 10228.0], [68.6, 10241.0], [68.7, 10251.0], [68.8, 10267.0], [68.9, 10277.0], [69.0, 10285.0], [69.1, 10296.0], [69.2, 10306.0], [69.3, 10318.0], [69.4, 10329.0], [69.5, 10336.0], [69.6, 10346.0], [69.7, 10353.0], [69.8, 10364.0], [69.9, 10378.0], [70.0, 10396.0], [70.1, 10409.0], [70.2, 10420.0], [70.3, 10436.0], [70.4, 10450.0], [70.5, 10464.0], [70.6, 10486.0], [70.7, 10502.0], [70.8, 10509.0], [70.9, 10523.0], [71.0, 10537.0], [71.1, 10551.0], [71.2, 10576.0], [71.3, 10591.0], [71.4, 10608.0], [71.5, 10619.0], [71.6, 10644.0], [71.7, 10662.0], [71.8, 10678.0], [71.9, 10692.0], [72.0, 10703.0], [72.1, 10714.0], [72.2, 10723.0], [72.3, 10737.0], [72.4, 10747.0], [72.5, 10763.0], [72.6, 10780.0], [72.7, 10796.0], [72.8, 10808.0], [72.9, 10818.0], [73.0, 10828.0], [73.1, 10839.0], [73.2, 10855.0], [73.3, 10887.0], [73.4, 10898.0], [73.5, 10920.0], [73.6, 10940.0], [73.7, 10953.0], [73.8, 10967.0], [73.9, 10982.0], [74.0, 10993.0], [74.1, 11008.0], [74.2, 11023.0], [74.3, 11039.0], [74.4, 11048.0], [74.5, 11058.0], [74.6, 11067.0], [74.7, 11079.0], [74.8, 11087.0], [74.9, 11101.0], [75.0, 11125.0], [75.1, 11139.0], [75.2, 11158.0], [75.3, 11170.0], [75.4, 11181.0], [75.5, 11195.0], [75.6, 11205.0], [75.7, 11212.0], [75.8, 11224.0], [75.9, 11231.0], [76.0, 11242.0], [76.1, 11253.0], [76.2, 11269.0], [76.3, 11279.0], [76.4, 11292.0], [76.5, 11301.0], [76.6, 11310.0], [76.7, 11319.0], [76.8, 11328.0], [76.9, 11346.0], [77.0, 11360.0], [77.1, 11367.0], [77.2, 11383.0], [77.3, 11396.0], [77.4, 11412.0], [77.5, 11427.0], [77.6, 11440.0], [77.7, 11451.0], [77.8, 11464.0], [77.9, 11482.0], [78.0, 11497.0], [78.1, 11511.0], [78.2, 11523.0], [78.3, 11528.0], [78.4, 11538.0], [78.5, 11547.0], [78.6, 11555.0], [78.7, 11559.0], [78.8, 11567.0], [78.9, 11574.0], [79.0, 11581.0], [79.1, 11589.0], [79.2, 11593.0], [79.3, 11604.0], [79.4, 11613.0], [79.5, 11625.0], [79.6, 11636.0], [79.7, 11648.0], [79.8, 11653.0], [79.9, 11659.0], [80.0, 11672.0], [80.1, 11683.0], [80.2, 11696.0], [80.3, 11708.0], [80.4, 11722.0], [80.5, 11732.0], [80.6, 11739.0], [80.7, 11754.0], [80.8, 11765.0], [80.9, 11785.0], [81.0, 11792.0], [81.1, 11802.0], [81.2, 11814.0], [81.3, 11825.0], [81.4, 11834.0], [81.5, 11846.0], [81.6, 11858.0], [81.7, 11868.0], [81.8, 11876.0], [81.9, 11887.0], [82.0, 11894.0], [82.1, 11906.0], [82.2, 11912.0], [82.3, 11927.0], [82.4, 11948.0], [82.5, 11961.0], [82.6, 11970.0], [82.7, 11981.0], [82.8, 11992.0], [82.9, 12007.0], [83.0, 12023.0], [83.1, 12028.0], [83.2, 12040.0], [83.3, 12048.0], [83.4, 12061.0], [83.5, 12077.0], [83.6, 12087.0], [83.7, 12097.0], [83.8, 12106.0], [83.9, 12118.0], [84.0, 12128.0], [84.1, 12136.0], [84.2, 12142.0], [84.3, 12146.0], [84.4, 12150.0], [84.5, 12157.0], [84.6, 12163.0], [84.7, 12168.0], [84.8, 12174.0], [84.9, 12180.0], [85.0, 12189.0], [85.1, 12197.0], [85.2, 12203.0], [85.3, 12208.0], [85.4, 12213.0], [85.5, 12219.0], [85.6, 12224.0], [85.7, 12228.0], [85.8, 12233.0], [85.9, 12237.0], [86.0, 12242.0], [86.1, 12249.0], [86.2, 12257.0], [86.3, 12263.0], [86.4, 12269.0], [86.5, 12274.0], [86.6, 12280.0], [86.7, 12288.0], [86.8, 12293.0], [86.9, 12303.0], [87.0, 12310.0], [87.1, 12319.0], [87.2, 12328.0], [87.3, 12334.0], [87.4, 12341.0], [87.5, 12353.0], [87.6, 12370.0], [87.7, 12377.0], [87.8, 12385.0], [87.9, 12396.0], [88.0, 12404.0], [88.1, 12410.0], [88.2, 12421.0], [88.3, 12430.0], [88.4, 12441.0], [88.5, 12458.0], [88.6, 12471.0], [88.7, 12484.0], [88.8, 12499.0], [88.9, 12513.0], [89.0, 12524.0], [89.1, 12531.0], [89.2, 12538.0], [89.3, 12553.0], [89.4, 12560.0], [89.5, 12568.0], [89.6, 12577.0], [89.7, 12583.0], [89.8, 12592.0], [89.9, 12608.0], [90.0, 12618.0], [90.1, 12625.0], [90.2, 12633.0], [90.3, 12641.0], [90.4, 12649.0], [90.5, 12659.0], [90.6, 12668.0], [90.7, 12677.0], [90.8, 12680.0], [90.9, 12689.0], [91.0, 12696.0], [91.1, 12702.0], [91.2, 12717.0], [91.3, 12724.0], [91.4, 12732.0], [91.5, 12742.0], [91.6, 12755.0], [91.7, 12764.0], [91.8, 12776.0], [91.9, 12790.0], [92.0, 12796.0], [92.1, 12805.0], [92.2, 12812.0], [92.3, 12821.0], [92.4, 12833.0], [92.5, 12839.0], [92.6, 12847.0], [92.7, 12854.0], [92.8, 12870.0], [92.9, 12880.0], [93.0, 12888.0], [93.1, 12901.0], [93.2, 12911.0], [93.3, 12938.0], [93.4, 12951.0], [93.5, 12968.0], [93.6, 12996.0], [93.7, 13016.0], [93.8, 13161.0], [93.9, 13307.0], [94.0, 13394.0], [94.1, 13489.0], [94.2, 13553.0], [94.3, 13668.0], [94.4, 13722.0], [94.5, 13815.0], [94.6, 13899.0], [94.7, 13960.0], [94.8, 14034.0], [94.9, 14081.0], [95.0, 14124.0], [95.1, 14153.0], [95.2, 14215.0], [95.3, 14287.0], [95.4, 14329.0], [95.5, 14438.0], [95.6, 14526.0], [95.7, 14615.0], [95.8, 14694.0], [95.9, 14763.0], [96.0, 14862.0], [96.1, 14924.0], [96.2, 14983.0], [96.3, 15010.0], [96.4, 15109.0], [96.5, 15160.0], [96.6, 15290.0], [96.7, 15370.0], [96.8, 15462.0], [96.9, 15546.0], [97.0, 15631.0], [97.1, 15665.0], [97.2, 15735.0], [97.3, 15793.0], [97.4, 15859.0], [97.5, 15903.0], [97.6, 15949.0], [97.7, 15989.0], [97.8, 16021.0], [97.9, 16058.0], [98.0, 16088.0], [98.1, 16164.0], [98.2, 16240.0], [98.3, 16297.0], [98.4, 16348.0], [98.5, 16382.0], [98.6, 16436.0], [98.7, 16457.0], [98.8, 16528.0], [98.9, 16587.0], [99.0, 16762.0], [99.1, 17257.0], [99.2, 17631.0], [99.3, 18398.0], [99.4, 18739.0], [99.5, 19160.0], [99.6, 19496.0], [99.7, 19816.0], [99.8, 20200.0], [99.9, 21408.0], [100.0, 25329.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 190.0, "series": [{"data": [[0.0, 190.0], [100.0, 96.0], [200.0, 69.0], [300.0, 63.0], [400.0, 43.0], [500.0, 55.0], [600.0, 52.0], [700.0, 50.0], [800.0, 59.0], [900.0, 79.0], [1000.0, 76.0], [1100.0, 65.0], [1200.0, 102.0], [1300.0, 80.0], [1400.0, 88.0], [1500.0, 60.0], [1600.0, 84.0], [1700.0, 80.0], [1800.0, 80.0], [1900.0, 85.0], [2000.0, 78.0], [2100.0, 65.0], [2200.0, 74.0], [2300.0, 65.0], [2400.0, 63.0], [2500.0, 55.0], [2600.0, 59.0], [2800.0, 66.0], [2700.0, 60.0], [2900.0, 65.0], [3000.0, 68.0], [3100.0, 55.0], [3300.0, 50.0], [3200.0, 74.0], [3400.0, 65.0], [3500.0, 73.0], [3600.0, 60.0], [3700.0, 50.0], [3800.0, 40.0], [3900.0, 42.0], [4000.0, 52.0], [4100.0, 45.0], [4200.0, 43.0], [4300.0, 37.0], [4400.0, 59.0], [4500.0, 57.0], [4600.0, 44.0], [4700.0, 40.0], [4800.0, 48.0], [5000.0, 48.0], [4900.0, 50.0], [5100.0, 50.0], [5200.0, 62.0], [5300.0, 64.0], [5400.0, 67.0], [5500.0, 57.0], [5600.0, 54.0], [5700.0, 46.0], [5800.0, 41.0], [5900.0, 64.0], [6000.0, 75.0], [6100.0, 75.0], [6200.0, 55.0], [6300.0, 58.0], [6600.0, 75.0], [6500.0, 79.0], [6400.0, 71.0], [6700.0, 79.0], [6800.0, 73.0], [6900.0, 84.0], [7000.0, 68.0], [7100.0, 58.0], [7300.0, 66.0], [7200.0, 57.0], [7400.0, 61.0], [7500.0, 79.0], [7600.0, 71.0], [7700.0, 72.0], [7900.0, 80.0], [7800.0, 76.0], [8000.0, 74.0], [8100.0, 74.0], [8200.0, 82.0], [8300.0, 73.0], [8500.0, 80.0], [8400.0, 106.0], [8600.0, 66.0], [8700.0, 63.0], [8800.0, 64.0], [8900.0, 78.0], [9000.0, 83.0], [9200.0, 56.0], [9100.0, 77.0], [9300.0, 43.0], [9400.0, 52.0], [9600.0, 67.0], [9500.0, 68.0], [9700.0, 74.0], [9900.0, 76.0], [10000.0, 81.0], [10100.0, 79.0], [10200.0, 106.0], [9800.0, 69.0], [10300.0, 89.0], [10500.0, 69.0], [10400.0, 63.0], [10600.0, 62.0], [10700.0, 75.0], [10800.0, 68.0], [10900.0, 64.0], [11000.0, 84.0], [11100.0, 65.0], [11200.0, 95.0], [11300.0, 84.0], [11600.0, 100.0], [11700.0, 84.0], [11400.0, 69.0], [11500.0, 123.0], [11800.0, 97.0], [11900.0, 81.0], [12200.0, 174.0], [12000.0, 86.0], [12100.0, 140.0], [12400.0, 85.0], [12500.0, 104.0], [12600.0, 118.0], [12700.0, 102.0], [12300.0, 109.0], [13000.0, 12.0], [12900.0, 56.0], [13300.0, 13.0], [13200.0, 6.0], [12800.0, 103.0], [13100.0, 6.0], [13400.0, 12.0], [13600.0, 13.0], [13800.0, 13.0], [13500.0, 11.0], [13700.0, 11.0], [14200.0, 15.0], [14000.0, 19.0], [14100.0, 24.0], [14300.0, 15.0], [13900.0, 14.0], [14400.0, 8.0], [14600.0, 12.0], [14700.0, 12.0], [14800.0, 10.0], [14500.0, 14.0], [15100.0, 16.0], [15300.0, 10.0], [14900.0, 23.0], [15000.0, 13.0], [15200.0, 5.0], [15600.0, 19.0], [15700.0, 15.0], [15800.0, 19.0], [15400.0, 15.0], [15500.0, 11.0], [16000.0, 28.0], [15900.0, 23.0], [16100.0, 14.0], [16200.0, 16.0], [16300.0, 22.0], [17200.0, 3.0], [16400.0, 26.0], [16800.0, 3.0], [16600.0, 7.0], [17400.0, 1.0], [17000.0, 1.0], [17600.0, 3.0], [18400.0, 3.0], [18200.0, 3.0], [18000.0, 1.0], [17800.0, 1.0], [19400.0, 5.0], [18600.0, 1.0], [18800.0, 3.0], [19000.0, 3.0], [19200.0, 3.0], [20000.0, 3.0], [19600.0, 3.0], [20200.0, 5.0], [20400.0, 2.0], [19800.0, 1.0], [21400.0, 1.0], [22400.0, 1.0], [23200.0, 1.0], [22800.0, 1.0], [24000.0, 1.0], [16500.0, 13.0], [16900.0, 1.0], [17100.0, 2.0], [17300.0, 2.0], [16700.0, 3.0], [18300.0, 2.0], [17900.0, 3.0], [17500.0, 3.0], [18500.0, 2.0], [18700.0, 4.0], [19100.0, 3.0], [19300.0, 1.0], [18900.0, 2.0], [19500.0, 4.0], [19900.0, 4.0], [20100.0, 2.0], [20300.0, 2.0], [19700.0, 2.0], [20900.0, 1.0], [22300.0, 1.0], [21700.0, 1.0], [23300.0, 1.0], [23100.0, 1.0], [25300.0, 1.0], [24900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 461.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8832.0, "series": [{"data": [[0.0, 461.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 707.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8832.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 158.85668958223175, "minX": 1.70665896E12, "maxY": 632.6997698125627, "series": [{"data": [[1.70665908E12, 632.6997698125627], [1.70665902E12, 472.624687499999], [1.70665896E12, 158.85668958223175], [1.70665914E12, 338.3420770877949]], "isOverall": false, "label": "1000 Users 10 Requests", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665914E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 13171.864864864869, "series": [{"data": [[2.0, 41.0], [3.0, 64.0], [4.0, 39.0], [5.0, 37.0], [6.0, 39.0], [7.0, 51.0], [8.0, 701.5], [9.0, 277.0], [10.0, 329.0], [11.0, 520.0], [12.0, 275.33333333333337], [13.0, 593.5], [14.0, 638.0], [15.0, 422.0], [16.0, 511.5], [17.0, 399.0], [18.0, 540.0], [19.0, 537.5], [20.0, 937.3333333333333], [21.0, 535.5], [22.0, 520.5], [23.0, 754.1666666666667], [24.0, 432.3333333333333], [25.0, 431.0], [26.0, 548.3333333333334], [27.0, 440.6666666666667], [28.0, 438.0], [29.0, 509.0], [30.0, 593.6666666666666], [31.0, 443.0], [32.0, 570.6666666666666], [33.0, 368.25], [34.0, 299.0], [35.0, 361.0], [36.0, 382.5], [37.0, 450.0], [38.0, 385.5], [39.0, 391.0], [40.0, 396.25], [41.0, 410.25], [42.0, 905.3333333333333], [43.0, 666.6], [44.0, 385.16666666666663], [45.0, 322.49999999999994], [46.0, 408.4], [47.0, 640.0], [48.0, 363.0], [49.0, 401.2], [50.0, 371.2], [51.0, 416.4], [52.0, 422.0], [53.0, 397.4], [54.0, 491.4], [55.0, 419.16666666666663], [56.0, 399.3333333333333], [57.0, 408.0], [58.0, 333.7142857142857], [59.0, 431.2], [60.0, 507.6], [61.0, 364.7142857142857], [62.0, 387.5], [63.0, 88.0], [64.0, 382.33333333333337], [65.0, 333.14285714285717], [66.0, 469.8], [67.0, 778.1666666666666], [68.0, 497.3333333333333], [69.0, 385.875], [70.0, 684.875], [71.0, 446.0], [72.0, 1931.0], [73.0, 399.625], [74.0, 413.25], [75.0, 630.6], [76.0, 471.625], [77.0, 672.625], [78.0, 461.75], [79.0, 536.3333333333334], [80.0, 481.2857142857142], [81.0, 543.0], [82.0, 503.8571428571429], [83.0, 535.0], [84.0, 1082.375], [85.0, 488.0], [86.0, 572.625], [87.0, 1062.0], [88.0, 676.9166666666666], [89.0, 852.75], [90.0, 917.0], [91.0, 641.8888888888889], [92.0, 948.25], [93.0, 582.9], [94.0, 809.1666666666667], [95.0, 714.375], [96.0, 1013.75], [97.0, 650.4444444444445], [98.0, 763.5714285714286], [99.0, 958.4444444444445], [100.0, 797.7142857142858], [101.0, 1294.6666666666667], [102.0, 1118.625], [103.0, 2046.6], [104.0, 777.0], [105.0, 871.1428571428571], [106.0, 1187.625], [107.0, 907.125], [108.0, 1048.8], [109.0, 1501.8333333333333], [110.0, 1774.857142857143], [111.0, 919.1111111111111], [112.0, 1172.4], [113.0, 910.7142857142857], [114.0, 1819.9166666666665], [115.0, 1068.4285714285716], [116.0, 1074.857142857143], [117.0, 1571.8], [118.0, 1130.5], [119.0, 1040.6296296296296], [120.0, 1042.4545454545455], [121.0, 1810.8750000000002], [122.0, 1446.2941176470588], [123.0, 1446.888888888889], [124.0, 1281.076923076923], [125.0, 1080.962962962963], [126.0, 1102.0], [127.0, 1429.4], [128.0, 1580.3529411764705], [129.0, 876.9444444444445], [130.0, 1331.9411764705883], [131.0, 1771.2857142857142], [132.0, 1497.0], [133.0, 1188.705882352941], [134.0, 1419.6923076923076], [135.0, 1714.75], [136.0, 1715.7142857142858], [137.0, 1735.75], [138.0, 1305.9333333333336], [139.0, 1396.3333333333335], [140.0, 1300.0526315789475], [141.0, 1725.5], [142.0, 1810.75], [143.0, 2260.7999999999997], [144.0, 1541.3999999999999], [145.0, 1620.6], [146.0, 1453.6428571428573], [147.0, 1877.2222222222222], [148.0, 1636.875], [149.0, 1488.9615384615386], [150.0, 1614.6363636363635], [151.0, 2168.0], [152.0, 2373.6153846153843], [153.0, 1803.3333333333333], [154.0, 3027.4444444444443], [155.0, 2910.125], [156.0, 1759.1875], [157.0, 1741.0], [158.0, 1683.7272727272725], [159.0, 2323.7000000000003], [160.0, 1768.833333333333], [161.0, 1675.095238095238], [162.0, 1830.375], [163.0, 3059.0], [164.0, 4179.666666666666], [165.0, 1770.8181818181818], [166.0, 1752.857142857143], [167.0, 3233.6], [168.0, 2572.181818181818], [169.0, 2647.75], [170.0, 3069.933333333333], [171.0, 1647.4736842105262], [172.0, 1737.5416666666667], [173.0, 2323.4], [174.0, 2114.0], [175.0, 2155.714285714286], [176.0, 2215.666666666667], [177.0, 2047.1999999999998], [178.0, 1825.1176470588239], [179.0, 2351.285714285714], [180.0, 2393.4], [181.0, 3129.375], [182.0, 2455.8888888888887], [183.0, 1994.6666666666667], [184.0, 2325.555555555555], [185.0, 2184.0], [186.0, 2062.3846153846152], [187.0, 2052.8666666666663], [188.0, 3606.1428571428573], [189.0, 2745.769230769231], [190.0, 2436.7999999999997], [191.0, 2676.6666666666665], [192.0, 3207.3333333333335], [193.0, 4103.214285714286], [194.0, 2333.0], [195.0, 2166.6000000000004], [196.0, 3960.5833333333335], [197.0, 3256.0], [198.0, 2282.0], [199.0, 2431.5625], [200.0, 2567.222222222222], [201.0, 2539.285714285714], [202.0, 2372.1818181818185], [203.0, 2496.25], [204.0, 2362.1666666666665], [205.0, 3246.666666666667], [206.0, 2695.8333333333335], [207.0, 3759.6666666666665], [208.0, 3486.8461538461543], [209.0, 2197.777777777778], [210.0, 2878.3333333333335], [211.0, 4887.416666666667], [212.0, 2454.142857142857], [213.0, 2700.2857142857147], [214.0, 2422.9090909090914], [215.0, 3527.466666666667], [216.0, 2695.8888888888887], [217.0, 3417.166666666667], [218.0, 3093.866666666667], [219.0, 2906.3043478260865], [220.0, 2693.090909090909], [221.0, 3957.833333333333], [222.0, 4122.363636363637], [223.0, 5180.0625], [224.0, 2784.923076923077], [225.0, 3779.2500000000005], [226.0, 4426.846153846154], [227.0, 3532.6666666666665], [228.0, 4392.363636363636], [229.0, 2616.6153846153843], [230.0, 3649.4999999999995], [231.0, 2691.75], [232.0, 3780.7272727272725], [233.0, 2733.6666666666665], [234.0, 3003.5], [235.0, 3087.5714285714284], [236.0, 4918.545454545453], [237.0, 3069.294117647059], [238.0, 4558.0], [239.0, 3144.8571428571427], [240.0, 3022.0], [241.0, 4760.666666666666], [242.0, 3651.166666666666], [243.0, 3841.1000000000004], [244.0, 3601.4], [245.0, 2861.8571428571427], [246.0, 3489.181818181819], [247.0, 4754.333333333334], [248.0, 3459.8888888888887], [249.0, 4396.428571428571], [250.0, 4039.625], [251.0, 3811.7], [252.0, 3458.7999999999997], [253.0, 3193.7931034482763], [254.0, 3602.7857142857147], [255.0, 3468.8461538461534], [257.0, 2829.7999999999997], [256.0, 3143.3333333333335], [258.0, 3501.166666666667], [259.0, 3217.529411764706], [260.0, 3670.7000000000003], [261.0, 3925.3636363636365], [262.0, 3810.588235294117], [263.0, 3552.8999999999996], [264.0, 4119.400000000001], [270.0, 3612.4444444444443], [271.0, 2993.0], [268.0, 3229.0], [269.0, 4740.166666666667], [265.0, 3474.7500000000005], [266.0, 3195.4999999999995], [267.0, 3807.5882352941176], [273.0, 4502.4], [272.0, 3741.1428571428573], [274.0, 2853.8461538461543], [275.0, 3312.1666666666665], [276.0, 2772.5], [277.0, 2807.0], [278.0, 3164.666666666667], [279.0, 3391.0], [280.0, 3390.333333333333], [286.0, 3856.0], [287.0, 4096.066666666667], [284.0, 3960.5], [285.0, 3948.3888888888896], [281.0, 3688.8571428571427], [282.0, 4363.375], [283.0, 3414.4285714285716], [289.0, 3661.0], [288.0, 4089.846153846154], [290.0, 3874.5], [291.0, 5284.0], [292.0, 2407.2499999999995], [293.0, 5207.909090909091], [294.0, 4896.428571428572], [295.0, 3395.142857142857], [296.0, 4119.636363636364], [302.0, 3728.375], [303.0, 3437.3], [300.0, 3705.3333333333335], [301.0, 3935.916666666667], [297.0, 3898.8181818181815], [298.0, 5645.454545454546], [299.0, 3839.75], [305.0, 4073.363636363636], [304.0, 6056.6875], [306.0, 4235.6], [307.0, 4549.533333333333], [308.0, 6295.0], [309.0, 4581.5], [310.0, 5554.3076923076915], [311.0, 4449.6], [312.0, 5613.090909090909], [318.0, 6336.714285714285], [319.0, 5464.1], [316.0, 4440.0], [317.0, 5875.400000000001], [313.0, 3993.5454545454545], [314.0, 2836.533333333333], [315.0, 3888.9500000000003], [321.0, 3638.8571428571427], [320.0, 5862.6875], [322.0, 7036.727272727272], [323.0, 3612.6666666666665], [324.0, 6194.705882352941], [325.0, 5820.777777777777], [326.0, 7140.058823529413], [327.0, 4148.428571428572], [328.0, 4616.2], [334.0, 4550.875], [335.0, 6615.315789473684], [332.0, 4114.428571428572], [333.0, 5816.428571428571], [329.0, 5076.941176470588], [330.0, 5725.625000000001], [331.0, 8310.95238095238], [337.0, 7209.769230769231], [336.0, 3807.666666666666], [338.0, 6696.615384615385], [339.0, 3774.714285714286], [340.0, 6536.0], [341.0, 5294.545454545455], [342.0, 4719.448275862068], [343.0, 5365.086956521739], [344.0, 6655.307692307692], [350.0, 5974.631578947368], [351.0, 4877.266666666666], [348.0, 7577.333333333333], [349.0, 5701.181818181818], [345.0, 5667.875], [346.0, 5501.25], [347.0, 6773.466666666666], [353.0, 5079.333333333333], [352.0, 8491.0], [354.0, 5762.75], [355.0, 4404.125], [356.0, 5390.133333333334], [357.0, 5983.1], [358.0, 6256.285714285714], [359.0, 7137.214285714286], [360.0, 5889.857142857142], [366.0, 6521.999999999999], [367.0, 6163.8], [364.0, 5897.4], [365.0, 6146.750000000001], [361.0, 5366.444444444444], [362.0, 4986.666666666667], [363.0, 6831.714285714285], [369.0, 6074.125], [368.0, 5671.444444444444], [370.0, 5598.571428571428], [371.0, 6523.633333333334], [372.0, 5332.733333333333], [373.0, 7271.432432432432], [374.0, 5722.428571428572], [375.0, 5062.333333333333], [376.0, 6053.937500000001], [382.0, 5572.6], [383.0, 6207.578947368421], [380.0, 5326.75], [381.0, 5784.333333333333], [377.0, 6182.166666666667], [378.0, 6866.333333333334], [379.0, 5555.4375], [385.0, 6351.411764705883], [384.0, 5787.111111111111], [386.0, 6403.769230769231], [387.0, 6508.0], [388.0, 6107.700000000001], [389.0, 5344.5], [390.0, 7052.6296296296305], [391.0, 7073.571428571428], [392.0, 6110.222222222223], [398.0, 7786.571428571429], [399.0, 6858.5], [396.0, 7759.230769230768], [397.0, 5523.692307692308], [393.0, 7272.719999999999], [394.0, 5863.428571428572], [395.0, 6571.285714285716], [401.0, 7272.571428571428], [400.0, 8612.111111111111], [402.0, 5716.200000000001], [403.0, 7092.166666666666], [404.0, 6309.181818181819], [405.0, 8653.0], [406.0, 6800.307692307693], [407.0, 7733.304347826086], [408.0, 6879.599999999999], [414.0, 7311.272727272728], [415.0, 6057.428571428571], [412.0, 6845.681818181818], [413.0, 7202.8], [409.0, 6622.285714285715], [410.0, 6958.833333333333], [411.0, 6482.272727272727], [417.0, 7249.062500000001], [416.0, 6819.153846153847], [418.0, 7963.45], [419.0, 7067.249999999999], [420.0, 7422.545454545454], [421.0, 8297.666666666666], [422.0, 8047.035714285714], [423.0, 5659.222222222223], [424.0, 9145.0], [430.0, 8163.153846153847], [431.0, 6870.75], [428.0, 7477.999999999999], [429.0, 6332.466666666666], [425.0, 6626.100000000001], [426.0, 8607.058823529413], [427.0, 7387.636363636364], [433.0, 7845.888888888888], [432.0, 7317.904761904762], [434.0, 6544.571428571428], [435.0, 6651.88888888889], [436.0, 8602.000000000002], [437.0, 7501.8125], [438.0, 5980.0], [439.0, 7281.857142857142], [440.0, 6760.090909090909], [446.0, 8269.775], [447.0, 7753.428571428572], [444.0, 8225.0], [445.0, 9081.35], [441.0, 7681.684210526314], [442.0, 8925.84210526316], [443.0, 7562.333333333333], [449.0, 7229.90909090909], [448.0, 6861.428571428572], [450.0, 7850.285714285713], [451.0, 7554.000000000001], [452.0, 7450.111111111111], [453.0, 8043.5], [454.0, 7855.888888888889], [455.0, 9015.695652173916], [456.0, 8393.625], [462.0, 7352.0], [463.0, 7688.31707317073], [460.0, 8048.5], [461.0, 8923.312500000002], [457.0, 7053.727272727272], [458.0, 6028.166666666667], [459.0, 8134.5], [465.0, 9991.8], [464.0, 7373.23076923077], [466.0, 7007.6], [467.0, 9306.1], [468.0, 7346.4], [469.0, 7953.583333333333], [470.0, 8086.1], [471.0, 6556.533333333334], [472.0, 9893.029411764703], [479.0, 9144.785714285716], [478.0, 6995.428571428572], [476.0, 9226.652173913042], [477.0, 6378.0], [473.0, 9581.666666666666], [474.0, 8016.642857142857], [475.0, 7786.166666666667], [481.0, 7545.625], [480.0, 7570.3], [482.0, 8324.0625], [483.0, 8452.631578947368], [484.0, 8376.190476190475], [485.0, 8299.809523809523], [486.0, 8685.249999999998], [487.0, 8675.818181818182], [488.0, 8128.0999999999985], [494.0, 8619.56], [495.0, 8674.303030303034], [492.0, 8344.57142857143], [493.0, 8905.625], [489.0, 6500.588235294118], [490.0, 9419.058823529413], [491.0, 7774.307692307692], [497.0, 8014.222222222223], [496.0, 8582.25], [498.0, 7304.416666666666], [499.0, 9118.285714285716], [500.0, 10388.785714285714], [501.0, 8897.181818181818], [502.0, 9567.57142857143], [503.0, 8342.833333333334], [504.0, 9337.0625], [510.0, 8573.25], [511.0, 10314.714285714286], [508.0, 7218.875], [509.0, 7386.2], [505.0, 7700.125], [506.0, 9691.411764705883], [507.0, 8412.666666666666], [515.0, 8296.933333333334], [512.0, 6805.846153846153], [526.0, 9355.875000000002], [527.0, 8914.0], [524.0, 9750.482758620688], [525.0, 7990.599999999999], [522.0, 8427.214285714286], [523.0, 9931.157894736842], [513.0, 7361.307692307692], [514.0, 8800.722222222223], [516.0, 9457.25], [517.0, 9152.13043478261], [518.0, 8957.769230769232], [519.0, 8264.545454545456], [528.0, 8236.5], [542.0, 10204.400000000001], [543.0, 8201.75], [540.0, 8623.714285714284], [541.0, 10829.7], [538.0, 8931.5], [539.0, 10588.777777777777], [536.0, 8683.125], [537.0, 9982.766666666666], [529.0, 9590.454545454546], [530.0, 7202.857142857143], [531.0, 9766.500000000002], [532.0, 9558.300000000001], [533.0, 8477.25], [534.0, 9189.1], [535.0, 7638.857142857142], [520.0, 8284.57142857143], [521.0, 10469.826086956522], [547.0, 9673.0], [544.0, 9854.444444444445], [558.0, 11508.125], [559.0, 9714.333333333334], [556.0, 9703.472222222223], [557.0, 8285.705882352942], [554.0, 9447.857142857143], [555.0, 10546.074074074077], [545.0, 8494.714285714286], [546.0, 10302.25806451613], [548.0, 9703.416666666666], [549.0, 10531.8125], [550.0, 10795.0], [551.0, 11218.4], [560.0, 9800.40909090909], [574.0, 10060.199999999999], [575.0, 9736.874999999998], [572.0, 9137.285714285716], [573.0, 10655.562500000002], [570.0, 10152.629629629633], [571.0, 9176.050000000001], [568.0, 9173.380952380954], [569.0, 8179.5], [561.0, 10517.970588235297], [562.0, 9649.818181818182], [563.0, 7761.5], [564.0, 9761.0], [565.0, 11020.68], [566.0, 10637.868852459016], [567.0, 10510.205882352939], [552.0, 8592.416666666668], [553.0, 9793.899999999998], [579.0, 8914.444444444445], [576.0, 9508.416666666666], [590.0, 12196.857142857143], [591.0, 11153.361111111111], [588.0, 10270.071428571428], [589.0, 9131.666666666666], [586.0, 10881.076923076924], [587.0, 9318.833333333334], [577.0, 10963.857142857143], [578.0, 9642.23076923077], [580.0, 10322.615384615385], [581.0, 10905.35294117647], [582.0, 11849.8], [583.0, 11198.125000000002], [592.0, 10338.0625], [606.0, 10346.411764705881], [607.0, 8958.928571428572], [604.0, 9313.434782608698], [605.0, 11742.51612903226], [602.0, 10897.125], [603.0, 10125.999999999998], [600.0, 10951.1], [601.0, 9258.999999999998], [593.0, 9648.937499999998], [594.0, 11713.949999999999], [595.0, 11153.181818181818], [596.0, 10309.125], [597.0, 10363.050000000001], [598.0, 9770.142857142859], [599.0, 10534.518518518518], [584.0, 11176.333333333332], [585.0, 9953.199999999999], [611.0, 9462.0], [608.0, 10840.450000000003], [622.0, 11815.391304347828], [623.0, 10984.119999999997], [620.0, 11718.100000000004], [621.0, 9691.888888888889], [618.0, 11157.176470588232], [619.0, 11152.97368421053], [609.0, 11160.214285714286], [610.0, 10938.57142857143], [612.0, 10497.555555555555], [613.0, 10723.649999999998], [614.0, 9339.777777777777], [615.0, 11930.4], [624.0, 12617.615384615383], [638.0, 12084.275862068966], [639.0, 12219.95], [636.0, 12707.533333333335], [637.0, 11398.615384615385], [634.0, 12244.559999999998], [635.0, 11768.5], [632.0, 11753.714285714286], [633.0, 10966.190476190475], [625.0, 10857.9], [626.0, 11495.599999999999], [627.0, 10690.899999999998], [628.0, 9761.133333333335], [629.0, 9880.375], [630.0, 11504.555555555555], [631.0, 10344.538461538461], [616.0, 11155.370370370372], [617.0, 11491.94736842105], [643.0, 9649.800000000001], [640.0, 9442.3], [654.0, 11865.499999999998], [655.0, 12191.583333333334], [652.0, 11224.5], [653.0, 10840.0], [650.0, 10926.000000000002], [651.0, 12546.833333333332], [641.0, 10081.500000000002], [642.0, 11841.28], [644.0, 11701.045454545456], [645.0, 11258.21052631579], [646.0, 11161.5], [647.0, 12443.277777777777], [656.0, 11114.9], [670.0, 12418.918918918918], [671.0, 10690.0], [668.0, 12199.16], [669.0, 12367.064516129036], [666.0, 11272.083333333334], [667.0, 11602.954545454546], [664.0, 10870.083333333334], [665.0, 12868.956521739132], [657.0, 11920.95652173913], [658.0, 12806.600000000002], [659.0, 11708.352941176472], [660.0, 10708.583333333334], [661.0, 12125.589743589746], [662.0, 12528.055555555557], [663.0, 12103.966666666669], [648.0, 11157.275862068962], [649.0, 11895.531250000004], [675.0, 11262.476190476189], [672.0, 9022.125], [686.0, 11172.115384615385], [687.0, 11298.65], [684.0, 12051.320000000002], [685.0, 11901.8], [682.0, 11514.555555555555], [683.0, 12834.692307692309], [673.0, 12350.697674418603], [674.0, 12338.2], [676.0, 13171.864864864869], [677.0, 12280.000000000002], [678.0, 12475.730769230771], [679.0, 11482.833333333334], [688.0, 12072.916666666666], [702.0, 10985.4], [703.0, 11695.982456140355], [700.0, 11984.769230769229], [701.0, 11183.533333333335], [698.0, 11315.045454545454], [699.0, 11889.8], [696.0, 11615.5], [697.0, 11396.033333333335], [689.0, 11870.9], [690.0, 12124.833333333334], [691.0, 11569.59090909091], [692.0, 12325.083333333334], [693.0, 12096.794871794873], [694.0, 12068.793103448274], [695.0, 10697.800000000001], [680.0, 12482.703703703704], [681.0, 11371.272727272726], [707.0, 11605.5], [704.0, 11848.611111111111], [716.0, 11079.0], [714.0, 11328.050000000001], [715.0, 11147.0], [705.0, 11348.02083333333], [706.0, 10745.625], [708.0, 9516.0], [709.0, 11418.923076923076], [710.0, 12892.499999999998], [711.0, 10827.105263157893], [712.0, 11437.80434782609], [713.0, 10832.66666666667], [1.0, 50.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[436.885999999997, 7444.812799999968]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 716.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5168.133333333333, "minX": 1.70665896E12, "maxY": 1550720.0, "series": [{"data": [[1.70665908E12, 1473668.6], [1.70665902E12, 1550720.0], [1.70665896E12, 916378.6], [1.70665914E12, 905232.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70665908E12, 8413.433333333332], [1.70665902E12, 8853.333333333334], [1.70665896E12, 5231.766666666666], [1.70665914E12, 5168.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665914E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1461.4775251189863, "minX": 1.70665896E12, "maxY": 11816.000657678409, "series": [{"data": [[1.70665908E12, 11816.000657678409], [1.70665902E12, 6804.435937499998], [1.70665896E12, 1461.4775251189863], [1.70665914E12, 7482.773554603848]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665914E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1461.350079323111, "minX": 1.70665896E12, "maxY": 11815.883590924053, "series": [{"data": [[1.70665908E12, 11815.883590924053], [1.70665902E12, 6804.319687499999], [1.70665896E12, 1461.350079323111], [1.70665914E12, 7482.666488222689]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665914E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.054068522483940104, "minX": 1.70665896E12, "maxY": 0.10720157842814862, "series": [{"data": [[1.70665908E12, 0.10720157842814862], [1.70665902E12, 0.08187500000000003], [1.70665896E12, 0.10682178741406669], [1.70665914E12, 0.054068522483940104]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665914E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.70665896E12, "maxY": 25329.0, "series": [{"data": [[1.70665908E12, 24046.0], [1.70665902E12, 21408.0], [1.70665896E12, 5302.0], [1.70665914E12, 25329.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70665908E12, 6111.0], [1.70665902E12, 176.0], [1.70665896E12, 33.0], [1.70665914E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70665908E12, 15138.400000000001], [1.70665902E12, 10359.6], [1.70665896E12, 2799.0], [1.70665914E12, 11171.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70665908E12, 19555.96], [1.70665902E12, 13847.849999999997], [1.70665896E12, 3164.24], [1.70665914E12, 17542.1]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70665908E12, 11876.0], [1.70665902E12, 6740.0], [1.70665896E12, 1439.0], [1.70665914E12, 7538.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70665908E12, 16163.400000000001], [1.70665902E12, 11596.8], [1.70665896E12, 2983.0], [1.70665914E12, 13720.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665914E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 3.0, "maxY": 11211.0, "series": [{"data": [[9.0, 36.0], [37.0, 54.0], [46.0, 1022.5], [47.0, 10023.0], [48.0, 8082.5], [49.0, 11211.0], [3.0, 50.0], [51.0, 10695.0], [50.0, 10339.0], [53.0, 7752.0], [52.0, 9584.5], [55.0, 6660.0], [54.0, 8442.5], [57.0, 2194.5], [56.0, 2886.0], [59.0, 1532.0], [58.0, 2754.5], [61.0, 288.5], [60.0, 843.0], [62.0, 1469.0], [18.0, 34.0], [28.0, 34.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 3.0, "maxY": 11211.0, "series": [{"data": [[9.0, 36.0], [37.0, 54.0], [46.0, 1022.5], [47.0, 10023.0], [48.0, 8082.5], [49.0, 11211.0], [3.0, 50.0], [51.0, 10695.0], [50.0, 10339.0], [53.0, 7752.0], [52.0, 9584.5], [55.0, 6660.0], [54.0, 8442.5], [57.0, 2194.0], [56.0, 2886.0], [59.0, 1532.0], [58.0, 2754.5], [61.0, 288.0], [60.0, 842.5], [62.0, 1469.0], [18.0, 34.0], [28.0, 34.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 23.35, "minX": 1.70665896E12, "maxY": 60.31666666666667, "series": [{"data": [[1.70665908E12, 48.05], [1.70665902E12, 60.31666666666667], [1.70665896E12, 34.95], [1.70665914E12, 23.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665914E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.133333333333333, "minX": 1.70665896E12, "maxY": 53.333333333333336, "series": [{"data": [[1.70665908E12, 50.68333333333333], [1.70665902E12, 53.333333333333336], [1.70665896E12, 31.516666666666666], [1.70665914E12, 31.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70665914E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.133333333333333, "minX": 1.70665896E12, "maxY": 53.333333333333336, "series": [{"data": [[1.70665908E12, 50.68333333333333], [1.70665902E12, 53.333333333333336], [1.70665896E12, 31.516666666666666], [1.70665914E12, 31.133333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665914E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.133333333333333, "minX": 1.70665896E12, "maxY": 53.333333333333336, "series": [{"data": [[1.70665908E12, 50.68333333333333], [1.70665902E12, 53.333333333333336], [1.70665896E12, 31.516666666666666], [1.70665914E12, 31.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70665914E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

